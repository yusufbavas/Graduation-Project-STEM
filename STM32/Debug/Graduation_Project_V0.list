
Graduation_Project_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006300  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006640  08006640  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006640  08006640  00016640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006648  08006648  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800664c  0800664c  0001664c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000563c  200001dc  0800682c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005818  0800682c  00025818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f66  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000224e  00000000  00000000  00031172  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  000333c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  000342a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c33  00000000  00000000  000350c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b884  00000000  00000000  0004ccfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000909ad  00000000  00000000  0005857f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8f2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000447c  00000000  00000000  000e8fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001dc 	.word	0x200001dc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006480 	.word	0x08006480

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e0 	.word	0x200001e0
 80001d4:	08006480 	.word	0x08006480

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_uldivmod>:
 8000b28:	b953      	cbnz	r3, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2a:	b94a      	cbnz	r2, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	bf08      	it	eq
 8000b30:	2800      	cmpeq	r0, #0
 8000b32:	bf1c      	itt	ne
 8000b34:	f04f 31ff 	movne.w	r1, #4294967295
 8000b38:	f04f 30ff 	movne.w	r0, #4294967295
 8000b3c:	f000 b972 	b.w	8000e24 <__aeabi_idiv0>
 8000b40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b48:	f000 f806 	bl	8000b58 <__udivmoddi4>
 8000b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b54:	b004      	add	sp, #16
 8000b56:	4770      	bx	lr

08000b58 <__udivmoddi4>:
 8000b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b5c:	9e08      	ldr	r6, [sp, #32]
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4688      	mov	r8, r1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d14b      	bne.n	8000bfe <__udivmoddi4+0xa6>
 8000b66:	428a      	cmp	r2, r1
 8000b68:	4615      	mov	r5, r2
 8000b6a:	d967      	bls.n	8000c3c <__udivmoddi4+0xe4>
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	b14a      	cbz	r2, 8000b86 <__udivmoddi4+0x2e>
 8000b72:	f1c2 0720 	rsb	r7, r2, #32
 8000b76:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b7e:	4095      	lsls	r5, r2
 8000b80:	ea47 0803 	orr.w	r8, r7, r3
 8000b84:	4094      	lsls	r4, r2
 8000b86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8a:	0c23      	lsrs	r3, r4, #16
 8000b8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b90:	fa1f fc85 	uxth.w	ip, r5
 8000b94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x60>
 8000ba4:	18eb      	adds	r3, r5, r3
 8000ba6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000baa:	f080 811b 	bcs.w	8000de4 <__udivmoddi4+0x28c>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 8118 	bls.w	8000de4 <__udivmoddi4+0x28c>
 8000bb4:	3f02      	subs	r7, #2
 8000bb6:	442b      	add	r3, r5
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bcc:	45a4      	cmp	ip, r4
 8000bce:	d909      	bls.n	8000be4 <__udivmoddi4+0x8c>
 8000bd0:	192c      	adds	r4, r5, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd6:	f080 8107 	bcs.w	8000de8 <__udivmoddi4+0x290>
 8000bda:	45a4      	cmp	ip, r4
 8000bdc:	f240 8104 	bls.w	8000de8 <__udivmoddi4+0x290>
 8000be0:	3802      	subs	r0, #2
 8000be2:	442c      	add	r4, r5
 8000be4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000be8:	eba4 040c 	sub.w	r4, r4, ip
 8000bec:	2700      	movs	r7, #0
 8000bee:	b11e      	cbz	r6, 8000bf8 <__udivmoddi4+0xa0>
 8000bf0:	40d4      	lsrs	r4, r2
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0xbe>
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	f000 80eb 	beq.w	8000dde <__udivmoddi4+0x286>
 8000c08:	2700      	movs	r7, #0
 8000c0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c0e:	4638      	mov	r0, r7
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	fab3 f783 	clz	r7, r3
 8000c1a:	2f00      	cmp	r7, #0
 8000c1c:	d147      	bne.n	8000cae <__udivmoddi4+0x156>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xd0>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 80fa 	bhi.w	8000e1c <__udivmoddi4+0x2c4>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	4698      	mov	r8, r3
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d0e0      	beq.n	8000bf8 <__udivmoddi4+0xa0>
 8000c36:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3a:	e7dd      	b.n	8000bf8 <__udivmoddi4+0xa0>
 8000c3c:	b902      	cbnz	r2, 8000c40 <__udivmoddi4+0xe8>
 8000c3e:	deff      	udf	#255	; 0xff
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	f040 808f 	bne.w	8000d68 <__udivmoddi4+0x210>
 8000c4a:	1b49      	subs	r1, r1, r5
 8000c4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c50:	fa1f f885 	uxth.w	r8, r5
 8000c54:	2701      	movs	r7, #1
 8000c56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c64:	fb08 f10c 	mul.w	r1, r8, ip
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x124>
 8000c6c:	18eb      	adds	r3, r5, r3
 8000c6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x122>
 8000c74:	4299      	cmp	r1, r3
 8000c76:	f200 80cd 	bhi.w	8000e14 <__udivmoddi4+0x2bc>
 8000c7a:	4684      	mov	ip, r0
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	b2a3      	uxth	r3, r4
 8000c80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c8c:	fb08 f800 	mul.w	r8, r8, r0
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0x14c>
 8000c94:	192c      	adds	r4, r5, r4
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x14a>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f200 80b6 	bhi.w	8000e0e <__udivmoddi4+0x2b6>
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	eba4 0408 	sub.w	r4, r4, r8
 8000ca8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cac:	e79f      	b.n	8000bee <__udivmoddi4+0x96>
 8000cae:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb2:	40bb      	lsls	r3, r7
 8000cb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ccc:	4325      	orrs	r5, r4
 8000cce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd2:	0c2c      	lsrs	r4, r5, #16
 8000cd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000cd8:	fa1f fa8e 	uxth.w	sl, lr
 8000cdc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	fa02 f207 	lsl.w	r2, r2, r7
 8000cea:	fa00 f107 	lsl.w	r1, r0, r7
 8000cee:	d90b      	bls.n	8000d08 <__udivmoddi4+0x1b0>
 8000cf0:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf8:	f080 8087 	bcs.w	8000e0a <__udivmoddi4+0x2b2>
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	f240 8084 	bls.w	8000e0a <__udivmoddi4+0x2b2>
 8000d02:	f1a9 0902 	sub.w	r9, r9, #2
 8000d06:	4473      	add	r3, lr
 8000d08:	1b1b      	subs	r3, r3, r4
 8000d0a:	b2ad      	uxth	r5, r5
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d1c:	45a2      	cmp	sl, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x1da>
 8000d20:	eb1e 0404 	adds.w	r4, lr, r4
 8000d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d28:	d26b      	bcs.n	8000e02 <__udivmoddi4+0x2aa>
 8000d2a:	45a2      	cmp	sl, r4
 8000d2c:	d969      	bls.n	8000e02 <__udivmoddi4+0x2aa>
 8000d2e:	3802      	subs	r0, #2
 8000d30:	4474      	add	r4, lr
 8000d32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d36:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3a:	eba4 040a 	sub.w	r4, r4, sl
 8000d3e:	454c      	cmp	r4, r9
 8000d40:	46c2      	mov	sl, r8
 8000d42:	464b      	mov	r3, r9
 8000d44:	d354      	bcc.n	8000df0 <__udivmoddi4+0x298>
 8000d46:	d051      	beq.n	8000dec <__udivmoddi4+0x294>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d069      	beq.n	8000e20 <__udivmoddi4+0x2c8>
 8000d4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d50:	eb64 0403 	sbc.w	r4, r4, r3
 8000d54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d58:	40fd      	lsrs	r5, r7
 8000d5a:	40fc      	lsrs	r4, r7
 8000d5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d60:	e9c6 5400 	strd	r5, r4, [r6]
 8000d64:	2700      	movs	r7, #0
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0xa0>
 8000d68:	f1c2 0320 	rsb	r3, r2, #32
 8000d6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d70:	4095      	lsls	r5, r2
 8000d72:	fa01 f002 	lsl.w	r0, r1, r2
 8000d76:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d7e:	4338      	orrs	r0, r7
 8000d80:	0c01      	lsrs	r1, r0, #16
 8000d82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d86:	fa1f f885 	uxth.w	r8, r5
 8000d8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb07 f308 	mul.w	r3, r7, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x256>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da4:	d22f      	bcs.n	8000e06 <__udivmoddi4+0x2ae>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d92d      	bls.n	8000e06 <__udivmoddi4+0x2ae>
 8000daa:	3f02      	subs	r7, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1acb      	subs	r3, r1, r3
 8000db0:	b281      	uxth	r1, r0
 8000db2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbe:	fb00 f308 	mul.w	r3, r0, r8
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x27e>
 8000dc6:	1869      	adds	r1, r5, r1
 8000dc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dcc:	d217      	bcs.n	8000dfe <__udivmoddi4+0x2a6>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d915      	bls.n	8000dfe <__udivmoddi4+0x2a6>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4429      	add	r1, r5
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ddc:	e73b      	b.n	8000c56 <__udivmoddi4+0xfe>
 8000dde:	4637      	mov	r7, r6
 8000de0:	4630      	mov	r0, r6
 8000de2:	e709      	b.n	8000bf8 <__udivmoddi4+0xa0>
 8000de4:	4607      	mov	r7, r0
 8000de6:	e6e7      	b.n	8000bb8 <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fb      	b.n	8000be4 <__udivmoddi4+0x8c>
 8000dec:	4541      	cmp	r1, r8
 8000dee:	d2ab      	bcs.n	8000d48 <__udivmoddi4+0x1f0>
 8000df0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df4:	eb69 020e 	sbc.w	r2, r9, lr
 8000df8:	3801      	subs	r0, #1
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	e7a4      	b.n	8000d48 <__udivmoddi4+0x1f0>
 8000dfe:	4660      	mov	r0, ip
 8000e00:	e7e9      	b.n	8000dd6 <__udivmoddi4+0x27e>
 8000e02:	4618      	mov	r0, r3
 8000e04:	e795      	b.n	8000d32 <__udivmoddi4+0x1da>
 8000e06:	4667      	mov	r7, ip
 8000e08:	e7d1      	b.n	8000dae <__udivmoddi4+0x256>
 8000e0a:	4681      	mov	r9, r0
 8000e0c:	e77c      	b.n	8000d08 <__udivmoddi4+0x1b0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	442c      	add	r4, r5
 8000e12:	e747      	b.n	8000ca4 <__udivmoddi4+0x14c>
 8000e14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e18:	442b      	add	r3, r5
 8000e1a:	e72f      	b.n	8000c7c <__udivmoddi4+0x124>
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	e708      	b.n	8000c32 <__udivmoddi4+0xda>
 8000e20:	4637      	mov	r7, r6
 8000e22:	e6e9      	b.n	8000bf8 <__udivmoddi4+0xa0>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <HCSR04_init>:
#include "HCSR04.h"


void HCSR04_init(TIM_HandleTypeDef *tim){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	IC_Val1 = 0;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HCSR04_init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
	IC_Val2 = 0;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HCSR04_init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
	Difference = 0;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HCSR04_init+0x54>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
	Is_First_Captured = 0;  // is the first value captured ?
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HCSR04_init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
	Distance  = 0;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HCSR04_init+0x5c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]

	timer = tim;
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HCSR04_init+0x60>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(timer);
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HCSR04_init+0x60>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 fb30 	bl	80044be <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(timer, TIM_CHANNEL_3);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HCSR04_init+0x60>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2108      	movs	r1, #8
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fbe1 	bl	800462c <HAL_TIM_IC_Start_IT>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000020c 	.word	0x2000020c
 8000e78:	20000214 	.word	0x20000214
 8000e7c:	20000218 	.word	0x20000218
 8000e80:	20000210 	.word	0x20000210
 8000e84:	20000208 	.word	0x20000208
 8000e88:	20000204 	.word	0x20000204

08000e8c <delay_us>:

void delay_us (uint16_t us)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(timer,0);  // set the counter value a 0
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <delay_us+0x30>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(timer) < us);  // wait for the counter to reach the us input in the parameter
 8000ea0:	bf00      	nop
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <delay_us+0x30>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3f8      	bcc.n	8000ea2 <delay_us+0x16>
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20000204 	.word	0x20000204

08000ec0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC_SR04_Output_GPIO_Port, HC_SR04_Output_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <HCSR04_Read+0x3c>)
 8000ecc:	f002 fa10 	bl	80032f0 <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8000ed0:	200a      	movs	r0, #10
 8000ed2:	f7ff ffdb 	bl	8000e8c <delay_us>
	HAL_GPIO_WritePin(HC_SR04_Output_GPIO_Port, HC_SR04_Output_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <HCSR04_Read+0x3c>)
 8000ede:	f002 fa07 	bl	80032f0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(timer, TIM_IT_CC3);
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HCSR04_Read+0x40>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HCSR04_Read+0x40>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f042 0208 	orr.w	r2, r2, #8
 8000ef4:	60da      	str	r2, [r3, #12]
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020400 	.word	0x40020400
 8000f00:	20000204 	.word	0x20000204
 8000f04:	00000000 	.word	0x00000000

08000f08 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7f1b      	ldrb	r3, [r3, #28]
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	f040 8083 	bne.w	8001020 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000f1a:	4b45      	ldr	r3, [pc, #276]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d11a      	bne.n	8000f58 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8000f22:	2108      	movs	r1, #8
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f003 ff0b 	bl	8004d40 <HAL_TIM_ReadCapturedValue>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	4b41      	ldr	r3, [pc, #260]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f2e:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f30:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6a1a      	ldr	r2, [r3, #32]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000f44:	621a      	str	r2, [r3, #32]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f54:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
		}
	}
}
 8000f56:	e063      	b.n	8001020 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f58:	4b35      	ldr	r3, [pc, #212]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d15f      	bne.n	8001020 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8000f60:	2108      	movs	r1, #8
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f003 feec 	bl	8004d40 <HAL_TIM_ReadCapturedValue>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f6c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d907      	bls.n	8000f92 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4a2b      	ldr	r2, [pc, #172]	; (800103c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e00f      	b.n	8000fb2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d909      	bls.n	8000fb2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fac:	33ff      	adds	r3, #255	; 0xff
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fb0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fa5a 	bl	8000470 <__aeabi_ui2d>
 8000fbc:	a31a      	add	r3, pc, #104	; (adr r3, 8001028 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff facf 	bl	8000564 <__aeabi_dmul>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	4621      	mov	r1, r4
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd6:	f7ff fbef 	bl	80007b8 <__aeabi_ddiv>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460c      	mov	r4, r1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	f7ff fd81 	bl	8000ae8 <__aeabi_d2uiz>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fec:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6a1a      	ldr	r2, [r3, #32]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001002:	621a      	str	r2, [r3, #32]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a12      	ldr	r2, [r2, #32]
 800100e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0208 	bic.w	r2, r2, #8
 800101e:	60da      	str	r2, [r3, #12]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	b020c49c 	.word	0xb020c49c
 800102c:	3fa16872 	.word	0x3fa16872
 8001030:	20000210 	.word	0x20000210
 8001034:	2000020c 	.word	0x2000020c
 8001038:	20000214 	.word	0x20000214
 800103c:	20000218 	.word	0x20000218
 8001040:	20000208 	.word	0x20000208

08001044 <QMC5883L_Write_Reg>:
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT,QMC5883L_ADDRESS,reg,1,Buffer,1,10);
	return Buffer[0];
}

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2]={reg,data};
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	733b      	strb	r3, [r7, #12]
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT,QMC5883L_ADDRESS,Buffer,2,10);
 800105c:	f107 020c 	add.w	r2, r7, #12
 8001060:	230a      	movs	r3, #10
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2302      	movs	r3, #2
 8001066:	211a      	movs	r1, #26
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <QMC5883L_Write_Reg+0x34>)
 800106a:	f002 fa93 	bl	8003594 <HAL_I2C_Master_Transmit>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000234 	.word	0x20000234

0800107c <QMC5883L_Initialize>:
	return (((int16_t)QMC5883L_Read_Reg(QMC5883L_TEMP_READ_LSB)) | (((int16_t)QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB))<<8))/100;
}


void QMC5883L_Initialize(_qmc5883l_MODE MODE,_qmc5883l_ODR ODR,_qmc5883l_RNG RNG,_qmc5883l_OSR OSR)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	4603      	mov	r3, r0
 8001090:	71bb      	strb	r3, [r7, #6]
 8001092:	460b      	mov	r3, r1
 8001094:	717b      	strb	r3, [r7, #5]
 8001096:	4613      	mov	r3, r2
 8001098:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3,0x01);
 800109a:	2101      	movs	r1, #1
 800109c:	200b      	movs	r0, #11
 800109e:	f7ff ffd1 	bl	8001044 <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1,MODE | ODR | RNG | OSR);
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	797b      	ldrb	r3, [r7, #5]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	793b      	ldrb	r3, [r7, #4]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	2009      	movs	r0, #9
 80010ba:	f7ff ffc3 	bl	8001044 <QMC5883L_Write_Reg>
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
	...

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f001 fde8 	bl	8002ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f838 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 fa20 	bl	8001518 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d8:	f000 f9f4 	bl	80014c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010dc:	f000 f89c 	bl	8001218 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010e0:	f000 f8c8 	bl	8001274 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010e4:	f000 f9c4 	bl	8001470 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010e8:	f000 f970 	bl	80013cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  QMC5883L_Initialize(0x01,0x0C,0x10,0x00);
 80010ec:	2300      	movs	r3, #0
 80010ee:	2210      	movs	r2, #16
 80010f0:	210c      	movs	r1, #12
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff ffc2 	bl	800107c <QMC5883L_Initialize>
  HCSR04_init(&htim2);
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <main+0x6c>)
 80010fa:	f7ff fe95 	bl	8000e28 <HCSR04_init>

  HAL_TIM_Base_Start(&htim1);
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <main+0x70>)
 8001100:	f003 f9dd 	bl	80044be <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001104:	2100      	movs	r1, #0
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <main+0x70>)
 8001108:	f003 fa32 	bl	8004570 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800110c:	2104      	movs	r1, #4
 800110e:	480a      	ldr	r0, [pc, #40]	; (8001138 <main+0x70>)
 8001110:	f003 fa2e 	bl	8004570 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_UART_Receive(&huart1, buffer, BUFFER_SIZE, 100) == HAL_OK){
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	2214      	movs	r2, #20
 8001118:	4908      	ldr	r1, [pc, #32]	; (800113c <main+0x74>)
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <main+0x78>)
 800111c:	f004 fb87 	bl	800582e <HAL_UART_Receive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f6      	bne.n	8001114 <main+0x4c>
		  read_commands(&huart1);
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <main+0x78>)
 8001128:	f000 fa94 	bl	8001654 <read_commands>
		  //HAL_UART_Transmit(&huart2, buffer, BUFFER_SIZE, 100);
		  //sprintf(buffer,"Count: %d\r\n",command_count);
		  //HAL_UART_Transmit(&huart2, buffer, BUFFER_SIZE, 100);
		  process_commands();
 800112c:	f000 fad0 	bl	80016d0 <process_commands>
	  if (HAL_UART_Receive(&huart1, buffer, BUFFER_SIZE, 100) == HAL_OK){
 8001130:	e7f0      	b.n	8001114 <main+0x4c>
 8001132:	bf00      	nop
 8001134:	20000968 	.word	0x20000968
 8001138:	200002e8 	.word	0x200002e8
 800113c:	200002d0 	.word	0x200002d0
 8001140:	20000290 	.word	0x20000290

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f005 f806 	bl	8006164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a27      	ldr	r2, [pc, #156]	; (8001210 <SystemClock_Config+0xcc>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <SystemClock_Config+0xcc>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <SystemClock_Config+0xd0>)
 800118e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <SystemClock_Config+0xd0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a8:	2310      	movs	r3, #16
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ac:	2302      	movs	r3, #2
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011b4:	2310      	movs	r3, #16
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011be:	2304      	movs	r3, #4
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c2:	2304      	movs	r3, #4
 80011c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fcea 	bl	8003ba4 <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011d6:	f000 fa39 	bl	800164c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011de:	2302      	movs	r3, #2
 80011e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 ff44 	bl	8004084 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001202:	f000 fa23 	bl	800164c <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3750      	adds	r7, #80	; 0x50
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_I2C1_Init+0x50>)
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <MX_I2C1_Init+0x54>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_I2C1_Init+0x50>)
 8001224:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_I2C1_Init+0x58>)
 8001226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_I2C1_Init+0x50>)
 8001236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800123a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_I2C1_Init+0x50>)
 8001256:	f002 f865 	bl	8003324 <HAL_I2C_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001260:	f000 f9f4 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000234 	.word	0x20000234
 800126c:	40005400 	.word	0x40005400
 8001270:	00061a80 	.word	0x00061a80

08001274 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b096      	sub	sp, #88	; 0x58
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2220      	movs	r2, #32
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 ff59 	bl	8006164 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012b4:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <MX_TIM1_Init+0x154>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800;
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012ba:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80012be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012c8:	2264      	movs	r2, #100	; 0x64
 80012ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012de:	4839      	ldr	r0, [pc, #228]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012e0:	f003 f8c2 	bl	8004468 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012ea:	f000 f9af 	bl	800164c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f8:	4619      	mov	r1, r3
 80012fa:	4832      	ldr	r0, [pc, #200]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012fc:	f003 fc68 	bl	8004bd0 <HAL_TIM_ConfigClockSource>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001306:	f000 f9a1 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800130a:	482e      	ldr	r0, [pc, #184]	; (80013c4 <MX_TIM1_Init+0x150>)
 800130c:	f003 f8fb 	bl	8004506 <HAL_TIM_PWM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001316:	f000 f999 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001322:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001326:	4619      	mov	r1, r3
 8001328:	4826      	ldr	r0, [pc, #152]	; (80013c4 <MX_TIM1_Init+0x150>)
 800132a:	f004 f95f 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001334:	f000 f98a 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	4819      	ldr	r0, [pc, #100]	; (80013c4 <MX_TIM1_Init+0x150>)
 800135e:	f003 fb71 	bl	8004a44 <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001368:	f000 f970 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	2204      	movs	r2, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <MX_TIM1_Init+0x150>)
 8001376:	f003 fb65 	bl	8004a44 <HAL_TIM_PWM_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001380:	f000 f964 	bl	800164c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_TIM1_Init+0x150>)
 80013a8:	f004 f98e 	bl	80056c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80013b2:	f000 f94b 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <MX_TIM1_Init+0x150>)
 80013b8:	f001 fb12 	bl	80029e0 <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3758      	adds	r7, #88	; 0x58
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200002e8 	.word	0x200002e8
 80013c8:	40010000 	.word	0x40010000

080013cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_TIM2_Init+0xa0>)
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 -1;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_TIM2_Init+0xa0>)
 80013f2:	2253      	movs	r2, #83	; 0x53
 80013f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM2_Init+0xa0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff - 1;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_TIM2_Init+0xa0>)
 80013fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001402:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM2_Init+0xa0>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_TIM2_Init+0xa0>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <MX_TIM2_Init+0xa0>)
 8001412:	f003 f8df 	bl	80045d4 <HAL_TIM_IC_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800141c:	f000 f916 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	480f      	ldr	r0, [pc, #60]	; (800146c <MX_TIM2_Init+0xa0>)
 8001430:	f004 f8dc 	bl	80055ec <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800143a:	f000 f907 	bl	800164c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001442:	2301      	movs	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2208      	movs	r2, #8
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM2_Init+0xa0>)
 8001456:	f003 fa59 	bl	800490c <HAL_TIM_IC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001460:	f000 f8f4 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000968 	.word	0x20000968

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_USART1_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800147c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a8:	f004 f974 	bl	8005794 <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 f8cb 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000290 	.word	0x20000290
 80014c0:	40011000 	.word	0x40011000

080014c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_USART2_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014fc:	f004 f94a 	bl	8005794 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f8a1 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200009a8 	.word	0x200009a8
 8001514:	40004400 	.word	0x40004400

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <MX_GPIO_Init+0x120>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <MX_GPIO_Init+0x120>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <MX_GPIO_Init+0x120>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <MX_GPIO_Init+0x120>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a39      	ldr	r2, [pc, #228]	; (8001638 <MX_GPIO_Init+0x120>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <MX_GPIO_Init+0x120>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b33      	ldr	r3, [pc, #204]	; (8001638 <MX_GPIO_Init+0x120>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a32      	ldr	r2, [pc, #200]	; (8001638 <MX_GPIO_Init+0x120>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <MX_GPIO_Init+0x120>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <MX_GPIO_Init+0x120>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a2b      	ldr	r2, [pc, #172]	; (8001638 <MX_GPIO_Init+0x120>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <MX_GPIO_Init+0x120>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2103      	movs	r1, #3
 80015a2:	4826      	ldr	r0, [pc, #152]	; (800163c <MX_GPIO_Init+0x124>)
 80015a4:	f001 fea4 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2123      	movs	r1, #35	; 0x23
 80015ac:	4824      	ldr	r0, [pc, #144]	; (8001640 <MX_GPIO_Init+0x128>)
 80015ae:	f001 fe9f 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC_SR04_Output_GPIO_Port, HC_SR04_Output_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b8:	4822      	ldr	r0, [pc, #136]	; (8001644 <MX_GPIO_Init+0x12c>)
 80015ba:	f001 fe99 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <MX_GPIO_Init+0x130>)
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	481a      	ldr	r0, [pc, #104]	; (800163c <MX_GPIO_Init+0x124>)
 80015d4:	f001 fd0a 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015d8:	2303      	movs	r3, #3
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4813      	ldr	r0, [pc, #76]	; (800163c <MX_GPIO_Init+0x124>)
 80015f0:	f001 fcfc 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 80015f4:	2323      	movs	r3, #35	; 0x23
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_GPIO_Init+0x128>)
 800160c:	f001 fcee 	bl	8002fec <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_SR04_Output_Pin */
  GPIO_InitStruct.Pin = HC_SR04_Output_Pin;
 8001610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HC_SR04_Output_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_GPIO_Init+0x12c>)
 800162a:	f001 fcdf 	bl	8002fec <HAL_GPIO_Init>

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40020800 	.word	0x40020800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	10210000 	.word	0x10210000

0800164c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001652:	e7fe      	b.n	8001652 <Error_Handler+0x6>

08001654 <read_commands>:
#include "process_commands.h"

void read_commands(UART_HandleTypeDef* uart){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	command_count = 0;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <read_commands+0x68>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
	variable_count = 0;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <read_commands+0x6c>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

	while(1){
		if (HAL_UART_Receive(uart, commands[command_count], COMMAND_SIZE, 100) == HAL_OK){
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <read_commands+0x68>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <read_commands+0x70>)
 8001676:	1899      	adds	r1, r3, r2
 8001678:	2364      	movs	r3, #100	; 0x64
 800167a:	2214      	movs	r2, #20
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f004 f8d6 	bl	800582e <HAL_UART_Receive>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ef      	bne.n	8001668 <read_commands+0x14>
			if(strcmp(commands[command_count],COMMAND_END) == 0)
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <read_commands+0x68>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <read_commands+0x70>)
 8001696:	4413      	add	r3, r2
 8001698:	490b      	ldr	r1, [pc, #44]	; (80016c8 <read_commands+0x74>)
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fd9c 	bl	80001d8 <strcmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <read_commands+0x5e>
				break;
			command_count++;
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <read_commands+0x68>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <read_commands+0x68>)
 80016ae:	6013      	str	r3, [r2, #0]
		if (HAL_UART_Receive(uart, commands[command_count], COMMAND_SIZE, 100) == HAL_OK){
 80016b0:	e7da      	b.n	8001668 <read_commands+0x14>
				break;
 80016b2:	bf00      	nop
		}
	}
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20005808 	.word	0x20005808
 80016c0:	20000288 	.word	0x20000288
 80016c4:	200009e8 	.word	0x200009e8
 80016c8:	08006498 	.word	0x08006498
 80016cc:	00000000 	.word	0x00000000

080016d0 <process_commands>:

void process_commands(){
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	b099      	sub	sp, #100	; 0x64
 80016d4:	af00      	add	r7, sp, #0

	strcpy(delimeter," ");
 80016d6:	4abc      	ldr	r2, [pc, #752]	; (80019c8 <process_commands+0x2f8>)
 80016d8:	4bbc      	ldr	r3, [pc, #752]	; (80019cc <process_commands+0x2fc>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	8013      	strh	r3, [r2, #0]

	for(int i=0;i<command_count;++i){
 80016de:	2300      	movs	r3, #0
 80016e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016e2:	f000 bff3 	b.w	80026cc <process_commands+0xffc>
		memset(loops_command,0,COMMAND_SIZE);
 80016e6:	2214      	movs	r2, #20
 80016e8:	2100      	movs	r1, #0
 80016ea:	48b9      	ldr	r0, [pc, #740]	; (80019d0 <process_commands+0x300>)
 80016ec:	f004 fd3a 	bl	8006164 <memset>
		strcpy(loops_command,commands[i]);
 80016f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4ab6      	ldr	r2, [pc, #728]	; (80019d4 <process_commands+0x304>)
 80016fc:	4413      	add	r3, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	48b3      	ldr	r0, [pc, #716]	; (80019d0 <process_commands+0x300>)
 8001702:	f004 fd37 	bl	8006174 <strcpy>

		command = strtok(loops_command,delimeter);
 8001706:	49b0      	ldr	r1, [pc, #704]	; (80019c8 <process_commands+0x2f8>)
 8001708:	48b1      	ldr	r0, [pc, #708]	; (80019d0 <process_commands+0x300>)
 800170a:	f004 fd3b 	bl	8006184 <strtok>
 800170e:	4602      	mov	r2, r0
 8001710:	4bb1      	ldr	r3, [pc, #708]	; (80019d8 <process_commands+0x308>)
 8001712:	601a      	str	r2, [r3, #0]
		// Forward
		if(strcmp(command,COMMAND_FORWARD) == 0){
 8001714:	4bb0      	ldr	r3, [pc, #704]	; (80019d8 <process_commands+0x308>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	49b0      	ldr	r1, [pc, #704]	; (80019dc <process_commands+0x30c>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fd5c 	bl	80001d8 <strcmp>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 81c8 	bne.w	8001ab8 <process_commands+0x3e8>
			int speed;
			parameter = strtok(NULL, delimeter);
 8001728:	49a7      	ldr	r1, [pc, #668]	; (80019c8 <process_commands+0x2f8>)
 800172a:	2000      	movs	r0, #0
 800172c:	f004 fd2a 	bl	8006184 <strtok>
 8001730:	4602      	mov	r2, r0
 8001732:	4bab      	ldr	r3, [pc, #684]	; (80019e0 <process_commands+0x310>)
 8001734:	601a      	str	r2, [r3, #0]
			if(isdigit(parameter[0])){
 8001736:	4baa      	ldr	r3, [pc, #680]	; (80019e0 <process_commands+0x310>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	3b30      	subs	r3, #48	; 0x30
 800173e:	2b09      	cmp	r3, #9
 8001740:	d80e      	bhi.n	8001760 <process_commands+0x90>
				speed = atoi(parameter);
 8001742:	4ba7      	ldr	r3, [pc, #668]	; (80019e0 <process_commands+0x310>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f004 fcde 	bl	8006108 <atoi>
 800174c:	65b8      	str	r0, [r7, #88]	; 0x58
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 800174e:	4ba5      	ldr	r3, [pc, #660]	; (80019e4 <process_commands+0x314>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 8001756:	4ba3      	ldr	r3, [pc, #652]	; (80019e4 <process_commands+0x314>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
 800175e:	e010      	b.n	8001782 <process_commands+0xb2>
			}
			else{
				variable *v2 = find_variable(parameter);
 8001760:	4b9f      	ldr	r3, [pc, #636]	; (80019e0 <process_commands+0x310>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f001 f81f 	bl	80027a8 <find_variable>
 800176a:	60f8      	str	r0, [r7, #12]
				speed = v2->value;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	65bb      	str	r3, [r7, #88]	; 0x58
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 8001772:	4b9c      	ldr	r3, [pc, #624]	; (80019e4 <process_commands+0x314>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 800177a:	4b9a      	ldr	r3, [pc, #616]	; (80019e4 <process_commands+0x314>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
			}

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2101      	movs	r1, #1
 8001786:	4898      	ldr	r0, [pc, #608]	; (80019e8 <process_commands+0x318>)
 8001788:	f001 fdb2 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	2102      	movs	r1, #2
 8001790:	4895      	ldr	r0, [pc, #596]	; (80019e8 <process_commands+0x318>)
 8001792:	f001 fdad 	bl	80032f0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2101      	movs	r1, #1
 800179a:	4894      	ldr	r0, [pc, #592]	; (80019ec <process_commands+0x31c>)
 800179c:	f001 fda8 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2102      	movs	r1, #2
 80017a4:	4891      	ldr	r0, [pc, #580]	; (80019ec <process_commands+0x31c>)
 80017a6:	f001 fda3 	bl	80032f0 <HAL_GPIO_WritePin>

			parameter = strtok(NULL, delimeter);
 80017aa:	4987      	ldr	r1, [pc, #540]	; (80019c8 <process_commands+0x2f8>)
 80017ac:	2000      	movs	r0, #0
 80017ae:	f004 fce9 	bl	8006184 <strtok>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b8a      	ldr	r3, [pc, #552]	; (80019e0 <process_commands+0x310>)
 80017b6:	601a      	str	r2, [r3, #0]
			// forward with 2 argument
			if (parameter != NULL){
 80017b8:	4b89      	ldr	r3, [pc, #548]	; (80019e0 <process_commands+0x310>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8782 	beq.w	80026c6 <process_commands+0xff6>
				int param;
				if(isdigit(parameter[0])){
 80017c2:	4b87      	ldr	r3, [pc, #540]	; (80019e0 <process_commands+0x310>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	3b30      	subs	r3, #48	; 0x30
 80017ca:	2b09      	cmp	r3, #9
 80017cc:	d806      	bhi.n	80017dc <process_commands+0x10c>
					param = atoi(parameter);
 80017ce:	4b84      	ldr	r3, [pc, #528]	; (80019e0 <process_commands+0x310>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fc98 	bl	8006108 <atoi>
 80017d8:	6578      	str	r0, [r7, #84]	; 0x54
 80017da:	e008      	b.n	80017ee <process_commands+0x11e>
				}
				else{
					variable *v2 = find_variable(parameter);
 80017dc:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <process_commands+0x310>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 ffe1 	bl	80027a8 <find_variable>
 80017e6:	60b8      	str	r0, [r7, #8]
					param = v2->value;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	657b      	str	r3, [r7, #84]	; 0x54
				}
				HAL_Delay(ROUND_TO_INT(DISTANCE_TO_MS3(param,(speed < 100 ? speed: 100))));
 80017ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80017f0:	f7fe fe4e 	bl	8000490 <__aeabi_i2d>
 80017f4:	4605      	mov	r5, r0
 80017f6:	460e      	mov	r6, r1
 80017f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017fa:	2b63      	cmp	r3, #99	; 0x63
 80017fc:	dc13      	bgt.n	8001826 <process_commands+0x156>
 80017fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001800:	f7fe fe46 	bl	8000490 <__aeabi_i2d>
 8001804:	a36a      	add	r3, pc, #424	; (adr r3, 80019b0 <process_commands+0x2e0>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe feab 	bl	8000564 <__aeabi_dmul>
 800180e:	4603      	mov	r3, r0
 8001810:	460c      	mov	r4, r1
 8001812:	4618      	mov	r0, r3
 8001814:	4621      	mov	r1, r4
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b75      	ldr	r3, [pc, #468]	; (80019f0 <process_commands+0x320>)
 800181c:	f7fe ffcc 	bl	80007b8 <__aeabi_ddiv>
 8001820:	4603      	mov	r3, r0
 8001822:	460c      	mov	r4, r1
 8001824:	e002      	b.n	800182c <process_commands+0x15c>
 8001826:	a462      	add	r4, pc, #392	; (adr r4, 80019b0 <process_commands+0x2e0>)
 8001828:	e9d4 3400 	ldrd	r3, r4, [r4]
 800182c:	461a      	mov	r2, r3
 800182e:	4623      	mov	r3, r4
 8001830:	4628      	mov	r0, r5
 8001832:	4631      	mov	r1, r6
 8001834:	f7fe ffc0 	bl	80007b8 <__aeabi_ddiv>
 8001838:	4603      	mov	r3, r0
 800183a:	460c      	mov	r4, r1
 800183c:	4625      	mov	r5, r4
 800183e:	461c      	mov	r4, r3
 8001840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001842:	2b63      	cmp	r3, #99	; 0x63
 8001844:	dc1f      	bgt.n	8001886 <process_commands+0x1b6>
 8001846:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001848:	f7fe fe22 	bl	8000490 <__aeabi_i2d>
 800184c:	a35a      	add	r3, pc, #360	; (adr r3, 80019b8 <process_commands+0x2e8>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fe87 	bl	8000564 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b63      	ldr	r3, [pc, #396]	; (80019f0 <process_commands+0x320>)
 8001864:	f7fe ffa8 	bl	80007b8 <__aeabi_ddiv>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001878:	f7fe ff9e 	bl	80007b8 <__aeabi_ddiv>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	e002      	b.n	800188c <process_commands+0x1bc>
 8001886:	a14e      	add	r1, pc, #312	; (adr r1, 80019c0 <process_commands+0x2f0>)
 8001888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800188c:	4622      	mov	r2, r4
 800188e:	462b      	mov	r3, r5
 8001890:	f7fe fcb2 	bl	80001f8 <__adddf3>
 8001894:	4603      	mov	r3, r0
 8001896:	460c      	mov	r4, r1
 8001898:	4618      	mov	r0, r3
 800189a:	4621      	mov	r1, r4
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	f7ff f8e4 	bl	8000a70 <__aeabi_dcmpge>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d063      	beq.n	8001976 <process_commands+0x2a6>
 80018ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80018b0:	f7fe fdee 	bl	8000490 <__aeabi_i2d>
 80018b4:	4605      	mov	r5, r0
 80018b6:	460e      	mov	r6, r1
 80018b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018ba:	2b63      	cmp	r3, #99	; 0x63
 80018bc:	dc13      	bgt.n	80018e6 <process_commands+0x216>
 80018be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80018c0:	f7fe fde6 	bl	8000490 <__aeabi_i2d>
 80018c4:	a33a      	add	r3, pc, #232	; (adr r3, 80019b0 <process_commands+0x2e0>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe4b 	bl	8000564 <__aeabi_dmul>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	4618      	mov	r0, r3
 80018d4:	4621      	mov	r1, r4
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <process_commands+0x320>)
 80018dc:	f7fe ff6c 	bl	80007b8 <__aeabi_ddiv>
 80018e0:	4603      	mov	r3, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	e002      	b.n	80018ec <process_commands+0x21c>
 80018e6:	a432      	add	r4, pc, #200	; (adr r4, 80019b0 <process_commands+0x2e0>)
 80018e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	4628      	mov	r0, r5
 80018f2:	4631      	mov	r1, r6
 80018f4:	f7fe ff60 	bl	80007b8 <__aeabi_ddiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	4625      	mov	r5, r4
 80018fe:	461c      	mov	r4, r3
 8001900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001902:	2b63      	cmp	r3, #99	; 0x63
 8001904:	dc1f      	bgt.n	8001946 <process_commands+0x276>
 8001906:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001908:	f7fe fdc2 	bl	8000490 <__aeabi_i2d>
 800190c:	a32a      	add	r3, pc, #168	; (adr r3, 80019b8 <process_commands+0x2e8>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fe27 	bl	8000564 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <process_commands+0x320>)
 8001924:	f7fe ff48 	bl	80007b8 <__aeabi_ddiv>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001938:	f7fe ff3e 	bl	80007b8 <__aeabi_ddiv>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	e002      	b.n	800194c <process_commands+0x27c>
 8001946:	a11e      	add	r1, pc, #120	; (adr r1, 80019c0 <process_commands+0x2f0>)
 8001948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800194c:	4622      	mov	r2, r4
 800194e:	462b      	mov	r3, r5
 8001950:	f7fe fc52 	bl	80001f8 <__adddf3>
 8001954:	4603      	mov	r3, r0
 8001956:	460c      	mov	r4, r1
 8001958:	4618      	mov	r0, r3
 800195a:	4621      	mov	r1, r4
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <process_commands+0x324>)
 8001962:	f7fe fc49 	bl	80001f8 <__adddf3>
 8001966:	4603      	mov	r3, r0
 8001968:	460c      	mov	r4, r1
 800196a:	4618      	mov	r0, r3
 800196c:	4621      	mov	r1, r4
 800196e:	f7ff f893 	bl	8000a98 <__aeabi_d2iz>
 8001972:	4603      	mov	r3, r0
 8001974:	e087      	b.n	8001a86 <process_commands+0x3b6>
 8001976:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001978:	f7fe fd8a 	bl	8000490 <__aeabi_i2d>
 800197c:	4605      	mov	r5, r0
 800197e:	460e      	mov	r6, r1
 8001980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001982:	2b63      	cmp	r3, #99	; 0x63
 8001984:	dc38      	bgt.n	80019f8 <process_commands+0x328>
 8001986:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001988:	f7fe fd82 	bl	8000490 <__aeabi_i2d>
 800198c:	a308      	add	r3, pc, #32	; (adr r3, 80019b0 <process_commands+0x2e0>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fde7 	bl	8000564 <__aeabi_dmul>
 8001996:	4603      	mov	r3, r0
 8001998:	460c      	mov	r4, r1
 800199a:	4618      	mov	r0, r3
 800199c:	4621      	mov	r1, r4
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <process_commands+0x320>)
 80019a4:	f7fe ff08 	bl	80007b8 <__aeabi_ddiv>
 80019a8:	4603      	mov	r3, r0
 80019aa:	460c      	mov	r4, r1
 80019ac:	e027      	b.n	80019fe <process_commands+0x32e>
 80019ae:	bf00      	nop
 80019b0:	9374bc6a 	.word	0x9374bc6a
 80019b4:	3f960418 	.word	0x3f960418
 80019b8:	05e51c4f 	.word	0x05e51c4f
 80019bc:	4067417d 	.word	0x4067417d
 80019c0:	05e51c4f 	.word	0x05e51c4f
 80019c4:	4057417d 	.word	0x4057417d
 80019c8:	2000580c 	.word	0x2000580c
 80019cc:	080064ac 	.word	0x080064ac
 80019d0:	20000220 	.word	0x20000220
 80019d4:	200009e8 	.word	0x200009e8
 80019d8:	2000028c 	.word	0x2000028c
 80019dc:	080064b0 	.word	0x080064b0
 80019e0:	2000021c 	.word	0x2000021c
 80019e4:	200002e8 	.word	0x200002e8
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40590000 	.word	0x40590000
 80019f4:	3fe00000 	.word	0x3fe00000
 80019f8:	a4cb      	add	r4, pc, #812	; (adr r4, 8001d28 <process_commands+0x658>)
 80019fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4623      	mov	r3, r4
 8001a02:	4628      	mov	r0, r5
 8001a04:	4631      	mov	r1, r6
 8001a06:	f7fe fed7 	bl	80007b8 <__aeabi_ddiv>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460c      	mov	r4, r1
 8001a0e:	4625      	mov	r5, r4
 8001a10:	461c      	mov	r4, r3
 8001a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a14:	2b63      	cmp	r3, #99	; 0x63
 8001a16:	dc1f      	bgt.n	8001a58 <process_commands+0x388>
 8001a18:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001a1a:	f7fe fd39 	bl	8000490 <__aeabi_i2d>
 8001a1e:	a3c4      	add	r3, pc, #784	; (adr r3, 8001d30 <process_commands+0x660>)
 8001a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a24:	f7fe fd9e 	bl	8000564 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4bc0      	ldr	r3, [pc, #768]	; (8001d38 <process_commands+0x668>)
 8001a36:	f7fe febf 	bl	80007b8 <__aeabi_ddiv>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4a:	f7fe feb5 	bl	80007b8 <__aeabi_ddiv>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	e002      	b.n	8001a5e <process_commands+0x38e>
 8001a58:	a1b1      	add	r1, pc, #708	; (adr r1, 8001d20 <process_commands+0x650>)
 8001a5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a5e:	4622      	mov	r2, r4
 8001a60:	462b      	mov	r3, r5
 8001a62:	f7fe fbc9 	bl	80001f8 <__adddf3>
 8001a66:	4603      	mov	r3, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	4bb2      	ldr	r3, [pc, #712]	; (8001d3c <process_commands+0x66c>)
 8001a74:	f7fe fbbe 	bl	80001f4 <__aeabi_dsub>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	4621      	mov	r1, r4
 8001a80:	f7ff f80a 	bl	8000a98 <__aeabi_d2iz>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 f97c 	bl	8002d84 <HAL_Delay>
				//HAL_Delay(param);
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2101      	movs	r1, #1
 8001a90:	48ab      	ldr	r0, [pc, #684]	; (8001d40 <process_commands+0x670>)
 8001a92:	f001 fc2d 	bl	80032f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2102      	movs	r1, #2
 8001a9a:	48a9      	ldr	r0, [pc, #676]	; (8001d40 <process_commands+0x670>)
 8001a9c:	f001 fc28 	bl	80032f0 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	48a7      	ldr	r0, [pc, #668]	; (8001d44 <process_commands+0x674>)
 8001aa6:	f001 fc23 	bl	80032f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2102      	movs	r1, #2
 8001aae:	48a5      	ldr	r0, [pc, #660]	; (8001d44 <process_commands+0x674>)
 8001ab0:	f001 fc1e 	bl	80032f0 <HAL_GPIO_WritePin>
 8001ab4:	f000 be07 	b.w	80026c6 <process_commands+0xff6>
			}
		}
		// backward
		else if(strcmp(command,COMMAND_BACKWARD) == 0){
 8001ab8:	4ba3      	ldr	r3, [pc, #652]	; (8001d48 <process_commands+0x678>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	49a3      	ldr	r1, [pc, #652]	; (8001d4c <process_commands+0x67c>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fb8a 	bl	80001d8 <strcmp>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 81c4 	bne.w	8001e54 <process_commands+0x784>
			int speed;
			parameter = strtok(NULL, delimeter);
 8001acc:	49a0      	ldr	r1, [pc, #640]	; (8001d50 <process_commands+0x680>)
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f004 fb58 	bl	8006184 <strtok>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b9f      	ldr	r3, [pc, #636]	; (8001d54 <process_commands+0x684>)
 8001ad8:	601a      	str	r2, [r3, #0]

			if(isdigit(parameter[0])){
 8001ada:	4b9e      	ldr	r3, [pc, #632]	; (8001d54 <process_commands+0x684>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3b30      	subs	r3, #48	; 0x30
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d80e      	bhi.n	8001b04 <process_commands+0x434>
				speed = atoi(parameter);
 8001ae6:	4b9b      	ldr	r3, [pc, #620]	; (8001d54 <process_commands+0x684>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 fb0c 	bl	8006108 <atoi>
 8001af0:	6538      	str	r0, [r7, #80]	; 0x50
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 8001af2:	4b99      	ldr	r3, [pc, #612]	; (8001d58 <process_commands+0x688>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001af8:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 8001afa:	4b97      	ldr	r3, [pc, #604]	; (8001d58 <process_commands+0x688>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b00:	639a      	str	r2, [r3, #56]	; 0x38
 8001b02:	e010      	b.n	8001b26 <process_commands+0x456>
			}
			else{
				variable *v2 = find_variable(parameter);
 8001b04:	4b93      	ldr	r3, [pc, #588]	; (8001d54 <process_commands+0x684>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fe4d 	bl	80027a8 <find_variable>
 8001b0e:	6178      	str	r0, [r7, #20]
				speed = v2->value;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	653b      	str	r3, [r7, #80]	; 0x50
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 8001b16:	4b90      	ldr	r3, [pc, #576]	; (8001d58 <process_commands+0x688>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b1c:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 8001b1e:	4b8e      	ldr	r3, [pc, #568]	; (8001d58 <process_commands+0x688>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001b24:	639a      	str	r2, [r3, #56]	; 0x38
			}

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4885      	ldr	r0, [pc, #532]	; (8001d40 <process_commands+0x670>)
 8001b2c:	f001 fbe0 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001b30:	2200      	movs	r2, #0
 8001b32:	2102      	movs	r1, #2
 8001b34:	4882      	ldr	r0, [pc, #520]	; (8001d40 <process_commands+0x670>)
 8001b36:	f001 fbdb 	bl	80032f0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4881      	ldr	r0, [pc, #516]	; (8001d44 <process_commands+0x674>)
 8001b40:	f001 fbd6 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2102      	movs	r1, #2
 8001b48:	487e      	ldr	r0, [pc, #504]	; (8001d44 <process_commands+0x674>)
 8001b4a:	f001 fbd1 	bl	80032f0 <HAL_GPIO_WritePin>

			parameter = strtok(NULL, delimeter);
 8001b4e:	4980      	ldr	r1, [pc, #512]	; (8001d50 <process_commands+0x680>)
 8001b50:	2000      	movs	r0, #0
 8001b52:	f004 fb17 	bl	8006184 <strtok>
 8001b56:	4602      	mov	r2, r0
 8001b58:	4b7e      	ldr	r3, [pc, #504]	; (8001d54 <process_commands+0x684>)
 8001b5a:	601a      	str	r2, [r3, #0]
			// backward with second argument
			if (parameter != NULL){
 8001b5c:	4b7d      	ldr	r3, [pc, #500]	; (8001d54 <process_commands+0x684>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 85b0 	beq.w	80026c6 <process_commands+0xff6>
				int param;
				if(isdigit(parameter[0])){
 8001b66:	4b7b      	ldr	r3, [pc, #492]	; (8001d54 <process_commands+0x684>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	3b30      	subs	r3, #48	; 0x30
 8001b6e:	2b09      	cmp	r3, #9
 8001b70:	d806      	bhi.n	8001b80 <process_commands+0x4b0>
					param = atoi(parameter);
 8001b72:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <process_commands+0x684>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 fac6 	bl	8006108 <atoi>
 8001b7c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001b7e:	e008      	b.n	8001b92 <process_commands+0x4c2>
				}
				else{
					variable *v2 = find_variable(parameter);
 8001b80:	4b74      	ldr	r3, [pc, #464]	; (8001d54 <process_commands+0x684>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fe0f 	bl	80027a8 <find_variable>
 8001b8a:	6138      	str	r0, [r7, #16]
					param = v2->value;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	64fb      	str	r3, [r7, #76]	; 0x4c
				}
				HAL_Delay(ROUND_TO_INT(DISTANCE_TO_MS3(param,(speed < 100 ? speed: 100))));
 8001b92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001b94:	f7fe fc7c 	bl	8000490 <__aeabi_i2d>
 8001b98:	4605      	mov	r5, r0
 8001b9a:	460e      	mov	r6, r1
 8001b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b9e:	2b63      	cmp	r3, #99	; 0x63
 8001ba0:	dc13      	bgt.n	8001bca <process_commands+0x4fa>
 8001ba2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001ba4:	f7fe fc74 	bl	8000490 <__aeabi_i2d>
 8001ba8:	a35f      	add	r3, pc, #380	; (adr r3, 8001d28 <process_commands+0x658>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fcd9 	bl	8000564 <__aeabi_dmul>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	460c      	mov	r4, r1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	4621      	mov	r1, r4
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	4b5e      	ldr	r3, [pc, #376]	; (8001d38 <process_commands+0x668>)
 8001bc0:	f7fe fdfa 	bl	80007b8 <__aeabi_ddiv>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	e002      	b.n	8001bd0 <process_commands+0x500>
 8001bca:	a457      	add	r4, pc, #348	; (adr r4, 8001d28 <process_commands+0x658>)
 8001bcc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	4631      	mov	r1, r6
 8001bd8:	f7fe fdee 	bl	80007b8 <__aeabi_ddiv>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	460c      	mov	r4, r1
 8001be0:	4625      	mov	r5, r4
 8001be2:	461c      	mov	r4, r3
 8001be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be6:	2b63      	cmp	r3, #99	; 0x63
 8001be8:	dc1f      	bgt.n	8001c2a <process_commands+0x55a>
 8001bea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001bec:	f7fe fc50 	bl	8000490 <__aeabi_i2d>
 8001bf0:	a34f      	add	r3, pc, #316	; (adr r3, 8001d30 <process_commands+0x660>)
 8001bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf6:	f7fe fcb5 	bl	8000564 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	4b4c      	ldr	r3, [pc, #304]	; (8001d38 <process_commands+0x668>)
 8001c08:	f7fe fdd6 	bl	80007b8 <__aeabi_ddiv>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c1c:	f7fe fdcc 	bl	80007b8 <__aeabi_ddiv>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	e002      	b.n	8001c30 <process_commands+0x560>
 8001c2a:	a13d      	add	r1, pc, #244	; (adr r1, 8001d20 <process_commands+0x650>)
 8001c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c30:	4622      	mov	r2, r4
 8001c32:	462b      	mov	r3, r5
 8001c34:	f7fe fae0 	bl	80001f8 <__adddf3>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	460c      	mov	r4, r1
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	4621      	mov	r1, r4
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	f7fe ff12 	bl	8000a70 <__aeabi_dcmpge>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8084 	beq.w	8001d5c <process_commands+0x68c>
 8001c54:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c56:	f7fe fc1b 	bl	8000490 <__aeabi_i2d>
 8001c5a:	4605      	mov	r5, r0
 8001c5c:	460e      	mov	r6, r1
 8001c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c60:	2b63      	cmp	r3, #99	; 0x63
 8001c62:	dc13      	bgt.n	8001c8c <process_commands+0x5bc>
 8001c64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001c66:	f7fe fc13 	bl	8000490 <__aeabi_i2d>
 8001c6a:	a32f      	add	r3, pc, #188	; (adr r3, 8001d28 <process_commands+0x658>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fc78 	bl	8000564 <__aeabi_dmul>
 8001c74:	4603      	mov	r3, r0
 8001c76:	460c      	mov	r4, r1
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	4b2d      	ldr	r3, [pc, #180]	; (8001d38 <process_commands+0x668>)
 8001c82:	f7fe fd99 	bl	80007b8 <__aeabi_ddiv>
 8001c86:	4603      	mov	r3, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	e002      	b.n	8001c92 <process_commands+0x5c2>
 8001c8c:	a426      	add	r4, pc, #152	; (adr r4, 8001d28 <process_commands+0x658>)
 8001c8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4623      	mov	r3, r4
 8001c96:	4628      	mov	r0, r5
 8001c98:	4631      	mov	r1, r6
 8001c9a:	f7fe fd8d 	bl	80007b8 <__aeabi_ddiv>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	460c      	mov	r4, r1
 8001ca2:	4625      	mov	r5, r4
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca8:	2b63      	cmp	r3, #99	; 0x63
 8001caa:	dc1f      	bgt.n	8001cec <process_commands+0x61c>
 8001cac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001cae:	f7fe fbef 	bl	8000490 <__aeabi_i2d>
 8001cb2:	a31f      	add	r3, pc, #124	; (adr r3, 8001d30 <process_commands+0x660>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fc54 	bl	8000564 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <process_commands+0x668>)
 8001cca:	f7fe fd75 	bl	80007b8 <__aeabi_ddiv>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cde:	f7fe fd6b 	bl	80007b8 <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	e002      	b.n	8001cf2 <process_commands+0x622>
 8001cec:	a10c      	add	r1, pc, #48	; (adr r1, 8001d20 <process_commands+0x650>)
 8001cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	f7fe fa7f 	bl	80001f8 <__adddf3>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4621      	mov	r1, r4
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <process_commands+0x66c>)
 8001d08:	f7fe fa76 	bl	80001f8 <__adddf3>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	460c      	mov	r4, r1
 8001d10:	4618      	mov	r0, r3
 8001d12:	4621      	mov	r1, r4
 8001d14:	f7fe fec0 	bl	8000a98 <__aeabi_d2iz>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	e082      	b.n	8001e22 <process_commands+0x752>
 8001d1c:	f3af 8000 	nop.w
 8001d20:	05e51c4f 	.word	0x05e51c4f
 8001d24:	4057417d 	.word	0x4057417d
 8001d28:	9374bc6a 	.word	0x9374bc6a
 8001d2c:	3f960418 	.word	0x3f960418
 8001d30:	05e51c4f 	.word	0x05e51c4f
 8001d34:	4067417d 	.word	0x4067417d
 8001d38:	40590000 	.word	0x40590000
 8001d3c:	3fe00000 	.word	0x3fe00000
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020800 	.word	0x40020800
 8001d48:	2000028c 	.word	0x2000028c
 8001d4c:	080064b4 	.word	0x080064b4
 8001d50:	2000580c 	.word	0x2000580c
 8001d54:	2000021c 	.word	0x2000021c
 8001d58:	200002e8 	.word	0x200002e8
 8001d5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d5e:	f7fe fb97 	bl	8000490 <__aeabi_i2d>
 8001d62:	4605      	mov	r5, r0
 8001d64:	460e      	mov	r6, r1
 8001d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d68:	2b63      	cmp	r3, #99	; 0x63
 8001d6a:	dc13      	bgt.n	8001d94 <process_commands+0x6c4>
 8001d6c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001d6e:	f7fe fb8f 	bl	8000490 <__aeabi_i2d>
 8001d72:	a3a5      	add	r3, pc, #660	; (adr r3, 8002008 <process_commands+0x938>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fbf4 	bl	8000564 <__aeabi_dmul>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	460c      	mov	r4, r1
 8001d80:	4618      	mov	r0, r3
 8001d82:	4621      	mov	r1, r4
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4ba9      	ldr	r3, [pc, #676]	; (8002030 <process_commands+0x960>)
 8001d8a:	f7fe fd15 	bl	80007b8 <__aeabi_ddiv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	460c      	mov	r4, r1
 8001d92:	e002      	b.n	8001d9a <process_commands+0x6ca>
 8001d94:	a49c      	add	r4, pc, #624	; (adr r4, 8002008 <process_commands+0x938>)
 8001d96:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	4628      	mov	r0, r5
 8001da0:	4631      	mov	r1, r6
 8001da2:	f7fe fd09 	bl	80007b8 <__aeabi_ddiv>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	4625      	mov	r5, r4
 8001dac:	461c      	mov	r4, r3
 8001dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db0:	2b63      	cmp	r3, #99	; 0x63
 8001db2:	dc1f      	bgt.n	8001df4 <process_commands+0x724>
 8001db4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001db6:	f7fe fb6b 	bl	8000490 <__aeabi_i2d>
 8001dba:	a395      	add	r3, pc, #596	; (adr r3, 8002010 <process_commands+0x940>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fbd0 	bl	8000564 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b97      	ldr	r3, [pc, #604]	; (8002030 <process_commands+0x960>)
 8001dd2:	f7fe fcf1 	bl	80007b8 <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001de6:	f7fe fce7 	bl	80007b8 <__aeabi_ddiv>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	e002      	b.n	8001dfa <process_commands+0x72a>
 8001df4:	a188      	add	r1, pc, #544	; (adr r1, 8002018 <process_commands+0x948>)
 8001df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dfa:	4622      	mov	r2, r4
 8001dfc:	462b      	mov	r3, r5
 8001dfe:	f7fe f9fb 	bl	80001f8 <__adddf3>
 8001e02:	4603      	mov	r3, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	4618      	mov	r0, r3
 8001e08:	4621      	mov	r1, r4
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b89      	ldr	r3, [pc, #548]	; (8002034 <process_commands+0x964>)
 8001e10:	f7fe f9f0 	bl	80001f4 <__aeabi_dsub>
 8001e14:	4603      	mov	r3, r0
 8001e16:	460c      	mov	r4, r1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	f7fe fe3c 	bl	8000a98 <__aeabi_d2iz>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 ffae 	bl	8002d84 <HAL_Delay>
				//HAL_Delay(param);

				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	4882      	ldr	r0, [pc, #520]	; (8002038 <process_commands+0x968>)
 8001e2e:	f001 fa5f 	bl	80032f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2102      	movs	r1, #2
 8001e36:	4880      	ldr	r0, [pc, #512]	; (8002038 <process_commands+0x968>)
 8001e38:	f001 fa5a 	bl	80032f0 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2101      	movs	r1, #1
 8001e40:	487e      	ldr	r0, [pc, #504]	; (800203c <process_commands+0x96c>)
 8001e42:	f001 fa55 	bl	80032f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2102      	movs	r1, #2
 8001e4a:	487c      	ldr	r0, [pc, #496]	; (800203c <process_commands+0x96c>)
 8001e4c:	f001 fa50 	bl	80032f0 <HAL_GPIO_WritePin>
 8001e50:	f000 bc39 	b.w	80026c6 <process_commands+0xff6>
			}
		}
		else if(strcmp(command,COMMAND_RIGHT) == 0){
 8001e54:	4b7a      	ldr	r3, [pc, #488]	; (8002040 <process_commands+0x970>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	497a      	ldr	r1, [pc, #488]	; (8002044 <process_commands+0x974>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe f9bc 	bl	80001d8 <strcmp>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 80b2 	bne.w	8001fcc <process_commands+0x8fc>
			parameter = strtok(NULL, delimeter);
 8001e68:	4977      	ldr	r1, [pc, #476]	; (8002048 <process_commands+0x978>)
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f004 f98a 	bl	8006184 <strtok>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b76      	ldr	r3, [pc, #472]	; (800204c <process_commands+0x97c>)
 8001e74:	601a      	str	r2, [r3, #0]

			int param;
			if(isdigit(parameter[0])){
 8001e76:	4b75      	ldr	r3, [pc, #468]	; (800204c <process_commands+0x97c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	3b30      	subs	r3, #48	; 0x30
 8001e7e:	2b09      	cmp	r3, #9
 8001e80:	d806      	bhi.n	8001e90 <process_commands+0x7c0>
				param = atoi(parameter);
 8001e82:	4b72      	ldr	r3, [pc, #456]	; (800204c <process_commands+0x97c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 f93e 	bl	8006108 <atoi>
 8001e8c:	64b8      	str	r0, [r7, #72]	; 0x48
 8001e8e:	e008      	b.n	8001ea2 <process_commands+0x7d2>
			}
			else{
				variable *v2 = find_variable(parameter);
 8001e90:	4b6e      	ldr	r3, [pc, #440]	; (800204c <process_commands+0x97c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fc87 	bl	80027a8 <find_variable>
 8001e9a:	61b8      	str	r0, [r7, #24]
				param = v2->value;
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8001ea2:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <process_commands+0x980>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2264      	movs	r2, #100	; 0x64
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8001eaa:	4b69      	ldr	r3, [pc, #420]	; (8002050 <process_commands+0x980>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2264      	movs	r2, #100	; 0x64
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4860      	ldr	r0, [pc, #384]	; (8002038 <process_commands+0x968>)
 8001eb8:	f001 fa1a 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	485d      	ldr	r0, [pc, #372]	; (8002038 <process_commands+0x968>)
 8001ec2:	f001 fa15 	bl	80032f0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2101      	movs	r1, #1
 8001eca:	485c      	ldr	r0, [pc, #368]	; (800203c <process_commands+0x96c>)
 8001ecc:	f001 fa10 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	4859      	ldr	r0, [pc, #356]	; (800203c <process_commands+0x96c>)
 8001ed6:	f001 fa0b 	bl	80032f0 <HAL_GPIO_WritePin>

			//HAL_Delay(param);
			HAL_Delay(ROUND_TO_INT(DEGREE_TO_MS(param)));
 8001eda:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001edc:	f7fe fad8 	bl	8000490 <__aeabi_i2d>
 8001ee0:	a34f      	add	r3, pc, #316	; (adr r3, 8002020 <process_commands+0x950>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe fc67 	bl	80007b8 <__aeabi_ddiv>
 8001eea:	4603      	mov	r3, r0
 8001eec:	460c      	mov	r4, r1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	a34d      	add	r3, pc, #308	; (adr r3, 8002028 <process_commands+0x958>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe f97e 	bl	80001f8 <__adddf3>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	4618      	mov	r0, r3
 8001f02:	4621      	mov	r1, r4
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	f7fe fdb0 	bl	8000a70 <__aeabi_dcmpge>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d021      	beq.n	8001f5a <process_commands+0x88a>
 8001f16:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f18:	f7fe faba 	bl	8000490 <__aeabi_i2d>
 8001f1c:	a340      	add	r3, pc, #256	; (adr r3, 8002020 <process_commands+0x950>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fc49 	bl	80007b8 <__aeabi_ddiv>
 8001f26:	4603      	mov	r3, r0
 8001f28:	460c      	mov	r4, r1
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	a33e      	add	r3, pc, #248	; (adr r3, 8002028 <process_commands+0x958>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	f7fe f960 	bl	80001f8 <__adddf3>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	460c      	mov	r4, r1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	4621      	mov	r1, r4
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <process_commands+0x964>)
 8001f46:	f7fe f957 	bl	80001f8 <__adddf3>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	4621      	mov	r1, r4
 8001f52:	f7fe fda1 	bl	8000a98 <__aeabi_d2iz>
 8001f56:	4603      	mov	r3, r0
 8001f58:	e020      	b.n	8001f9c <process_commands+0x8cc>
 8001f5a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f5c:	f7fe fa98 	bl	8000490 <__aeabi_i2d>
 8001f60:	a32f      	add	r3, pc, #188	; (adr r3, 8002020 <process_commands+0x950>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	f7fe fc27 	bl	80007b8 <__aeabi_ddiv>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	4618      	mov	r0, r3
 8001f70:	4621      	mov	r1, r4
 8001f72:	a32d      	add	r3, pc, #180	; (adr r3, 8002028 <process_commands+0x958>)
 8001f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f78:	f7fe f93e 	bl	80001f8 <__adddf3>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	460c      	mov	r4, r1
 8001f80:	4618      	mov	r0, r3
 8001f82:	4621      	mov	r1, r4
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <process_commands+0x964>)
 8001f8a:	f7fe f933 	bl	80001f4 <__aeabi_dsub>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	460c      	mov	r4, r1
 8001f92:	4618      	mov	r0, r3
 8001f94:	4621      	mov	r1, r4
 8001f96:	f7fe fd7f 	bl	8000a98 <__aeabi_d2iz>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fef1 	bl	8002d84 <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	4824      	ldr	r0, [pc, #144]	; (8002038 <process_commands+0x968>)
 8001fa8:	f001 f9a2 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2102      	movs	r1, #2
 8001fb0:	4821      	ldr	r0, [pc, #132]	; (8002038 <process_commands+0x968>)
 8001fb2:	f001 f99d 	bl	80032f0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2101      	movs	r1, #1
 8001fba:	4820      	ldr	r0, [pc, #128]	; (800203c <process_commands+0x96c>)
 8001fbc:	f001 f998 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	481d      	ldr	r0, [pc, #116]	; (800203c <process_commands+0x96c>)
 8001fc6:	f001 f993 	bl	80032f0 <HAL_GPIO_WritePin>
 8001fca:	e37c      	b.n	80026c6 <process_commands+0xff6>
		}
		else if(strcmp(command,COMMAND_LEFT) == 0){
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	; (8002040 <process_commands+0x970>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4920      	ldr	r1, [pc, #128]	; (8002054 <process_commands+0x984>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe f900 	bl	80001d8 <strcmp>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 80da 	bne.w	8002194 <process_commands+0xac4>
			parameter = strtok(NULL, delimeter);
 8001fe0:	4919      	ldr	r1, [pc, #100]	; (8002048 <process_commands+0x978>)
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f004 f8ce 	bl	8006184 <strtok>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <process_commands+0x97c>)
 8001fec:	601a      	str	r2, [r3, #0]

			int param;
			if(isdigit(parameter[0])){
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <process_commands+0x97c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	3b30      	subs	r3, #48	; 0x30
 8001ff6:	2b09      	cmp	r3, #9
 8001ff8:	d82e      	bhi.n	8002058 <process_commands+0x988>
				param = atoi(parameter);
 8001ffa:	4b14      	ldr	r3, [pc, #80]	; (800204c <process_commands+0x97c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 f882 	bl	8006108 <atoi>
 8002004:	6478      	str	r0, [r7, #68]	; 0x44
 8002006:	e030      	b.n	800206a <process_commands+0x99a>
 8002008:	9374bc6a 	.word	0x9374bc6a
 800200c:	3f960418 	.word	0x3f960418
 8002010:	05e51c4f 	.word	0x05e51c4f
 8002014:	4067417d 	.word	0x4067417d
 8002018:	05e51c4f 	.word	0x05e51c4f
 800201c:	4057417d 	.word	0x4057417d
 8002020:	62771890 	.word	0x62771890
 8002024:	3fa9c45a 	.word	0x3fa9c45a
 8002028:	574a69b1 	.word	0x574a69b1
 800202c:	40275555 	.word	0x40275555
 8002030:	40590000 	.word	0x40590000
 8002034:	3fe00000 	.word	0x3fe00000
 8002038:	40020000 	.word	0x40020000
 800203c:	40020800 	.word	0x40020800
 8002040:	2000028c 	.word	0x2000028c
 8002044:	080064b8 	.word	0x080064b8
 8002048:	2000580c 	.word	0x2000580c
 800204c:	2000021c 	.word	0x2000021c
 8002050:	200002e8 	.word	0x200002e8
 8002054:	080064bc 	.word	0x080064bc
			}
			else{
				variable *v2 = find_variable(parameter);
 8002058:	4bbb      	ldr	r3, [pc, #748]	; (8002348 <process_commands+0xc78>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fba3 	bl	80027a8 <find_variable>
 8002062:	61f8      	str	r0, [r7, #28]
				param = v2->value;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	647b      	str	r3, [r7, #68]	; 0x44
			}

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 800206a:	4bb8      	ldr	r3, [pc, #736]	; (800234c <process_commands+0xc7c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2264      	movs	r2, #100	; 0x64
 8002070:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8002072:	4bb6      	ldr	r3, [pc, #728]	; (800234c <process_commands+0xc7c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2264      	movs	r2, #100	; 0x64
 8002078:	639a      	str	r2, [r3, #56]	; 0x38

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2101      	movs	r1, #1
 800207e:	48b4      	ldr	r0, [pc, #720]	; (8002350 <process_commands+0xc80>)
 8002080:	f001 f936 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8002084:	2201      	movs	r2, #1
 8002086:	2102      	movs	r1, #2
 8002088:	48b1      	ldr	r0, [pc, #708]	; (8002350 <process_commands+0xc80>)
 800208a:	f001 f931 	bl	80032f0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 800208e:	2201      	movs	r2, #1
 8002090:	2101      	movs	r1, #1
 8002092:	48b0      	ldr	r0, [pc, #704]	; (8002354 <process_commands+0xc84>)
 8002094:	f001 f92c 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	2102      	movs	r1, #2
 800209c:	48ad      	ldr	r0, [pc, #692]	; (8002354 <process_commands+0xc84>)
 800209e:	f001 f927 	bl	80032f0 <HAL_GPIO_WritePin>

			HAL_Delay(ROUND_TO_INT(DEGREE_TO_MS(param)));
 80020a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80020a4:	f7fe f9f4 	bl	8000490 <__aeabi_i2d>
 80020a8:	a3a3      	add	r3, pc, #652	; (adr r3, 8002338 <process_commands+0xc68>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe fb83 	bl	80007b8 <__aeabi_ddiv>
 80020b2:	4603      	mov	r3, r0
 80020b4:	460c      	mov	r4, r1
 80020b6:	4618      	mov	r0, r3
 80020b8:	4621      	mov	r1, r4
 80020ba:	a3a1      	add	r3, pc, #644	; (adr r3, 8002340 <process_commands+0xc70>)
 80020bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c0:	f7fe f89a 	bl	80001f8 <__adddf3>
 80020c4:	4603      	mov	r3, r0
 80020c6:	460c      	mov	r4, r1
 80020c8:	4618      	mov	r0, r3
 80020ca:	4621      	mov	r1, r4
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	f7fe fccc 	bl	8000a70 <__aeabi_dcmpge>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d021      	beq.n	8002122 <process_commands+0xa52>
 80020de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80020e0:	f7fe f9d6 	bl	8000490 <__aeabi_i2d>
 80020e4:	a394      	add	r3, pc, #592	; (adr r3, 8002338 <process_commands+0xc68>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe fb65 	bl	80007b8 <__aeabi_ddiv>
 80020ee:	4603      	mov	r3, r0
 80020f0:	460c      	mov	r4, r1
 80020f2:	4618      	mov	r0, r3
 80020f4:	4621      	mov	r1, r4
 80020f6:	a392      	add	r3, pc, #584	; (adr r3, 8002340 <process_commands+0xc70>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe f87c 	bl	80001f8 <__adddf3>
 8002100:	4603      	mov	r3, r0
 8002102:	460c      	mov	r4, r1
 8002104:	4618      	mov	r0, r3
 8002106:	4621      	mov	r1, r4
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	4b92      	ldr	r3, [pc, #584]	; (8002358 <process_commands+0xc88>)
 800210e:	f7fe f873 	bl	80001f8 <__adddf3>
 8002112:	4603      	mov	r3, r0
 8002114:	460c      	mov	r4, r1
 8002116:	4618      	mov	r0, r3
 8002118:	4621      	mov	r1, r4
 800211a:	f7fe fcbd 	bl	8000a98 <__aeabi_d2iz>
 800211e:	4603      	mov	r3, r0
 8002120:	e020      	b.n	8002164 <process_commands+0xa94>
 8002122:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002124:	f7fe f9b4 	bl	8000490 <__aeabi_i2d>
 8002128:	a383      	add	r3, pc, #524	; (adr r3, 8002338 <process_commands+0xc68>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe fb43 	bl	80007b8 <__aeabi_ddiv>
 8002132:	4603      	mov	r3, r0
 8002134:	460c      	mov	r4, r1
 8002136:	4618      	mov	r0, r3
 8002138:	4621      	mov	r1, r4
 800213a:	a381      	add	r3, pc, #516	; (adr r3, 8002340 <process_commands+0xc70>)
 800213c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002140:	f7fe f85a 	bl	80001f8 <__adddf3>
 8002144:	4603      	mov	r3, r0
 8002146:	460c      	mov	r4, r1
 8002148:	4618      	mov	r0, r3
 800214a:	4621      	mov	r1, r4
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b81      	ldr	r3, [pc, #516]	; (8002358 <process_commands+0xc88>)
 8002152:	f7fe f84f 	bl	80001f4 <__aeabi_dsub>
 8002156:	4603      	mov	r3, r0
 8002158:	460c      	mov	r4, r1
 800215a:	4618      	mov	r0, r3
 800215c:	4621      	mov	r1, r4
 800215e:	f7fe fc9b 	bl	8000a98 <__aeabi_d2iz>
 8002162:	4603      	mov	r3, r0
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fe0d 	bl	8002d84 <HAL_Delay>
			//HAL_Delay(param);

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	2101      	movs	r1, #1
 800216e:	4878      	ldr	r0, [pc, #480]	; (8002350 <process_commands+0xc80>)
 8002170:	f001 f8be 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8002174:	2200      	movs	r2, #0
 8002176:	2102      	movs	r1, #2
 8002178:	4875      	ldr	r0, [pc, #468]	; (8002350 <process_commands+0xc80>)
 800217a:	f001 f8b9 	bl	80032f0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	2101      	movs	r1, #1
 8002182:	4874      	ldr	r0, [pc, #464]	; (8002354 <process_commands+0xc84>)
 8002184:	f001 f8b4 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002188:	2200      	movs	r2, #0
 800218a:	2102      	movs	r1, #2
 800218c:	4871      	ldr	r0, [pc, #452]	; (8002354 <process_commands+0xc84>)
 800218e:	f001 f8af 	bl	80032f0 <HAL_GPIO_WritePin>
 8002192:	e298      	b.n	80026c6 <process_commands+0xff6>
		}
		else if(strcmp(command,COMMAND_STOP) == 0){
 8002194:	4b71      	ldr	r3, [pc, #452]	; (800235c <process_commands+0xc8c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4971      	ldr	r1, [pc, #452]	; (8002360 <process_commands+0xc90>)
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f81c 	bl	80001d8 <strcmp>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d114      	bne.n	80021d0 <process_commands+0xb00>

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2101      	movs	r1, #1
 80021aa:	4869      	ldr	r0, [pc, #420]	; (8002350 <process_commands+0xc80>)
 80021ac:	f001 f8a0 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2102      	movs	r1, #2
 80021b4:	4866      	ldr	r0, [pc, #408]	; (8002350 <process_commands+0xc80>)
 80021b6:	f001 f89b 	bl	80032f0 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2101      	movs	r1, #1
 80021be:	4865      	ldr	r0, [pc, #404]	; (8002354 <process_commands+0xc84>)
 80021c0:	f001 f896 	bl	80032f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2102      	movs	r1, #2
 80021c8:	4862      	ldr	r0, [pc, #392]	; (8002354 <process_commands+0xc84>)
 80021ca:	f001 f891 	bl	80032f0 <HAL_GPIO_WritePin>
 80021ce:	e27a      	b.n	80026c6 <process_commands+0xff6>
		}
		else if(strcmp(command,COMMAND_DELAY) == 0){
 80021d0:	4b62      	ldr	r3, [pc, #392]	; (800235c <process_commands+0xc8c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4963      	ldr	r1, [pc, #396]	; (8002364 <process_commands+0xc94>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fd fffe 	bl	80001d8 <strcmp>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d121      	bne.n	8002226 <process_commands+0xb56>
			parameter = strtok(NULL, delimeter);
 80021e2:	4961      	ldr	r1, [pc, #388]	; (8002368 <process_commands+0xc98>)
 80021e4:	2000      	movs	r0, #0
 80021e6:	f003 ffcd 	bl	8006184 <strtok>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b56      	ldr	r3, [pc, #344]	; (8002348 <process_commands+0xc78>)
 80021ee:	601a      	str	r2, [r3, #0]
			int param;
			if(isdigit(parameter[0])){
 80021f0:	4b55      	ldr	r3, [pc, #340]	; (8002348 <process_commands+0xc78>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	3b30      	subs	r3, #48	; 0x30
 80021f8:	2b09      	cmp	r3, #9
 80021fa:	d806      	bhi.n	800220a <process_commands+0xb3a>
				param = atoi(parameter);
 80021fc:	4b52      	ldr	r3, [pc, #328]	; (8002348 <process_commands+0xc78>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f003 ff81 	bl	8006108 <atoi>
 8002206:	6438      	str	r0, [r7, #64]	; 0x40
 8002208:	e008      	b.n	800221c <process_commands+0xb4c>
			}
			else{
				variable *v2 = find_variable(parameter);
 800220a:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <process_commands+0xc78>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 faca 	bl	80027a8 <find_variable>
 8002214:	6238      	str	r0, [r7, #32]
				param = v2->value;
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	643b      	str	r3, [r7, #64]	; 0x40
			}

			HAL_Delay(param);
 800221c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fdb0 	bl	8002d84 <HAL_Delay>
 8002224:	e24f      	b.n	80026c6 <process_commands+0xff6>
		}
		else if(strcmp(command,COMMAND_ASGN) == 0){
 8002226:	4b4d      	ldr	r3, [pc, #308]	; (800235c <process_commands+0xc8c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4950      	ldr	r1, [pc, #320]	; (800236c <process_commands+0xc9c>)
 800222c:	4618      	mov	r0, r3
 800222e:	f7fd ffd3 	bl	80001d8 <strcmp>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	f040 81b7 	bne.w	80025a8 <process_commands+0xed8>

			parameter = strtok(NULL, delimeter);
 800223a:	494b      	ldr	r1, [pc, #300]	; (8002368 <process_commands+0xc98>)
 800223c:	2000      	movs	r0, #0
 800223e:	f003 ffa1 	bl	8006184 <strtok>
 8002242:	4602      	mov	r2, r0
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <process_commands+0xc78>)
 8002246:	601a      	str	r2, [r3, #0]
			variable *v = find_variable(parameter);
 8002248:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <process_commands+0xc78>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 faab 	bl	80027a8 <find_variable>
 8002252:	62f8      	str	r0, [r7, #44]	; 0x2c

			int num1,num2;
			parameter = strtok(NULL, delimeter);
 8002254:	4944      	ldr	r1, [pc, #272]	; (8002368 <process_commands+0xc98>)
 8002256:	2000      	movs	r0, #0
 8002258:	f003 ff94 	bl	8006184 <strtok>
 800225c:	4602      	mov	r2, r0
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <process_commands+0xc78>)
 8002260:	601a      	str	r2, [r3, #0]


			if(isdigit(parameter[0])){
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <process_commands+0xc78>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	3b30      	subs	r3, #48	; 0x30
 800226a:	2b09      	cmp	r3, #9
 800226c:	d808      	bhi.n	8002280 <process_commands+0xbb0>
				v->value = atoi(parameter);
 800226e:	4b36      	ldr	r3, [pc, #216]	; (8002348 <process_commands+0xc78>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f003 ff48 	bl	8006108 <atoi>
 8002278:	4602      	mov	r2, r0
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	e222      	b.n	80026c6 <process_commands+0xff6>

			}
			else{

				if(strcmp(parameter,COMMAND_PLUS) == 0){
 8002280:	4b31      	ldr	r3, [pc, #196]	; (8002348 <process_commands+0xc78>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	493a      	ldr	r1, [pc, #232]	; (8002370 <process_commands+0xca0>)
 8002286:	4618      	mov	r0, r3
 8002288:	f7fd ffa6 	bl	80001d8 <strcmp>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10c      	bne.n	80022ac <process_commands+0xbdc>

					find_parameters(parameter, &num1, &num2);
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <process_commands+0xc78>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	463a      	mov	r2, r7
 8002298:	1d39      	adds	r1, r7, #4
 800229a:	4618      	mov	r0, r3
 800229c:	f000 fa46 	bl	800272c <find_parameters>
					v->value = num1 + num2;
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	441a      	add	r2, r3
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	e20c      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_MINUS) == 0){
 80022ac:	4b26      	ldr	r3, [pc, #152]	; (8002348 <process_commands+0xc78>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4930      	ldr	r1, [pc, #192]	; (8002374 <process_commands+0xca4>)
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fd ff90 	bl	80001d8 <strcmp>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10c      	bne.n	80022d8 <process_commands+0xc08>

					find_parameters(parameter, &num1, &num2);
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <process_commands+0xc78>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	463a      	mov	r2, r7
 80022c4:	1d39      	adds	r1, r7, #4
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fa30 	bl	800272c <find_parameters>
					v->value = num1 - num2;
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	1ad2      	subs	r2, r2, r3
 80022d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	e1f6      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_MULT) == 0){
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <process_commands+0xc78>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4926      	ldr	r1, [pc, #152]	; (8002378 <process_commands+0xca8>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fd ff7a 	bl	80001d8 <strcmp>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <process_commands+0xc36>

					find_parameters(parameter, &num1, &num2);
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <process_commands+0xc78>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	463a      	mov	r2, r7
 80022f0:	1d39      	adds	r1, r7, #4
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fa1a 	bl	800272c <find_parameters>
					v->value = num1 * num2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	fb02 f203 	mul.w	r2, r2, r3
 8002300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	e1df      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_DIV) == 0){
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <process_commands+0xc78>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	491c      	ldr	r1, [pc, #112]	; (800237c <process_commands+0xcac>)
 800230c:	4618      	mov	r0, r3
 800230e:	f7fd ff63 	bl	80001d8 <strcmp>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d133      	bne.n	8002380 <process_commands+0xcb0>

					find_parameters(parameter, &num1, &num2);
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <process_commands+0xc78>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	463a      	mov	r2, r7
 800231e:	1d39      	adds	r1, r7, #4
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fa03 	bl	800272c <find_parameters>
					v->value = num1 / num2;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	fb92 f2f3 	sdiv	r2, r2, r3
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	e1c8      	b.n	80026c6 <process_commands+0xff6>
 8002334:	f3af 8000 	nop.w
 8002338:	62771890 	.word	0x62771890
 800233c:	3fa9c45a 	.word	0x3fa9c45a
 8002340:	574a69b1 	.word	0x574a69b1
 8002344:	40275555 	.word	0x40275555
 8002348:	2000021c 	.word	0x2000021c
 800234c:	200002e8 	.word	0x200002e8
 8002350:	40020000 	.word	0x40020000
 8002354:	40020800 	.word	0x40020800
 8002358:	3fe00000 	.word	0x3fe00000
 800235c:	2000028c 	.word	0x2000028c
 8002360:	080064c0 	.word	0x080064c0
 8002364:	080064c4 	.word	0x080064c4
 8002368:	2000580c 	.word	0x2000580c
 800236c:	080064cc 	.word	0x080064cc
 8002370:	080064d0 	.word	0x080064d0
 8002374:	080064d4 	.word	0x080064d4
 8002378:	080064d8 	.word	0x080064d8
 800237c:	080064dc 	.word	0x080064dc
				}
				else if(strcmp(parameter,COMMAND_EQ) == 0){
 8002380:	4ba0      	ldr	r3, [pc, #640]	; (8002604 <process_commands+0xf34>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	49a0      	ldr	r1, [pc, #640]	; (8002608 <process_commands+0xf38>)
 8002386:	4618      	mov	r0, r3
 8002388:	f7fd ff26 	bl	80001d8 <strcmp>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d111      	bne.n	80023b6 <process_commands+0xce6>

					find_parameters(parameter, &num1, &num2);
 8002392:	4b9c      	ldr	r3, [pc, #624]	; (8002604 <process_commands+0xf34>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	463a      	mov	r2, r7
 8002398:	1d39      	adds	r1, r7, #4
 800239a:	4618      	mov	r0, r3
 800239c:	f000 f9c6 	bl	800272c <find_parameters>
					v->value = num1 == num2;
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	e187      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_NE) == 0){
 80023b6:	4b93      	ldr	r3, [pc, #588]	; (8002604 <process_commands+0xf34>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4994      	ldr	r1, [pc, #592]	; (800260c <process_commands+0xf3c>)
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fd ff0b 	bl	80001d8 <strcmp>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d111      	bne.n	80023ec <process_commands+0xd1c>

					find_parameters(parameter, &num1, &num2);
 80023c8:	4b8e      	ldr	r3, [pc, #568]	; (8002604 <process_commands+0xf34>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	463a      	mov	r2, r7
 80023ce:	1d39      	adds	r1, r7, #4
 80023d0:	4618      	mov	r0, r3
 80023d2:	f000 f9ab 	bl	800272c <find_parameters>
					v->value = num1 != num2;
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	461a      	mov	r2, r3
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	e16c      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_LE) == 0){
 80023ec:	4b85      	ldr	r3, [pc, #532]	; (8002604 <process_commands+0xf34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4987      	ldr	r1, [pc, #540]	; (8002610 <process_commands+0xf40>)
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fd fef0 	bl	80001d8 <strcmp>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d111      	bne.n	8002422 <process_commands+0xd52>

					find_parameters(parameter, &num1, &num2);
 80023fe:	4b81      	ldr	r3, [pc, #516]	; (8002604 <process_commands+0xf34>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	463a      	mov	r2, r7
 8002404:	1d39      	adds	r1, r7, #4
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f990 	bl	800272c <find_parameters>
					v->value = num1 <= num2;
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	bfd4      	ite	le
 8002414:	2301      	movle	r3, #1
 8002416:	2300      	movgt	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	e151      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_GE) == 0){
 8002422:	4b78      	ldr	r3, [pc, #480]	; (8002604 <process_commands+0xf34>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	497b      	ldr	r1, [pc, #492]	; (8002614 <process_commands+0xf44>)
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd fed5 	bl	80001d8 <strcmp>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d111      	bne.n	8002458 <process_commands+0xd88>

					find_parameters(parameter, &num1, &num2);
 8002434:	4b73      	ldr	r3, [pc, #460]	; (8002604 <process_commands+0xf34>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	463a      	mov	r2, r7
 800243a:	1d39      	adds	r1, r7, #4
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f975 	bl	800272c <find_parameters>
					v->value = num1 >= num2;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	bfac      	ite	ge
 800244a:	2301      	movge	r3, #1
 800244c:	2300      	movlt	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	e136      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_GT) == 0){
 8002458:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <process_commands+0xf34>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	496e      	ldr	r1, [pc, #440]	; (8002618 <process_commands+0xf48>)
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd feba 	bl	80001d8 <strcmp>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d111      	bne.n	800248e <process_commands+0xdbe>

					find_parameters(parameter, &num1, &num2);
 800246a:	4b66      	ldr	r3, [pc, #408]	; (8002604 <process_commands+0xf34>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	463a      	mov	r2, r7
 8002470:	1d39      	adds	r1, r7, #4
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f95a 	bl	800272c <find_parameters>
					v->value = num1 > num2;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	bfcc      	ite	gt
 8002480:	2301      	movgt	r3, #1
 8002482:	2300      	movle	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	60da      	str	r2, [r3, #12]
 800248c:	e11b      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_LT) == 0){
 800248e:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <process_commands+0xf34>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4962      	ldr	r1, [pc, #392]	; (800261c <process_commands+0xf4c>)
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd fe9f 	bl	80001d8 <strcmp>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d111      	bne.n	80024c4 <process_commands+0xdf4>

					find_parameters(parameter, &num1, &num2);
 80024a0:	4b58      	ldr	r3, [pc, #352]	; (8002604 <process_commands+0xf34>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	463a      	mov	r2, r7
 80024a6:	1d39      	adds	r1, r7, #4
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f93f 	bl	800272c <find_parameters>
					v->value = num1 < num2;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	bfb4      	ite	lt
 80024b6:	2301      	movlt	r3, #1
 80024b8:	2300      	movge	r3, #0
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	461a      	mov	r2, r3
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	e100      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_LOR) == 0){
 80024c4:	4b4f      	ldr	r3, [pc, #316]	; (8002604 <process_commands+0xf34>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4955      	ldr	r1, [pc, #340]	; (8002620 <process_commands+0xf50>)
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fd fe84 	bl	80001d8 <strcmp>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d112      	bne.n	80024fc <process_commands+0xe2c>

					find_parameters(parameter, &num1, &num2);
 80024d6:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <process_commands+0xf34>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	463a      	mov	r2, r7
 80024dc:	1d39      	adds	r1, r7, #4
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 f924 	bl	800272c <find_parameters>
					v->value = num1 || num2;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <process_commands+0xe20>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <process_commands+0xe24>
 80024f0:	2201      	movs	r2, #1
 80024f2:	e000      	b.n	80024f6 <process_commands+0xe26>
 80024f4:	2200      	movs	r2, #0
 80024f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	e0e4      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_LAND) == 0){
 80024fc:	4b41      	ldr	r3, [pc, #260]	; (8002604 <process_commands+0xf34>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4948      	ldr	r1, [pc, #288]	; (8002624 <process_commands+0xf54>)
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd fe68 	bl	80001d8 <strcmp>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d112      	bne.n	8002534 <process_commands+0xe64>

					find_parameters(parameter, &num1, &num2);
 800250e:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <process_commands+0xf34>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	463a      	mov	r2, r7
 8002514:	1d39      	adds	r1, r7, #4
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f908 	bl	800272c <find_parameters>
					v->value = num1 && num2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <process_commands+0xe5c>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <process_commands+0xe5c>
 8002528:	2201      	movs	r2, #1
 800252a:	e000      	b.n	800252e <process_commands+0xe5e>
 800252c:	2200      	movs	r2, #0
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	e0c8      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_MOD) == 0){
 8002534:	4b33      	ldr	r3, [pc, #204]	; (8002604 <process_commands+0xf34>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	493b      	ldr	r1, [pc, #236]	; (8002628 <process_commands+0xf58>)
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd fe4c 	bl	80001d8 <strcmp>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d110      	bne.n	8002568 <process_commands+0xe98>

					find_parameters(parameter, &num1, &num2);
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <process_commands+0xf34>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	463a      	mov	r2, r7
 800254c:	1d39      	adds	r1, r7, #4
 800254e:	4618      	mov	r0, r3
 8002550:	f000 f8ec 	bl	800272c <find_parameters>
					v->value = num1 % num2;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	fb93 f1f2 	sdiv	r1, r3, r2
 800255c:	fb02 f201 	mul.w	r2, r2, r1
 8002560:	1a9a      	subs	r2, r3, r2
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	e0ae      	b.n	80026c6 <process_commands+0xff6>
				}
				else if(strcmp(parameter,COMMAND_METER) == 0){
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <process_commands+0xf34>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	492f      	ldr	r1, [pc, #188]	; (800262c <process_commands+0xf5c>)
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd fe32 	bl	80001d8 <strcmp>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10b      	bne.n	8002592 <process_commands+0xec2>
					HCSR04_Read();
 800257a:	f7fe fca1 	bl	8000ec0 <HCSR04_Read>
					HAL_Delay(10);
 800257e:	200a      	movs	r0, #10
 8002580:	f000 fc00 	bl	8002d84 <HAL_Delay>

					int dis = Distance;
 8002584:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <process_commands+0xf60>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
					v->value = dis;
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	e099      	b.n	80026c6 <process_commands+0xff6>
				}
				else{
					variable *v2 = find_variable(parameter);
 8002592:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <process_commands+0xf34>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 f906 	bl	80027a8 <find_variable>
 800259c:	62b8      	str	r0, [r7, #40]	; 0x28
					v->value = v2->value;
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	e08e      	b.n	80026c6 <process_commands+0xff6>
				}
			}

		}
		else if(strcmp(command,COMMAND_IF) == 0){
 80025a8:	4b22      	ldr	r3, [pc, #136]	; (8002634 <process_commands+0xf64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4922      	ldr	r1, [pc, #136]	; (8002638 <process_commands+0xf68>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fd fe12 	bl	80001d8 <strcmp>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d152      	bne.n	8002660 <process_commands+0xf90>
			parameter = strtok(NULL, delimeter);
 80025ba:	4920      	ldr	r1, [pc, #128]	; (800263c <process_commands+0xf6c>)
 80025bc:	2000      	movs	r0, #0
 80025be:	f003 fde1 	bl	8006184 <strtok>
 80025c2:	4602      	mov	r2, r0
 80025c4:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <process_commands+0xf34>)
 80025c6:	601a      	str	r2, [r3, #0]
			if(strcmp(parameter,"not") == 0){
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <process_commands+0xf34>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	491c      	ldr	r1, [pc, #112]	; (8002640 <process_commands+0xf70>)
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd fe02 	bl	80001d8 <strcmp>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d134      	bne.n	8002644 <process_commands+0xf74>
				parameter = strtok(NULL, delimeter);
 80025da:	4918      	ldr	r1, [pc, #96]	; (800263c <process_commands+0xf6c>)
 80025dc:	2000      	movs	r0, #0
 80025de:	f003 fdd1 	bl	8006184 <strtok>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b07      	ldr	r3, [pc, #28]	; (8002604 <process_commands+0xf34>)
 80025e6:	601a      	str	r2, [r3, #0]
				variable *v2 = find_variable(parameter);
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <process_commands+0xf34>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 f8db 	bl	80027a8 <find_variable>
 80025f2:	6338      	str	r0, [r7, #48]	; 0x30
				if(v2->value != 0)
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d064      	beq.n	80026c6 <process_commands+0xff6>
					i++;
 80025fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025fe:	3301      	adds	r3, #1
 8002600:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002602:	e060      	b.n	80026c6 <process_commands+0xff6>
 8002604:	2000021c 	.word	0x2000021c
 8002608:	080064e0 	.word	0x080064e0
 800260c:	080064e4 	.word	0x080064e4
 8002610:	080064e8 	.word	0x080064e8
 8002614:	080064ec 	.word	0x080064ec
 8002618:	080064f0 	.word	0x080064f0
 800261c:	080064f4 	.word	0x080064f4
 8002620:	080064f8 	.word	0x080064f8
 8002624:	080064fc 	.word	0x080064fc
 8002628:	08006500 	.word	0x08006500
 800262c:	08006504 	.word	0x08006504
 8002630:	20000208 	.word	0x20000208
 8002634:	2000028c 	.word	0x2000028c
 8002638:	08006508 	.word	0x08006508
 800263c:	2000580c 	.word	0x2000580c
 8002640:	0800650c 	.word	0x0800650c
			}
			else{
				variable *v2 = find_variable(parameter);
 8002644:	4b30      	ldr	r3, [pc, #192]	; (8002708 <process_commands+0x1038>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f8ad 	bl	80027a8 <find_variable>
 800264e:	6378      	str	r0, [r7, #52]	; 0x34
				if(v2->value == 0)
 8002650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d136      	bne.n	80026c6 <process_commands+0xff6>
					i++;
 8002658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800265a:	3301      	adds	r3, #1
 800265c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800265e:	e032      	b.n	80026c6 <process_commands+0xff6>
			}

		}
		// jump to given labels index
		else if(strcmp(command,COMMAND_GOTO) == 0){
 8002660:	4b2a      	ldr	r3, [pc, #168]	; (800270c <process_commands+0x103c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	492a      	ldr	r1, [pc, #168]	; (8002710 <process_commands+0x1040>)
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd fdb6 	bl	80001d8 <strcmp>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d129      	bne.n	80026c6 <process_commands+0xff6>
			parameter = strtok(NULL, delimeter);
 8002672:	4928      	ldr	r1, [pc, #160]	; (8002714 <process_commands+0x1044>)
 8002674:	2000      	movs	r0, #0
 8002676:	f003 fd85 	bl	8006184 <strtok>
 800267a:	4602      	mov	r2, r0
 800267c:	4b22      	ldr	r3, [pc, #136]	; (8002708 <process_commands+0x1038>)
 800267e:	601a      	str	r2, [r3, #0]
			char *temp;
			for(int j=0;j<command_count;++j){
 8002680:	2300      	movs	r3, #0
 8002682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002684:	e01a      	b.n	80026bc <process_commands+0xfec>
				temp = strtok(commands[j],":");
 8002686:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002688:	4613      	mov	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4a21      	ldr	r2, [pc, #132]	; (8002718 <process_commands+0x1048>)
 8002692:	4413      	add	r3, r2
 8002694:	4921      	ldr	r1, [pc, #132]	; (800271c <process_commands+0x104c>)
 8002696:	4618      	mov	r0, r3
 8002698:	f003 fd74 	bl	8006184 <strtok>
 800269c:	63b8      	str	r0, [r7, #56]	; 0x38
				if(strcmp(temp,parameter) == 0){
 800269e:	4b1a      	ldr	r3, [pc, #104]	; (8002708 <process_commands+0x1038>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4619      	mov	r1, r3
 80026a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80026a6:	f7fd fd97 	bl	80001d8 <strcmp>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <process_commands+0xfe6>
					i = j;
 80026b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b2:	65fb      	str	r3, [r7, #92]	; 0x5c

					break;
 80026b4:	e007      	b.n	80026c6 <process_commands+0xff6>
			for(int j=0;j<command_count;++j){
 80026b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b8:	3301      	adds	r3, #1
 80026ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026bc:	4b18      	ldr	r3, [pc, #96]	; (8002720 <process_commands+0x1050>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026c2:	429a      	cmp	r2, r3
 80026c4:	dbdf      	blt.n	8002686 <process_commands+0xfb6>
	for(int i=0;i<command_count;++i){
 80026c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026c8:	3301      	adds	r3, #1
 80026ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <process_commands+0x1050>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026d2:	429a      	cmp	r2, r3
 80026d4:	f6ff a807 	blt.w	80016e6 <process_commands+0x16>
			}
		}
	}

	// stop motors
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	2101      	movs	r1, #1
 80026dc:	4811      	ldr	r0, [pc, #68]	; (8002724 <process_commands+0x1054>)
 80026de:	f000 fe07 	bl	80032f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2102      	movs	r1, #2
 80026e6:	480f      	ldr	r0, [pc, #60]	; (8002724 <process_commands+0x1054>)
 80026e8:	f000 fe02 	bl	80032f0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2101      	movs	r1, #1
 80026f0:	480d      	ldr	r0, [pc, #52]	; (8002728 <process_commands+0x1058>)
 80026f2:	f000 fdfd 	bl	80032f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2102      	movs	r1, #2
 80026fa:	480b      	ldr	r0, [pc, #44]	; (8002728 <process_commands+0x1058>)
 80026fc:	f000 fdf8 	bl	80032f0 <HAL_GPIO_WritePin>
}
 8002700:	bf00      	nop
 8002702:	3764      	adds	r7, #100	; 0x64
 8002704:	46bd      	mov	sp, r7
 8002706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002708:	2000021c 	.word	0x2000021c
 800270c:	2000028c 	.word	0x2000028c
 8002710:	08006510 	.word	0x08006510
 8002714:	2000580c 	.word	0x2000580c
 8002718:	200009e8 	.word	0x200009e8
 800271c:	08006518 	.word	0x08006518
 8002720:	20005808 	.word	0x20005808
 8002724:	40020000 	.word	0x40020000
 8002728:	40020800 	.word	0x40020800

0800272c <find_parameters>:
// parse input and find 2 parameter
// if parameter is a variable name return its value
void find_parameters(char* parameter,int * num1,int* num2){
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
	parameter = strtok(NULL, delimeter);
 8002738:	491a      	ldr	r1, [pc, #104]	; (80027a4 <find_parameters+0x78>)
 800273a:	2000      	movs	r0, #0
 800273c:	f003 fd22 	bl	8006184 <strtok>
 8002740:	60f8      	str	r0, [r7, #12]
	if(isdigit(parameter[0])){
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	3b30      	subs	r3, #48	; 0x30
 8002748:	2b09      	cmp	r3, #9
 800274a:	d806      	bhi.n	800275a <find_parameters+0x2e>
		*num1 = atoi(parameter);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f003 fcdb 	bl	8006108 <atoi>
 8002752:	4602      	mov	r2, r0
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e007      	b.n	800276a <find_parameters+0x3e>
	}
	else{
		variable *v2 = find_variable(parameter);
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f824 	bl	80027a8 <find_variable>
 8002760:	6178      	str	r0, [r7, #20]
		*num1 = v2->value;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	601a      	str	r2, [r3, #0]
	}

	parameter = strtok(NULL, delimeter);
 800276a:	490e      	ldr	r1, [pc, #56]	; (80027a4 <find_parameters+0x78>)
 800276c:	2000      	movs	r0, #0
 800276e:	f003 fd09 	bl	8006184 <strtok>
 8002772:	60f8      	str	r0, [r7, #12]
	if(isdigit(parameter[0])){
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	3b30      	subs	r3, #48	; 0x30
 800277a:	2b09      	cmp	r3, #9
 800277c:	d806      	bhi.n	800278c <find_parameters+0x60>
		*num2 = atoi(parameter);
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f003 fcc2 	bl	8006108 <atoi>
 8002784:	4602      	mov	r2, r0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	601a      	str	r2, [r3, #0]
	}
	else{
		variable *v2 = find_variable(parameter);
		*num2 = v2->value;
	}
}
 800278a:	e007      	b.n	800279c <find_parameters+0x70>
		variable *v2 = find_variable(parameter);
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f80b 	bl	80027a8 <find_variable>
 8002792:	6138      	str	r0, [r7, #16]
		*num2 = v2->value;
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	601a      	str	r2, [r3, #0]
}
 800279c:	bf00      	nop
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	2000580c 	.word	0x2000580c

080027a8 <find_variable>:
// find variable according to given name
// if variable is not exist create it.
variable* find_variable(char* name){
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

	for(int i=0;i<variable_count;++i){
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e012      	b.n	80027dc <find_variable+0x34>
		if(strcmp(variables[i].id,name) == 0 )
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	4a17      	ldr	r2, [pc, #92]	; (8002818 <find_variable+0x70>)
 80027bc:	4413      	add	r3, r2
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fd fd09 	bl	80001d8 <strcmp>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d104      	bne.n	80027d6 <find_variable+0x2e>
			return &variables[i];
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	4a11      	ldr	r2, [pc, #68]	; (8002818 <find_variable+0x70>)
 80027d2:	4413      	add	r3, r2
 80027d4:	e01b      	b.n	800280e <find_variable+0x66>
	for(int i=0;i<variable_count;++i){
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <find_variable+0x74>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	dbe7      	blt.n	80027b6 <find_variable+0xe>
	}
	strcpy(variables[variable_count].id,name);
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <find_variable+0x74>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <find_variable+0x70>)
 80027ee:	4413      	add	r3, r2
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f003 fcbe 	bl	8006174 <strcpy>
	variable_count++;
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <find_variable+0x74>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3301      	adds	r3, #1
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <find_variable+0x74>)
 8002800:	6013      	str	r3, [r2, #0]
	return &variables[variable_count-1];
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <find_variable+0x74>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	3b01      	subs	r3, #1
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	4a03      	ldr	r2, [pc, #12]	; (8002818 <find_variable+0x70>)
 800280c:	4413      	add	r3, r2
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000328 	.word	0x20000328
 800281c:	20000288 	.word	0x20000288

08002820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_MspInit+0x4c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a0f      	ldr	r2, [pc, #60]	; (800286c <HAL_MspInit+0x4c>)
 8002830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b0d      	ldr	r3, [pc, #52]	; (800286c <HAL_MspInit+0x4c>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_MspInit+0x4c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a08      	ldr	r2, [pc, #32]	; (800286c <HAL_MspInit+0x4c>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_MspInit+0x4c>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	603b      	str	r3, [r7, #0]
 800285c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800285e:	2007      	movs	r0, #7
 8002860:	f000 fb82 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40023800 	.word	0x40023800

08002870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a19      	ldr	r2, [pc, #100]	; (80028f4 <HAL_I2C_MspInit+0x84>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d12b      	bne.n	80028ea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_I2C_MspInit+0x88>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a17      	ldr	r2, [pc, #92]	; (80028f8 <HAL_I2C_MspInit+0x88>)
 800289c:	f043 0302 	orr.w	r3, r3, #2
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_I2C_MspInit+0x88>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028ae:	23c0      	movs	r3, #192	; 0xc0
 80028b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028b2:	2312      	movs	r3, #18
 80028b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b6:	2301      	movs	r3, #1
 80028b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ba:	2303      	movs	r3, #3
 80028bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028be:	2304      	movs	r3, #4
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	480c      	ldr	r0, [pc, #48]	; (80028fc <HAL_I2C_MspInit+0x8c>)
 80028ca:	f000 fb8f 	bl	8002fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	4b09      	ldr	r3, [pc, #36]	; (80028f8 <HAL_I2C_MspInit+0x88>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a08      	ldr	r2, [pc, #32]	; (80028f8 <HAL_I2C_MspInit+0x88>)
 80028d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_I2C_MspInit+0x88>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	; 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40005400 	.word	0x40005400
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020400 	.word	0x40020400

08002900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0b      	ldr	r2, [pc, #44]	; (800293c <HAL_TIM_Base_MspInit+0x3c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d10d      	bne.n	800292e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_TIM_Base_MspInit+0x40>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <HAL_TIM_Base_MspInit+0x40>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <HAL_TIM_Base_MspInit+0x40>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000
 8002940:	40023800 	.word	0x40023800

08002944 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002964:	d134      	bne.n	80029d0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_TIM_IC_MspInit+0x94>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_TIM_IC_MspInit+0x94>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6413      	str	r3, [r2, #64]	; 0x40
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_TIM_IC_MspInit+0x94>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_TIM_IC_MspInit+0x94>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <HAL_TIM_IC_MspInit+0x94>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <HAL_TIM_IC_MspInit+0x94>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800299e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029b0:	2301      	movs	r3, #1
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	4808      	ldr	r0, [pc, #32]	; (80029dc <HAL_TIM_IC_MspInit+0x98>)
 80029bc:	f000 fb16 	bl	8002fec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	201c      	movs	r0, #28
 80029c6:	f000 fada 	bl	8002f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029ca:	201c      	movs	r0, #28
 80029cc:	f000 faf3 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029d0:	bf00      	nop
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020400 	.word	0x40020400

080029e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <HAL_TIM_MspPostInit+0x68>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d11e      	bne.n	8002a40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_TIM_MspPostInit+0x6c>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <HAL_TIM_MspPostInit+0x6c>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_TIM_MspPostInit+0x6c>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 030c 	add.w	r3, r7, #12
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4805      	ldr	r0, [pc, #20]	; (8002a50 <HAL_TIM_MspPostInit+0x70>)
 8002a3c:	f000 fad6 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a40:	bf00      	nop
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020000 	.word	0x40020000

08002a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08c      	sub	sp, #48	; 0x30
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a32      	ldr	r2, [pc, #200]	; (8002b3c <HAL_UART_MspInit+0xe8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d12d      	bne.n	8002ad2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	4b31      	ldr	r3, [pc, #196]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	4a30      	ldr	r2, [pc, #192]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002a80:	f043 0310 	orr.w	r3, r3, #16
 8002a84:	6453      	str	r3, [r2, #68]	; 0x44
 8002a86:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	4b2a      	ldr	r3, [pc, #168]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002aae:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8002ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002abc:	2303      	movs	r3, #3
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	f107 031c 	add.w	r3, r7, #28
 8002ac8:	4619      	mov	r1, r3
 8002aca:	481e      	ldr	r0, [pc, #120]	; (8002b44 <HAL_UART_MspInit+0xf0>)
 8002acc:	f000 fa8e 	bl	8002fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ad0:	e030      	b.n	8002b34 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1c      	ldr	r2, [pc, #112]	; (8002b48 <HAL_UART_MspInit+0xf4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d12b      	bne.n	8002b34 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a16      	ldr	r2, [pc, #88]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aea:	6413      	str	r3, [r2, #64]	; 0x40
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	4a0f      	ldr	r2, [pc, #60]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6313      	str	r3, [r2, #48]	; 0x30
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_UART_MspInit+0xec>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b14:	230c      	movs	r3, #12
 8002b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b20:	2303      	movs	r3, #3
 8002b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b24:	2307      	movs	r3, #7
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4805      	ldr	r0, [pc, #20]	; (8002b44 <HAL_UART_MspInit+0xf0>)
 8002b30:	f000 fa5c 	bl	8002fec <HAL_GPIO_Init>
}
 8002b34:	bf00      	nop
 8002b36:	3730      	adds	r7, #48	; 0x30
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40011000 	.word	0x40011000
 8002b40:	40023800 	.word	0x40023800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40004400 	.word	0x40004400

08002b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <NMI_Handler+0x4>

08002b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <HardFault_Handler+0x4>

08002b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <MemManage_Handler+0x4>

08002b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <BusFault_Handler+0x4>

08002b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <UsageFault_Handler+0x4>

08002b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b98:	f000 f8d4 	bl	8002d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <TIM2_IRQHandler+0x10>)
 8002ba6:	f001 fda9 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000968 	.word	0x20000968

08002bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bbc:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <_sbrk+0x5c>)
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <_sbrk+0x60>)
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <_sbrk+0x64>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <_sbrk+0x64>)
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <_sbrk+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d207      	bcs.n	8002bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be4:	f003 fa94 	bl	8006110 <__errno>
 8002be8:	4602      	mov	r2, r0
 8002bea:	230c      	movs	r3, #12
 8002bec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e009      	b.n	8002c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <_sbrk+0x64>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <_sbrk+0x64>)
 8002c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20020000 	.word	0x20020000
 8002c14:	00000400 	.word	0x00000400
 8002c18:	200001f8 	.word	0x200001f8
 8002c1c:	20005818 	.word	0x20005818

08002c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <SystemInit+0x28>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	4a07      	ldr	r2, [pc, #28]	; (8002c48 <SystemInit+0x28>)
 8002c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c34:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <SystemInit+0x28>)
 8002c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c3a:	609a      	str	r2, [r3, #8]
#endif
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c52:	e003      	b.n	8002c5c <LoopCopyDataInit>

08002c54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c5a:	3104      	adds	r1, #4

08002c5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c5c:	480b      	ldr	r0, [pc, #44]	; (8002c8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c64:	d3f6      	bcc.n	8002c54 <CopyDataInit>
  ldr  r2, =_sbss
 8002c66:	4a0b      	ldr	r2, [pc, #44]	; (8002c94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c68:	e002      	b.n	8002c70 <LoopFillZerobss>

08002c6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c6c:	f842 3b04 	str.w	r3, [r2], #4

08002c70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c74:	d3f9      	bcc.n	8002c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002c76:	f7ff ffd3 	bl	8002c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c7a:	f003 fa4f 	bl	800611c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7e:	f7fe fa23 	bl	80010c8 <main>
  bx  lr    
 8002c82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002c88:	08006650 	.word	0x08006650
  ldr  r0, =_sdata
 8002c8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c90:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002c94:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002c98:	20005818 	.word	0x20005818

08002c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c9c:	e7fe      	b.n	8002c9c <ADC_IRQHandler>
	...

08002ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_Init+0x40>)
 8002caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_Init+0x40>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <HAL_Init+0x40>)
 8002cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cbc:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_Init+0x40>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_Init+0x40>)
 8002cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc8:	2003      	movs	r0, #3
 8002cca:	f000 f94d 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f000 f808 	bl	8002ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd4:	f7ff fda4 	bl	8002820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40023c00 	.word	0x40023c00

08002ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cec:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_InitTick+0x54>)
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_InitTick+0x58>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 f965 	bl	8002fd2 <HAL_SYSTICK_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e00e      	b.n	8002d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b0f      	cmp	r3, #15
 8002d16:	d80a      	bhi.n	8002d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d20:	f000 f92d 	bl	8002f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d24:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <HAL_InitTick+0x5c>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e000      	b.n	8002d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	20000008 	.word	0x20000008
 8002d40:	20000004 	.word	0x20000004

08002d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_IncTick+0x20>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <HAL_IncTick+0x24>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_IncTick+0x24>)
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	20000008 	.word	0x20000008
 8002d68:	20005810 	.word	0x20005810

08002d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_GetTick+0x14>)
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20005810 	.word	0x20005810

08002d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d8c:	f7ff ffee 	bl	8002d6c <HAL_GetTick>
 8002d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d005      	beq.n	8002daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9e:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_Delay+0x40>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4413      	add	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002daa:	bf00      	nop
 8002dac:	f7ff ffde 	bl	8002d6c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d8f7      	bhi.n	8002dac <HAL_Delay+0x28>
  {
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000008 	.word	0x20000008

08002dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <__NVIC_GetPriorityGrouping+0x18>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	f003 0307 	and.w	r3, r3, #7
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	db0b      	blt.n	8002e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4907      	ldr	r1, [pc, #28]	; (8002e64 <__NVIC_EnableIRQ+0x38>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	e000e100 	.word	0xe000e100

08002e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	6039      	str	r1, [r7, #0]
 8002e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	db0a      	blt.n	8002e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	490c      	ldr	r1, [pc, #48]	; (8002eb4 <__NVIC_SetPriority+0x4c>)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	0112      	lsls	r2, r2, #4
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e90:	e00a      	b.n	8002ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4908      	ldr	r1, [pc, #32]	; (8002eb8 <__NVIC_SetPriority+0x50>)
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	3b04      	subs	r3, #4
 8002ea0:	0112      	lsls	r2, r2, #4
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	761a      	strb	r2, [r3, #24]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	e000e100 	.word	0xe000e100
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	; 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f1c3 0307 	rsb	r3, r3, #7
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	bf28      	it	cs
 8002eda:	2304      	movcs	r3, #4
 8002edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d902      	bls.n	8002eec <NVIC_EncodePriority+0x30>
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3b03      	subs	r3, #3
 8002eea:	e000      	b.n	8002eee <NVIC_EncodePriority+0x32>
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43da      	mvns	r2, r3
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	401a      	ands	r2, r3
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f04:	f04f 31ff 	mov.w	r1, #4294967295
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f14:	4313      	orrs	r3, r2
         );
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3724      	adds	r7, #36	; 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f34:	d301      	bcc.n	8002f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00f      	b.n	8002f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <SysTick_Config+0x40>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f42:	210f      	movs	r1, #15
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295
 8002f48:	f7ff ff8e 	bl	8002e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <SysTick_Config+0x40>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <SysTick_Config+0x40>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff29 	bl	8002dc8 <__NVIC_SetPriorityGrouping>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f90:	f7ff ff3e 	bl	8002e10 <__NVIC_GetPriorityGrouping>
 8002f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff ff8e 	bl	8002ebc <NVIC_EncodePriority>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff5d 	bl	8002e68 <__NVIC_SetPriority>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff31 	bl	8002e2c <__NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffa2 	bl	8002f24 <SysTick_Config>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
 8003006:	e159      	b.n	80032bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003008:	2201      	movs	r2, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4013      	ands	r3, r2
 800301a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	429a      	cmp	r2, r3
 8003022:	f040 8148 	bne.w	80032b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d00b      	beq.n	8003046 <HAL_GPIO_Init+0x5a>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d007      	beq.n	8003046 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800303a:	2b11      	cmp	r3, #17
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b12      	cmp	r3, #18
 8003044:	d130      	bne.n	80030a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800307c:	2201      	movs	r2, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	2203      	movs	r2, #3
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0xfc>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b12      	cmp	r3, #18
 80030e6:	d123      	bne.n	8003130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	08da      	lsrs	r2, r3, #3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3208      	adds	r2, #8
 80030f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	220f      	movs	r2, #15
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	08da      	lsrs	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3208      	adds	r2, #8
 800312a:	69b9      	ldr	r1, [r7, #24]
 800312c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0203 	and.w	r2, r3, #3
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a2 	beq.w	80032b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	4b56      	ldr	r3, [pc, #344]	; (80032d0 <HAL_GPIO_Init+0x2e4>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	4a55      	ldr	r2, [pc, #340]	; (80032d0 <HAL_GPIO_Init+0x2e4>)
 800317c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003180:	6453      	str	r3, [r2, #68]	; 0x44
 8003182:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_GPIO_Init+0x2e4>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800318e:	4a51      	ldr	r2, [pc, #324]	; (80032d4 <HAL_GPIO_Init+0x2e8>)
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	3302      	adds	r3, #2
 8003196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	220f      	movs	r2, #15
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a48      	ldr	r2, [pc, #288]	; (80032d8 <HAL_GPIO_Init+0x2ec>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d019      	beq.n	80031ee <HAL_GPIO_Init+0x202>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a47      	ldr	r2, [pc, #284]	; (80032dc <HAL_GPIO_Init+0x2f0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0x1fe>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a46      	ldr	r2, [pc, #280]	; (80032e0 <HAL_GPIO_Init+0x2f4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00d      	beq.n	80031e6 <HAL_GPIO_Init+0x1fa>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a45      	ldr	r2, [pc, #276]	; (80032e4 <HAL_GPIO_Init+0x2f8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <HAL_GPIO_Init+0x1f6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a44      	ldr	r2, [pc, #272]	; (80032e8 <HAL_GPIO_Init+0x2fc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_Init+0x1f2>
 80031da:	2304      	movs	r3, #4
 80031dc:	e008      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031de:	2307      	movs	r3, #7
 80031e0:	e006      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031e2:	2303      	movs	r3, #3
 80031e4:	e004      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e002      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_GPIO_Init+0x204>
 80031ee:	2300      	movs	r3, #0
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	f002 0203 	and.w	r2, r2, #3
 80031f6:	0092      	lsls	r2, r2, #2
 80031f8:	4093      	lsls	r3, r2
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003200:	4934      	ldr	r1, [pc, #208]	; (80032d4 <HAL_GPIO_Init+0x2e8>)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800320e:	4b37      	ldr	r3, [pc, #220]	; (80032ec <HAL_GPIO_Init+0x300>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	43db      	mvns	r3, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4013      	ands	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	4313      	orrs	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003232:	4a2e      	ldr	r2, [pc, #184]	; (80032ec <HAL_GPIO_Init+0x300>)
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003238:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <HAL_GPIO_Init+0x300>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d003      	beq.n	800325c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800325c:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_GPIO_Init+0x300>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003262:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_GPIO_Init+0x300>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003286:	4a19      	ldr	r2, [pc, #100]	; (80032ec <HAL_GPIO_Init+0x300>)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800328c:	4b17      	ldr	r3, [pc, #92]	; (80032ec <HAL_GPIO_Init+0x300>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	43db      	mvns	r3, r3
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	4013      	ands	r3, r2
 800329a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032b0:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <HAL_GPIO_Init+0x300>)
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3301      	adds	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b0f      	cmp	r3, #15
 80032c0:	f67f aea2 	bls.w	8003008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c4:	bf00      	nop
 80032c6:	3724      	adds	r7, #36	; 0x24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40020000 	.word	0x40020000
 80032dc:	40020400 	.word	0x40020400
 80032e0:	40020800 	.word	0x40020800
 80032e4:	40020c00 	.word	0x40020c00
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40013c00 	.word	0x40013c00

080032f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
 80032fc:	4613      	mov	r3, r2
 80032fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003300:	787b      	ldrb	r3, [r7, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800330c:	e003      	b.n	8003316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	041a      	lsls	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	619a      	str	r2, [r3, #24]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e11f      	b.n	8003576 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff fa90 	bl	8002870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	; 0x24
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0201 	bic.w	r2, r2, #1
 8003366:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003376:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003386:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003388:	f001 f846 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 800338c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4a7b      	ldr	r2, [pc, #492]	; (8003580 <HAL_I2C_Init+0x25c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d807      	bhi.n	80033a8 <HAL_I2C_Init+0x84>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a7a      	ldr	r2, [pc, #488]	; (8003584 <HAL_I2C_Init+0x260>)
 800339c:	4293      	cmp	r3, r2
 800339e:	bf94      	ite	ls
 80033a0:	2301      	movls	r3, #1
 80033a2:	2300      	movhi	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	e006      	b.n	80033b6 <HAL_I2C_Init+0x92>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a77      	ldr	r2, [pc, #476]	; (8003588 <HAL_I2C_Init+0x264>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	bf94      	ite	ls
 80033b0:	2301      	movls	r3, #1
 80033b2:	2300      	movhi	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0db      	b.n	8003576 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4a72      	ldr	r2, [pc, #456]	; (800358c <HAL_I2C_Init+0x268>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	0c9b      	lsrs	r3, r3, #18
 80033c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a64      	ldr	r2, [pc, #400]	; (8003580 <HAL_I2C_Init+0x25c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d802      	bhi.n	80033f8 <HAL_I2C_Init+0xd4>
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3301      	adds	r3, #1
 80033f6:	e009      	b.n	800340c <HAL_I2C_Init+0xe8>
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	4a63      	ldr	r2, [pc, #396]	; (8003590 <HAL_I2C_Init+0x26c>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	099b      	lsrs	r3, r3, #6
 800340a:	3301      	adds	r3, #1
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	430b      	orrs	r3, r1
 8003412:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800341e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4956      	ldr	r1, [pc, #344]	; (8003580 <HAL_I2C_Init+0x25c>)
 8003428:	428b      	cmp	r3, r1
 800342a:	d80d      	bhi.n	8003448 <HAL_I2C_Init+0x124>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1e59      	subs	r1, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fbb1 f3f3 	udiv	r3, r1, r3
 800343a:	3301      	adds	r3, #1
 800343c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003440:	2b04      	cmp	r3, #4
 8003442:	bf38      	it	cc
 8003444:	2304      	movcc	r3, #4
 8003446:	e04f      	b.n	80034e8 <HAL_I2C_Init+0x1c4>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d111      	bne.n	8003474 <HAL_I2C_Init+0x150>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	440b      	add	r3, r1
 800345e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	e012      	b.n	800349a <HAL_I2C_Init+0x176>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e58      	subs	r0, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	0099      	lsls	r1, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Init+0x17e>
 800349e:	2301      	movs	r3, #1
 80034a0:	e022      	b.n	80034e8 <HAL_I2C_Init+0x1c4>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10e      	bne.n	80034c8 <HAL_I2C_Init+0x1a4>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	1e58      	subs	r0, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	460b      	mov	r3, r1
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	440b      	add	r3, r1
 80034b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c6:	e00f      	b.n	80034e8 <HAL_I2C_Init+0x1c4>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	1e58      	subs	r0, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	0099      	lsls	r1, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	fbb0 f3f3 	udiv	r3, r0, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	6809      	ldr	r1, [r1, #0]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6911      	ldr	r1, [r2, #16]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68d2      	ldr	r2, [r2, #12]
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	430b      	orrs	r3, r1
 800352a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695a      	ldr	r2, [r3, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	000186a0 	.word	0x000186a0
 8003584:	001e847f 	.word	0x001e847f
 8003588:	003d08ff 	.word	0x003d08ff
 800358c:	431bde83 	.word	0x431bde83
 8003590:	10624dd3 	.word	0x10624dd3

08003594 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af02      	add	r7, sp, #8
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	461a      	mov	r2, r3
 80035a0:	460b      	mov	r3, r1
 80035a2:	817b      	strh	r3, [r7, #10]
 80035a4:	4613      	mov	r3, r2
 80035a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035a8:	f7ff fbe0 	bl	8002d6c <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	f040 80e0 	bne.w	800377c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2319      	movs	r3, #25
 80035c2:	2201      	movs	r2, #1
 80035c4:	4970      	ldr	r1, [pc, #448]	; (8003788 <HAL_I2C_Master_Transmit+0x1f4>)
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f964 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0d3      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_I2C_Master_Transmit+0x50>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e0cc      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d007      	beq.n	800360a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0201 	orr.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003618:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2221      	movs	r2, #33	; 0x21
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2210      	movs	r2, #16
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	893a      	ldrh	r2, [r7, #8]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a50      	ldr	r2, [pc, #320]	; (800378c <HAL_I2C_Master_Transmit+0x1f8>)
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800364c:	8979      	ldrh	r1, [r7, #10]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f89c 	bl	8003790 <I2C_MasterRequestWrite>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e08d      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003678:	e066      	b.n	8003748 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	6a39      	ldr	r1, [r7, #32]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f9de 	bl	8003a40 <I2C_WaitOnTXEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b04      	cmp	r3, #4
 8003690:	d107      	bne.n	80036a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e06b      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	781a      	ldrb	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d11b      	bne.n	800371c <HAL_I2C_Master_Transmit+0x188>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d017      	beq.n	800371c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	6a39      	ldr	r1, [r7, #32]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f9ce 	bl	8003ac2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00d      	beq.n	8003748 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	2b04      	cmp	r3, #4
 8003732:	d107      	bne.n	8003744 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003742:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e01a      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d194      	bne.n	800367a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	e000      	b.n	800377e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	00100002 	.word	0x00100002
 800378c:	ffff0000 	.word	0xffff0000

08003790 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	460b      	mov	r3, r1
 800379e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d006      	beq.n	80037ba <I2C_MasterRequestWrite+0x2a>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d003      	beq.n	80037ba <I2C_MasterRequestWrite+0x2a>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037b8:	d108      	bne.n	80037cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e00b      	b.n	80037e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	2b12      	cmp	r3, #18
 80037d2:	d107      	bne.n	80037e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f84f 	bl	8003894 <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380a:	d103      	bne.n	8003814 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e035      	b.n	8003884 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003820:	d108      	bne.n	8003834 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003830:	611a      	str	r2, [r3, #16]
 8003832:	e01b      	b.n	800386c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003834:	897b      	ldrh	r3, [r7, #10]
 8003836:	11db      	asrs	r3, r3, #7
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 0306 	and.w	r3, r3, #6
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f063 030f 	orn	r3, r3, #15
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	490e      	ldr	r1, [pc, #56]	; (800388c <I2C_MasterRequestWrite+0xfc>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f875 	bl	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e010      	b.n	8003884 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4907      	ldr	r1, [pc, #28]	; (8003890 <I2C_MasterRequestWrite+0x100>)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f865 	bl	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	00010008 	.word	0x00010008
 8003890:	00010002 	.word	0x00010002

08003894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038a4:	e025      	b.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d021      	beq.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ae:	f7ff fa5d 	bl	8002d6c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d302      	bcc.n	80038c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d116      	bne.n	80038f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f043 0220 	orr.w	r2, r3, #32
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e023      	b.n	800393a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	0c1b      	lsrs	r3, r3, #16
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d10d      	bne.n	8003918 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4013      	ands	r3, r2
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf0c      	ite	eq
 800390e:	2301      	moveq	r3, #1
 8003910:	2300      	movne	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	e00c      	b.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4013      	ands	r3, r2
 8003924:	b29b      	uxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	bf0c      	ite	eq
 800392a:	2301      	moveq	r3, #1
 800392c:	2300      	movne	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	429a      	cmp	r2, r3
 8003936:	d0b6      	beq.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	60f8      	str	r0, [r7, #12]
 800394a:	60b9      	str	r1, [r7, #8]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003950:	e051      	b.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d123      	bne.n	80039aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003970:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800397a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e046      	b.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d021      	beq.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b2:	f7ff f9db 	bl	8002d6c <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d302      	bcc.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d116      	bne.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e020      	b.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d10c      	bne.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	43da      	mvns	r2, r3
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bf14      	ite	ne
 8003a12:	2301      	movne	r3, #1
 8003a14:	2300      	moveq	r3, #0
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e00b      	b.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	43da      	mvns	r2, r3
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	4013      	ands	r3, r2
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d18d      	bne.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a4c:	e02d      	b.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f878 	bl	8003b44 <I2C_IsAcknowledgeFailed>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e02d      	b.n	8003aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a64:	d021      	beq.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a66:	f7ff f981 	bl	8002d6c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d302      	bcc.n	8003a7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d116      	bne.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e007      	b.n	8003aba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab4:	2b80      	cmp	r3, #128	; 0x80
 8003ab6:	d1ca      	bne.n	8003a4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ace:	e02d      	b.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f837 	bl	8003b44 <I2C_IsAcknowledgeFailed>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e02d      	b.n	8003b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae6:	d021      	beq.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae8:	f7ff f940 	bl	8002d6c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e007      	b.n	8003b3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d1ca      	bne.n	8003ad0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5a:	d11b      	bne.n	8003b94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f043 0204 	orr.w	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e25b      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d075      	beq.n	8003cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc2:	4ba3      	ldr	r3, [pc, #652]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d00c      	beq.n	8003be8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bce:	4ba0      	ldr	r3, [pc, #640]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d112      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bda:	4b9d      	ldr	r3, [pc, #628]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003be6:	d10b      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	4b99      	ldr	r3, [pc, #612]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d05b      	beq.n	8003cac <HAL_RCC_OscConfig+0x108>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d157      	bne.n	8003cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e236      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c08:	d106      	bne.n	8003c18 <HAL_RCC_OscConfig+0x74>
 8003c0a:	4b91      	ldr	r3, [pc, #580]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a90      	ldr	r2, [pc, #576]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e01d      	b.n	8003c54 <HAL_RCC_OscConfig+0xb0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x98>
 8003c22:	4b8b      	ldr	r3, [pc, #556]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a8a      	ldr	r2, [pc, #552]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b88      	ldr	r3, [pc, #544]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a87      	ldr	r2, [pc, #540]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCC_OscConfig+0xb0>
 8003c3c:	4b84      	ldr	r3, [pc, #528]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a83      	ldr	r2, [pc, #524]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	4b81      	ldr	r3, [pc, #516]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a80      	ldr	r2, [pc, #512]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7ff f886 	bl	8002d6c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c64:	f7ff f882 	bl	8002d6c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1fb      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b76      	ldr	r3, [pc, #472]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0xc0>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c84:	f7ff f872 	bl	8002d6c <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7ff f86e 	bl	8002d6c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	; 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e1e7      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9e:	4b6c      	ldr	r3, [pc, #432]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0xe8>
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d063      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc6:	4b62      	ldr	r3, [pc, #392]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d11c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b5f      	ldr	r3, [pc, #380]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d116      	bne.n	8003d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	4b5c      	ldr	r3, [pc, #368]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x152>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e1bb      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf6:	4b56      	ldr	r3, [pc, #344]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4952      	ldr	r1, [pc, #328]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	e03a      	b.n	8003d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d020      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d14:	4b4f      	ldr	r3, [pc, #316]	; (8003e54 <HAL_RCC_OscConfig+0x2b0>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1a:	f7ff f827 	bl	8002d6c <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d22:	f7ff f823 	bl	8002d6c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e19c      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	4b46      	ldr	r3, [pc, #280]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d40:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4940      	ldr	r1, [pc, #256]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]
 8003d54:	e015      	b.n	8003d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_OscConfig+0x2b0>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7ff f806 	bl	8002d6c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d64:	f7ff f802 	bl	8002d6c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e17b      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d030      	beq.n	8003df0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d96:	4b30      	ldr	r3, [pc, #192]	; (8003e58 <HAL_RCC_OscConfig+0x2b4>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fe ffe6 	bl	8002d6c <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da4:	f7fe ffe2 	bl	8002d6c <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e15b      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x200>
 8003dc2:	e015      	b.n	8003df0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc4:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <HAL_RCC_OscConfig+0x2b4>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dca:	f7fe ffcf 	bl	8002d6c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fe ffcb 	bl	8002d6c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e144      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1f0      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80a0 	beq.w	8003f3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e02:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a0e      	ldr	r2, [pc, #56]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_RCC_OscConfig+0x2ac>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_OscConfig+0x2b8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d121      	bne.n	8003e7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e3a:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <HAL_RCC_OscConfig+0x2b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a07      	ldr	r2, [pc, #28]	; (8003e5c <HAL_RCC_OscConfig+0x2b8>)
 8003e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e46:	f7fe ff91 	bl	8002d6c <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	e011      	b.n	8003e72 <HAL_RCC_OscConfig+0x2ce>
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	42470000 	.word	0x42470000
 8003e58:	42470e80 	.word	0x42470e80
 8003e5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fe ff84 	bl	8002d6c <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e0fd      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b81      	ldr	r3, [pc, #516]	; (8004078 <HAL_RCC_OscConfig+0x4d4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d106      	bne.n	8003e94 <HAL_RCC_OscConfig+0x2f0>
 8003e86:	4b7d      	ldr	r3, [pc, #500]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a7c      	ldr	r2, [pc, #496]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	e01c      	b.n	8003ece <HAL_RCC_OscConfig+0x32a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d10c      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x312>
 8003e9c:	4b77      	ldr	r3, [pc, #476]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a76      	ldr	r2, [pc, #472]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003ea2:	f043 0304 	orr.w	r3, r3, #4
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	4b74      	ldr	r3, [pc, #464]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a73      	ldr	r2, [pc, #460]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb4:	e00b      	b.n	8003ece <HAL_RCC_OscConfig+0x32a>
 8003eb6:	4b71      	ldr	r3, [pc, #452]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	4a70      	ldr	r2, [pc, #448]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec2:	4b6e      	ldr	r3, [pc, #440]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	4a6d      	ldr	r2, [pc, #436]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003ec8:	f023 0304 	bic.w	r3, r3, #4
 8003ecc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d015      	beq.n	8003f02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fe ff49 	bl	8002d6c <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ede:	f7fe ff45 	bl	8002d6c <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0bc      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef4:	4b61      	ldr	r3, [pc, #388]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ee      	beq.n	8003ede <HAL_RCC_OscConfig+0x33a>
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fe ff33 	bl	8002d6c <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fe ff2f 	bl	8002d6c <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0a6      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f20:	4b56      	ldr	r3, [pc, #344]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ee      	bne.n	8003f0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f32:	4b52      	ldr	r3, [pc, #328]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	4a51      	ldr	r2, [pc, #324]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003f38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 8092 	beq.w	800406c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f48:	4b4c      	ldr	r3, [pc, #304]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 030c 	and.w	r3, r3, #12
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d05c      	beq.n	800400e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d141      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5c:	4b48      	ldr	r3, [pc, #288]	; (8004080 <HAL_RCC_OscConfig+0x4dc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f62:	f7fe ff03 	bl	8002d6c <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6a:	f7fe feff 	bl	8002d6c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e078      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7c:	4b3f      	ldr	r3, [pc, #252]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f96:	019b      	lsls	r3, r3, #6
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	085b      	lsrs	r3, r3, #1
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	061b      	lsls	r3, r3, #24
 8003fac:	4933      	ldr	r1, [pc, #204]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb2:	4b33      	ldr	r3, [pc, #204]	; (8004080 <HAL_RCC_OscConfig+0x4dc>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fe fed8 	bl	8002d6c <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fe fed4 	bl	8002d6c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e04d      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd2:	4b2a      	ldr	r3, [pc, #168]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x41c>
 8003fde:	e045      	b.n	800406c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe0:	4b27      	ldr	r3, [pc, #156]	; (8004080 <HAL_RCC_OscConfig+0x4dc>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fe fec1 	bl	8002d6c <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fe febd 	bl	8002d6c <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e036      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x44a>
 800400c:	e02e      	b.n	800406c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e029      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_RCC_OscConfig+0x4d8>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	429a      	cmp	r2, r3
 800402c:	d11c      	bne.n	8004068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004038:	429a      	cmp	r2, r3
 800403a:	d115      	bne.n	8004068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004048:	4293      	cmp	r3, r2
 800404a:	d10d      	bne.n	8004068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d106      	bne.n	8004068 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40007000 	.word	0x40007000
 800407c:	40023800 	.word	0x40023800
 8004080:	42470060 	.word	0x42470060

08004084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0cc      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d90c      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b63      	ldr	r3, [pc, #396]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0b8      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d8:	4b59      	ldr	r3, [pc, #356]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a58      	ldr	r2, [pc, #352]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f0:	4b53      	ldr	r3, [pc, #332]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a52      	ldr	r2, [pc, #328]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b50      	ldr	r3, [pc, #320]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	494d      	ldr	r1, [pc, #308]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d044      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b47      	ldr	r3, [pc, #284]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d119      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d003      	beq.n	8004142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	2b03      	cmp	r3, #3
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e067      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b37      	ldr	r3, [pc, #220]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4934      	ldr	r1, [pc, #208]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004174:	f7fe fdfa 	bl	8002d6c <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fe fdf6 	bl	8002d6c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e04f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 030f 	and.w	r3, r3, #15
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d20c      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e032      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4916      	ldr	r1, [pc, #88]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	490e      	ldr	r1, [pc, #56]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800420a:	f000 f821 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 800420e:	4601      	mov	r1, r0
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	5cd3      	ldrb	r3, [r2, r3]
 800421e:	fa21 f303 	lsr.w	r3, r1, r3
 8004222:	4a09      	ldr	r2, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fd5a 	bl	8002ce4 <HAL_InitTick>

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00
 8004240:	40023800 	.word	0x40023800
 8004244:	0800651c 	.word	0x0800651c
 8004248:	20000000 	.word	0x20000000
 800424c:	20000004 	.word	0x20000004

08004250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
 800425e:	2300      	movs	r3, #0
 8004260:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004266:	4b63      	ldr	r3, [pc, #396]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b04      	cmp	r3, #4
 8004270:	d007      	beq.n	8004282 <HAL_RCC_GetSysClockFreq+0x32>
 8004272:	2b08      	cmp	r3, #8
 8004274:	d008      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x38>
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 80b4 	bne.w	80043e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b5e      	ldr	r3, [pc, #376]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800427e:	60bb      	str	r3, [r7, #8]
       break;
 8004280:	e0b3      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004282:	4b5e      	ldr	r3, [pc, #376]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004284:	60bb      	str	r3, [r7, #8]
      break;
 8004286:	e0b0      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004288:	4b5a      	ldr	r3, [pc, #360]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004290:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004292:	4b58      	ldr	r3, [pc, #352]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d04a      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429e:	4b55      	ldr	r3, [pc, #340]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	f04f 0400 	mov.w	r4, #0
 80042a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	ea03 0501 	and.w	r5, r3, r1
 80042b4:	ea04 0602 	and.w	r6, r4, r2
 80042b8:	4629      	mov	r1, r5
 80042ba:	4632      	mov	r2, r6
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	f04f 0400 	mov.w	r4, #0
 80042c4:	0154      	lsls	r4, r2, #5
 80042c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042ca:	014b      	lsls	r3, r1, #5
 80042cc:	4619      	mov	r1, r3
 80042ce:	4622      	mov	r2, r4
 80042d0:	1b49      	subs	r1, r1, r5
 80042d2:	eb62 0206 	sbc.w	r2, r2, r6
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	f04f 0400 	mov.w	r4, #0
 80042de:	0194      	lsls	r4, r2, #6
 80042e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042e4:	018b      	lsls	r3, r1, #6
 80042e6:	1a5b      	subs	r3, r3, r1
 80042e8:	eb64 0402 	sbc.w	r4, r4, r2
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	00e2      	lsls	r2, r4, #3
 80042f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042fa:	00d9      	lsls	r1, r3, #3
 80042fc:	460b      	mov	r3, r1
 80042fe:	4614      	mov	r4, r2
 8004300:	195b      	adds	r3, r3, r5
 8004302:	eb44 0406 	adc.w	r4, r4, r6
 8004306:	f04f 0100 	mov.w	r1, #0
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	0262      	lsls	r2, r4, #9
 8004310:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004314:	0259      	lsls	r1, r3, #9
 8004316:	460b      	mov	r3, r1
 8004318:	4614      	mov	r4, r2
 800431a:	4618      	mov	r0, r3
 800431c:	4621      	mov	r1, r4
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f04f 0400 	mov.w	r4, #0
 8004324:	461a      	mov	r2, r3
 8004326:	4623      	mov	r3, r4
 8004328:	f7fc fbfe 	bl	8000b28 <__aeabi_uldivmod>
 800432c:	4603      	mov	r3, r0
 800432e:	460c      	mov	r4, r1
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e049      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004334:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	f04f 0400 	mov.w	r4, #0
 800433e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	ea03 0501 	and.w	r5, r3, r1
 800434a:	ea04 0602 	and.w	r6, r4, r2
 800434e:	4629      	mov	r1, r5
 8004350:	4632      	mov	r2, r6
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	f04f 0400 	mov.w	r4, #0
 800435a:	0154      	lsls	r4, r2, #5
 800435c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004360:	014b      	lsls	r3, r1, #5
 8004362:	4619      	mov	r1, r3
 8004364:	4622      	mov	r2, r4
 8004366:	1b49      	subs	r1, r1, r5
 8004368:	eb62 0206 	sbc.w	r2, r2, r6
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	f04f 0400 	mov.w	r4, #0
 8004374:	0194      	lsls	r4, r2, #6
 8004376:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800437a:	018b      	lsls	r3, r1, #6
 800437c:	1a5b      	subs	r3, r3, r1
 800437e:	eb64 0402 	sbc.w	r4, r4, r2
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	00e2      	lsls	r2, r4, #3
 800438c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004390:	00d9      	lsls	r1, r3, #3
 8004392:	460b      	mov	r3, r1
 8004394:	4614      	mov	r4, r2
 8004396:	195b      	adds	r3, r3, r5
 8004398:	eb44 0406 	adc.w	r4, r4, r6
 800439c:	f04f 0100 	mov.w	r1, #0
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	02a2      	lsls	r2, r4, #10
 80043a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80043aa:	0299      	lsls	r1, r3, #10
 80043ac:	460b      	mov	r3, r1
 80043ae:	4614      	mov	r4, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	4621      	mov	r1, r4
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f04f 0400 	mov.w	r4, #0
 80043ba:	461a      	mov	r2, r3
 80043bc:	4623      	mov	r3, r4
 80043be:	f7fc fbb3 	bl	8000b28 <__aeabi_uldivmod>
 80043c2:	4603      	mov	r3, r0
 80043c4:	460c      	mov	r4, r1
 80043c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	0c1b      	lsrs	r3, r3, #16
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	3301      	adds	r3, #1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e0:	60bb      	str	r3, [r7, #8]
      break;
 80043e2:	e002      	b.n	80043ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043e6:	60bb      	str	r3, [r7, #8]
      break;
 80043e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ea:	68bb      	ldr	r3, [r7, #8]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	007a1200 	.word	0x007a1200

08004400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_RCC_GetHCLKFreq+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000000 	.word	0x20000000

08004418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800441c:	f7ff fff0 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004420:	4601      	mov	r1, r0
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0a9b      	lsrs	r3, r3, #10
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4a03      	ldr	r2, [pc, #12]	; (800443c <HAL_RCC_GetPCLK1Freq+0x24>)
 800442e:	5cd3      	ldrb	r3, [r2, r3]
 8004430:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40023800 	.word	0x40023800
 800443c:	0800652c 	.word	0x0800652c

08004440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004444:	f7ff ffdc 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004448:	4601      	mov	r1, r0
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	0b5b      	lsrs	r3, r3, #13
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4a03      	ldr	r2, [pc, #12]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004456:	5cd3      	ldrb	r3, [r2, r3]
 8004458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	0800652c 	.word	0x0800652c

08004468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01d      	b.n	80044b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d106      	bne.n	8004494 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7fe fa36 	bl	8002900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f000 fcb6 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2202      	movs	r2, #2
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b06      	cmp	r3, #6
 80044de:	d007      	beq.n	80044f0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e01d      	b.n	8004554 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f815 	bl	800455c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f000 fc67 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2201      	movs	r2, #1
 8004580:	6839      	ldr	r1, [r7, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f001 f80c 	bl	80055a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a10      	ldr	r2, [pc, #64]	; (80045d0 <HAL_TIM_PWM_Start+0x60>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d107      	bne.n	80045a2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d007      	beq.n	80045c4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000

080045d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e01d      	b.n	8004622 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fe f9a2 	bl	8002944 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3304      	adds	r3, #4
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f000 fc00 	bl	8004e18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d841      	bhi.n	80046c0 <HAL_TIM_IC_Start_IT+0x94>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <HAL_TIM_IC_Start_IT+0x18>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004679 	.word	0x08004679
 8004648:	080046c1 	.word	0x080046c1
 800464c:	080046c1 	.word	0x080046c1
 8004650:	080046c1 	.word	0x080046c1
 8004654:	0800468b 	.word	0x0800468b
 8004658:	080046c1 	.word	0x080046c1
 800465c:	080046c1 	.word	0x080046c1
 8004660:	080046c1 	.word	0x080046c1
 8004664:	0800469d 	.word	0x0800469d
 8004668:	080046c1 	.word	0x080046c1
 800466c:	080046c1 	.word	0x080046c1
 8004670:	080046c1 	.word	0x080046c1
 8004674:	080046af 	.word	0x080046af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0202 	orr.w	r2, r2, #2
 8004686:	60da      	str	r2, [r3, #12]
      break;
 8004688:	e01b      	b.n	80046c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0204 	orr.w	r2, r2, #4
 8004698:	60da      	str	r2, [r3, #12]
      break;
 800469a:	e012      	b.n	80046c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0208 	orr.w	r2, r2, #8
 80046aa:	60da      	str	r2, [r3, #12]
      break;
 80046ac:	e009      	b.n	80046c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0210 	orr.w	r2, r2, #16
 80046bc:	60da      	str	r2, [r3, #12]
      break;
 80046be:	e000      	b.n	80046c2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80046c0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	6839      	ldr	r1, [r7, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 ff68 	bl	80055a0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d007      	beq.n	80046f2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0201 	orr.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b02      	cmp	r3, #2
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0202 	mvn.w	r2, #2
 8004728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fbe2 	bl	8000f08 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fb48 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fb4f 	bl	8004df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b04      	cmp	r3, #4
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b04      	cmp	r3, #4
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0204 	mvn.w	r2, #4
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc fbb8 	bl	8000f08 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fb1e 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fb25 	bl	8004df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	d122      	bne.n	8004800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d11b      	bne.n	8004800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0208 	mvn.w	r2, #8
 80047d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2204      	movs	r2, #4
 80047d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fc fb8e 	bl	8000f08 <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 faf4 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fafb 	bl	8004df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b10      	cmp	r3, #16
 800480c:	d122      	bne.n	8004854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b10      	cmp	r3, #16
 800481a:	d11b      	bne.n	8004854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0210 	mvn.w	r2, #16
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2208      	movs	r2, #8
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7fc fb64 	bl	8000f08 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 faca 	bl	8004ddc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fad1 	bl	8004df0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10e      	bne.n	8004880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b01      	cmp	r3, #1
 800486e:	d107      	bne.n	8004880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0201 	mvn.w	r2, #1
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 faa4 	bl	8004dc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	2b80      	cmp	r3, #128	; 0x80
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b80      	cmp	r3, #128	; 0x80
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 ff6a 	bl	8005780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b40      	cmp	r3, #64	; 0x40
 80048b8:	d10e      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d107      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa96 	bl	8004e04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d10e      	bne.n	8004904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d107      	bne.n	8004904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0220 	mvn.w	r2, #32
 80048fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 ff34 	bl	800576c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004922:	2302      	movs	r3, #2
 8004924:	e08a      	b.n	8004a3c <HAL_TIM_IC_ConfigChannel+0x130>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f000 fc70 	bl	8005230 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 020c 	bic.w	r2, r2, #12
 800495e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6999      	ldr	r1, [r3, #24]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	619a      	str	r2, [r3, #24]
 8004972:	e05a      	b.n	8004a2a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b04      	cmp	r3, #4
 8004978:	d11c      	bne.n	80049b4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6819      	ldr	r1, [r3, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f000 fce8 	bl	800535e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800499c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6999      	ldr	r1, [r3, #24]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	021a      	lsls	r2, r3, #8
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	619a      	str	r2, [r3, #24]
 80049b2:	e03a      	b.n	8004a2a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d11b      	bne.n	80049f2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6819      	ldr	r1, [r3, #0]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f000 fd35 	bl	8005438 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69da      	ldr	r2, [r3, #28]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 020c 	bic.w	r2, r2, #12
 80049dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	69d9      	ldr	r1, [r3, #28]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	61da      	str	r2, [r3, #28]
 80049f0:	e01b      	b.n	8004a2a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f000 fd55 	bl	80054b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a14:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69d9      	ldr	r1, [r3, #28]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	021a      	lsls	r2, r3, #8
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e0b4      	b.n	8004bc8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b0c      	cmp	r3, #12
 8004a72:	f200 809f 	bhi.w	8004bb4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004ab1 	.word	0x08004ab1
 8004a80:	08004bb5 	.word	0x08004bb5
 8004a84:	08004bb5 	.word	0x08004bb5
 8004a88:	08004bb5 	.word	0x08004bb5
 8004a8c:	08004af1 	.word	0x08004af1
 8004a90:	08004bb5 	.word	0x08004bb5
 8004a94:	08004bb5 	.word	0x08004bb5
 8004a98:	08004bb5 	.word	0x08004bb5
 8004a9c:	08004b33 	.word	0x08004b33
 8004aa0:	08004bb5 	.word	0x08004bb5
 8004aa4:	08004bb5 	.word	0x08004bb5
 8004aa8:	08004bb5 	.word	0x08004bb5
 8004aac:	08004b73 	.word	0x08004b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fa2e 	bl	8004f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0208 	orr.w	r2, r2, #8
 8004aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0204 	bic.w	r2, r2, #4
 8004ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	619a      	str	r2, [r3, #24]
      break;
 8004aee:	e062      	b.n	8004bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fa74 	bl	8004fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6999      	ldr	r1, [r3, #24]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	619a      	str	r2, [r3, #24]
      break;
 8004b30:	e041      	b.n	8004bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fabf 	bl	80050bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0208 	orr.w	r2, r2, #8
 8004b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0204 	bic.w	r2, r2, #4
 8004b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69d9      	ldr	r1, [r3, #28]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	61da      	str	r2, [r3, #28]
      break;
 8004b70:	e021      	b.n	8004bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fb09 	bl	8005190 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69d9      	ldr	r1, [r3, #28]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	021a      	lsls	r2, r3, #8
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	61da      	str	r2, [r3, #28]
      break;
 8004bb2:	e000      	b.n	8004bb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004bb4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIM_ConfigClockSource+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e0a6      	b.n	8004d36 <HAL_TIM_ConfigClockSource+0x166>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d067      	beq.n	8004cf0 <HAL_TIM_ConfigClockSource+0x120>
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d80b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x6c>
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d073      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x140>
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d802      	bhi.n	8004c32 <HAL_TIM_ConfigClockSource+0x62>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d06f      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c30:	e078      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d06c      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x140>
 8004c36:	2b30      	cmp	r3, #48	; 0x30
 8004c38:	d06a      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c3a:	e073      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c3c:	2b70      	cmp	r3, #112	; 0x70
 8004c3e:	d00d      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0x8c>
 8004c40:	2b70      	cmp	r3, #112	; 0x70
 8004c42:	d804      	bhi.n	8004c4e <HAL_TIM_ConfigClockSource+0x7e>
 8004c44:	2b50      	cmp	r3, #80	; 0x50
 8004c46:	d033      	beq.n	8004cb0 <HAL_TIM_ConfigClockSource+0xe0>
 8004c48:	2b60      	cmp	r3, #96	; 0x60
 8004c4a:	d041      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c4c:	e06a      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d066      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x152>
 8004c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c58:	d017      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c5a:	e063      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6899      	ldr	r1, [r3, #8]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f000 fc78 	bl	8005560 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	609a      	str	r2, [r3, #8]
      break;
 8004c88:	e04c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6899      	ldr	r1, [r3, #8]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f000 fc61 	bl	8005560 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cac:	609a      	str	r2, [r3, #8]
      break;
 8004cae:	e039      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f000 fb1f 	bl	8005300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2150      	movs	r1, #80	; 0x50
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fc2e 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004cce:	e029      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	6859      	ldr	r1, [r3, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f000 fb7b 	bl	80053d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2160      	movs	r1, #96	; 0x60
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fc1e 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004cee:	e019      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f000 faff 	bl	8005300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2140      	movs	r1, #64	; 0x40
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fc0e 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004d0e:	e009      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 fc05 	bl	800552a <TIM_ITRx_SetConfig>
      break;
 8004d20:	e000      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b0c      	cmp	r3, #12
 8004d52:	d831      	bhi.n	8004db8 <HAL_TIM_ReadCapturedValue+0x78>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d91 	.word	0x08004d91
 8004d60:	08004db9 	.word	0x08004db9
 8004d64:	08004db9 	.word	0x08004db9
 8004d68:	08004db9 	.word	0x08004db9
 8004d6c:	08004d9b 	.word	0x08004d9b
 8004d70:	08004db9 	.word	0x08004db9
 8004d74:	08004db9 	.word	0x08004db9
 8004d78:	08004db9 	.word	0x08004db9
 8004d7c:	08004da5 	.word	0x08004da5
 8004d80:	08004db9 	.word	0x08004db9
 8004d84:	08004db9 	.word	0x08004db9
 8004d88:	08004db9 	.word	0x08004db9
 8004d8c:	08004daf 	.word	0x08004daf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d96:	60fb      	str	r3, [r7, #12]

      break;
 8004d98:	e00f      	b.n	8004dba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	60fb      	str	r3, [r7, #12]

      break;
 8004da2:	e00a      	b.n	8004dba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004daa:	60fb      	str	r3, [r7, #12]

      break;
 8004dac:	e005      	b.n	8004dba <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	60fb      	str	r3, [r7, #12]

      break;
 8004db6:	e000      	b.n	8004dba <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004db8:	bf00      	nop
  }

  return tmpreg;
 8004dba:	68fb      	ldr	r3, [r7, #12]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a34      	ldr	r2, [pc, #208]	; (8004efc <TIM_Base_SetConfig+0xe4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00f      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e36:	d00b      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a31      	ldr	r2, [pc, #196]	; (8004f00 <TIM_Base_SetConfig+0xe8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a30      	ldr	r2, [pc, #192]	; (8004f04 <TIM_Base_SetConfig+0xec>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d003      	beq.n	8004e50 <TIM_Base_SetConfig+0x38>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a2f      	ldr	r2, [pc, #188]	; (8004f08 <TIM_Base_SetConfig+0xf0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d108      	bne.n	8004e62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a25      	ldr	r2, [pc, #148]	; (8004efc <TIM_Base_SetConfig+0xe4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d01b      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e70:	d017      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <TIM_Base_SetConfig+0xe8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a21      	ldr	r2, [pc, #132]	; (8004f04 <TIM_Base_SetConfig+0xec>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00f      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a20      	ldr	r2, [pc, #128]	; (8004f08 <TIM_Base_SetConfig+0xf0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00b      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <TIM_Base_SetConfig+0xf4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d007      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <TIM_Base_SetConfig+0xf8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d003      	beq.n	8004ea2 <TIM_Base_SetConfig+0x8a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <TIM_Base_SetConfig+0xfc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d108      	bne.n	8004eb4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a08      	ldr	r2, [pc, #32]	; (8004efc <TIM_Base_SetConfig+0xe4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d103      	bne.n	8004ee8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	615a      	str	r2, [r3, #20]
}
 8004eee:	bf00      	nop
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	40010000 	.word	0x40010000
 8004f00:	40000400 	.word	0x40000400
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40000c00 	.word	0x40000c00
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800

08004f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 0302 	bic.w	r3, r3, #2
 8004f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	; (8004fe0 <TIM_OC1_SetConfig+0xc8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d10c      	bne.n	8004f8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 0308 	bic.w	r3, r3, #8
 8004f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f023 0304 	bic.w	r3, r3, #4
 8004f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <TIM_OC1_SetConfig+0xc8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d111      	bne.n	8004fba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40010000 	.word	0x40010000

08004fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0210 	bic.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0320 	bic.w	r3, r3, #32
 800502e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1e      	ldr	r2, [pc, #120]	; (80050b8 <TIM_OC2_SetConfig+0xd4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d10d      	bne.n	8005060 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	011b      	lsls	r3, r3, #4
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	4313      	orrs	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800505e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a15      	ldr	r2, [pc, #84]	; (80050b8 <TIM_OC2_SetConfig+0xd4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d113      	bne.n	8005090 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800506e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000

080050bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1d      	ldr	r2, [pc, #116]	; (800518c <TIM_OC3_SetConfig+0xd0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10d      	bne.n	8005136 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a14      	ldr	r2, [pc, #80]	; (800518c <TIM_OC3_SetConfig+0xd0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d113      	bne.n	8005166 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800514c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	621a      	str	r2, [r3, #32]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	40010000 	.word	0x40010000

08005190 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	031b      	lsls	r3, r3, #12
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a10      	ldr	r2, [pc, #64]	; (800522c <TIM_OC4_SetConfig+0x9c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d109      	bne.n	8005204 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	019b      	lsls	r3, r3, #6
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	621a      	str	r2, [r3, #32]
}
 800521e:	bf00      	nop
 8005220:	371c      	adds	r7, #28
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40010000 	.word	0x40010000

08005230 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	f023 0201 	bic.w	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4a24      	ldr	r2, [pc, #144]	; (80052ec <TIM_TI1_SetConfig+0xbc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d013      	beq.n	8005286 <TIM_TI1_SetConfig+0x56>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005264:	d00f      	beq.n	8005286 <TIM_TI1_SetConfig+0x56>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4a21      	ldr	r2, [pc, #132]	; (80052f0 <TIM_TI1_SetConfig+0xc0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00b      	beq.n	8005286 <TIM_TI1_SetConfig+0x56>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4a20      	ldr	r2, [pc, #128]	; (80052f4 <TIM_TI1_SetConfig+0xc4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <TIM_TI1_SetConfig+0x56>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <TIM_TI1_SetConfig+0xc8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_TI1_SetConfig+0x56>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <TIM_TI1_SetConfig+0xcc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d101      	bne.n	800528a <TIM_TI1_SetConfig+0x5a>
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <TIM_TI1_SetConfig+0x5c>
 800528a:	2300      	movs	r3, #0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
 80052a0:	e003      	b.n	80052aa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f043 0301 	orr.w	r3, r3, #1
 80052a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f023 030a 	bic.w	r3, r3, #10
 80052c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f003 030a 	and.w	r3, r3, #10
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40010000 	.word	0x40010000
 80052f0:	40000400 	.word	0x40000400
 80052f4:	40000800 	.word	0x40000800
 80052f8:	40000c00 	.word	0x40000c00
 80052fc:	40014000 	.word	0x40014000

08005300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f023 0201 	bic.w	r2, r3, #1
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800532a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f023 030a 	bic.w	r3, r3, #10
 800533c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800535e:	b480      	push	{r7}
 8005360:	b087      	sub	sp, #28
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f023 0210 	bic.w	r2, r3, #16
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	4313      	orrs	r3, r2
 8005394:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800539c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	031b      	lsls	r3, r3, #12
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4313      	orrs	r3, r2
 80053be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	621a      	str	r2, [r3, #32]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f023 0210 	bic.w	r2, r3, #16
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005402:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	031b      	lsls	r3, r3, #12
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	4313      	orrs	r3, r2
 800540c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005414:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	621a      	str	r2, [r3, #32]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f023 0303 	bic.w	r3, r3, #3
 8005464:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005474:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	b2db      	uxtb	r3, r3
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005488:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	621a      	str	r2, [r3, #32]
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	031b      	lsls	r3, r3, #12
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005502:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	031b      	lsls	r3, r3, #12
 8005508:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800552a:	b480      	push	{r7}
 800552c:	b085      	sub	sp, #20
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005540:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	f043 0307 	orr.w	r3, r3, #7
 800554c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	609a      	str	r2, [r3, #8]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800557a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	021a      	lsls	r2, r3, #8
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	431a      	orrs	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4313      	orrs	r3, r2
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	609a      	str	r2, [r3, #8]
}
 8005594:	bf00      	nop
 8005596:	371c      	adds	r7, #28
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	2201      	movs	r2, #1
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a1a      	ldr	r2, [r3, #32]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	43db      	mvns	r3, r3
 80055c2:	401a      	ands	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1a      	ldr	r2, [r3, #32]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 031f 	and.w	r3, r3, #31
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	431a      	orrs	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
	...

080055ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005600:	2302      	movs	r3, #2
 8005602:	e050      	b.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1c      	ldr	r2, [pc, #112]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d018      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005650:	d013      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00e      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a16      	ldr	r2, [pc, #88]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d009      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d004      	beq.n	800567a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a13      	ldr	r2, [pc, #76]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d10c      	bne.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4313      	orrs	r3, r2
 800568a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40014000 	.word	0x40014000

080056c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e03d      	b.n	8005760 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	4313      	orrs	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e03f      	b.n	8005826 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fd f94a 	bl	8002a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2224      	movs	r2, #36	; 0x24
 80057c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f919 	bl	8005a10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800580c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b088      	sub	sp, #32
 8005832:	af02      	add	r7, sp, #8
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b20      	cmp	r3, #32
 800584c:	f040 8090 	bne.w	8005970 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_UART_Receive+0x2e>
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e088      	b.n	8005972 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_UART_Receive+0x40>
 800586a:	2302      	movs	r3, #2
 800586c:	e081      	b.n	8005972 <HAL_UART_Receive+0x144>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2222      	movs	r2, #34	; 0x22
 8005880:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005884:	f7fd fa72 	bl	8002d6c <HAL_GetTick>
 8005888:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	88fa      	ldrh	r2, [r7, #6]
 800588e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	88fa      	ldrh	r2, [r7, #6]
 8005894:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800589e:	e05c      	b.n	800595a <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b6:	d12b      	bne.n	8005910 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	2120      	movs	r1, #32
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 f859 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e04f      	b.n	8005972 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10c      	bne.n	80058f8 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	3302      	adds	r3, #2
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	e030      	b.n	800595a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	b2db      	uxtb	r3, r3
 8005902:	b29a      	uxth	r2, r3
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	3301      	adds	r3, #1
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	e024      	b.n	800595a <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2200      	movs	r2, #0
 8005918:	2120      	movs	r1, #32
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f82d 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e023      	b.n	8005972 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d108      	bne.n	8005944 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	60ba      	str	r2, [r7, #8]
 800593e:	b2ca      	uxtb	r2, r1
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	e00a      	b.n	800595a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	b2da      	uxtb	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1c59      	adds	r1, r3, #1
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d19d      	bne.n	80058a0 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598a:	e02c      	b.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005992:	d028      	beq.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0x30>
 800599a:	f7fd f9e7 	bl	8002d6c <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d21d      	bcs.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	695a      	ldr	r2, [r3, #20]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2220      	movs	r2, #32
 80059d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e00f      	b.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	bf0c      	ite	eq
 80059f6:	2301      	moveq	r3, #1
 80059f8:	2300      	movne	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d0c3      	beq.n	800598c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005a52:	f023 030c 	bic.w	r3, r3, #12
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	68f9      	ldr	r1, [r7, #12]
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a7e:	f040 818b 	bne.w	8005d98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4ac1      	ldr	r2, [pc, #772]	; (8005d8c <UART_SetConfig+0x37c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d005      	beq.n	8005a98 <UART_SetConfig+0x88>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4abf      	ldr	r2, [pc, #764]	; (8005d90 <UART_SetConfig+0x380>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	f040 80bd 	bne.w	8005c12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a98:	f7fe fcd2 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8005a9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	461d      	mov	r5, r3
 8005aa2:	f04f 0600 	mov.w	r6, #0
 8005aa6:	46a8      	mov	r8, r5
 8005aa8:	46b1      	mov	r9, r6
 8005aaa:	eb18 0308 	adds.w	r3, r8, r8
 8005aae:	eb49 0409 	adc.w	r4, r9, r9
 8005ab2:	4698      	mov	r8, r3
 8005ab4:	46a1      	mov	r9, r4
 8005ab6:	eb18 0805 	adds.w	r8, r8, r5
 8005aba:	eb49 0906 	adc.w	r9, r9, r6
 8005abe:	f04f 0100 	mov.w	r1, #0
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005aca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ace:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ad2:	4688      	mov	r8, r1
 8005ad4:	4691      	mov	r9, r2
 8005ad6:	eb18 0005 	adds.w	r0, r8, r5
 8005ada:	eb49 0106 	adc.w	r1, r9, r6
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	461d      	mov	r5, r3
 8005ae4:	f04f 0600 	mov.w	r6, #0
 8005ae8:	196b      	adds	r3, r5, r5
 8005aea:	eb46 0406 	adc.w	r4, r6, r6
 8005aee:	461a      	mov	r2, r3
 8005af0:	4623      	mov	r3, r4
 8005af2:	f7fb f819 	bl	8000b28 <__aeabi_uldivmod>
 8005af6:	4603      	mov	r3, r0
 8005af8:	460c      	mov	r4, r1
 8005afa:	461a      	mov	r2, r3
 8005afc:	4ba5      	ldr	r3, [pc, #660]	; (8005d94 <UART_SetConfig+0x384>)
 8005afe:	fba3 2302 	umull	r2, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	461d      	mov	r5, r3
 8005b0c:	f04f 0600 	mov.w	r6, #0
 8005b10:	46a9      	mov	r9, r5
 8005b12:	46b2      	mov	sl, r6
 8005b14:	eb19 0309 	adds.w	r3, r9, r9
 8005b18:	eb4a 040a 	adc.w	r4, sl, sl
 8005b1c:	4699      	mov	r9, r3
 8005b1e:	46a2      	mov	sl, r4
 8005b20:	eb19 0905 	adds.w	r9, r9, r5
 8005b24:	eb4a 0a06 	adc.w	sl, sl, r6
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	f04f 0200 	mov.w	r2, #0
 8005b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b3c:	4689      	mov	r9, r1
 8005b3e:	4692      	mov	sl, r2
 8005b40:	eb19 0005 	adds.w	r0, r9, r5
 8005b44:	eb4a 0106 	adc.w	r1, sl, r6
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	461d      	mov	r5, r3
 8005b4e:	f04f 0600 	mov.w	r6, #0
 8005b52:	196b      	adds	r3, r5, r5
 8005b54:	eb46 0406 	adc.w	r4, r6, r6
 8005b58:	461a      	mov	r2, r3
 8005b5a:	4623      	mov	r3, r4
 8005b5c:	f7fa ffe4 	bl	8000b28 <__aeabi_uldivmod>
 8005b60:	4603      	mov	r3, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	461a      	mov	r2, r3
 8005b66:	4b8b      	ldr	r3, [pc, #556]	; (8005d94 <UART_SetConfig+0x384>)
 8005b68:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	2164      	movs	r1, #100	; 0x64
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	3332      	adds	r3, #50	; 0x32
 8005b7a:	4a86      	ldr	r2, [pc, #536]	; (8005d94 <UART_SetConfig+0x384>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b88:	4498      	add	r8, r3
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	461d      	mov	r5, r3
 8005b8e:	f04f 0600 	mov.w	r6, #0
 8005b92:	46a9      	mov	r9, r5
 8005b94:	46b2      	mov	sl, r6
 8005b96:	eb19 0309 	adds.w	r3, r9, r9
 8005b9a:	eb4a 040a 	adc.w	r4, sl, sl
 8005b9e:	4699      	mov	r9, r3
 8005ba0:	46a2      	mov	sl, r4
 8005ba2:	eb19 0905 	adds.w	r9, r9, r5
 8005ba6:	eb4a 0a06 	adc.w	sl, sl, r6
 8005baa:	f04f 0100 	mov.w	r1, #0
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bbe:	4689      	mov	r9, r1
 8005bc0:	4692      	mov	sl, r2
 8005bc2:	eb19 0005 	adds.w	r0, r9, r5
 8005bc6:	eb4a 0106 	adc.w	r1, sl, r6
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	461d      	mov	r5, r3
 8005bd0:	f04f 0600 	mov.w	r6, #0
 8005bd4:	196b      	adds	r3, r5, r5
 8005bd6:	eb46 0406 	adc.w	r4, r6, r6
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4623      	mov	r3, r4
 8005bde:	f7fa ffa3 	bl	8000b28 <__aeabi_uldivmod>
 8005be2:	4603      	mov	r3, r0
 8005be4:	460c      	mov	r4, r1
 8005be6:	461a      	mov	r2, r3
 8005be8:	4b6a      	ldr	r3, [pc, #424]	; (8005d94 <UART_SetConfig+0x384>)
 8005bea:	fba3 1302 	umull	r1, r3, r3, r2
 8005bee:	095b      	lsrs	r3, r3, #5
 8005bf0:	2164      	movs	r1, #100	; 0x64
 8005bf2:	fb01 f303 	mul.w	r3, r1, r3
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	3332      	adds	r3, #50	; 0x32
 8005bfc:	4a65      	ldr	r2, [pc, #404]	; (8005d94 <UART_SetConfig+0x384>)
 8005bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005c02:	095b      	lsrs	r3, r3, #5
 8005c04:	f003 0207 	and.w	r2, r3, #7
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4442      	add	r2, r8
 8005c0e:	609a      	str	r2, [r3, #8]
 8005c10:	e26f      	b.n	80060f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c12:	f7fe fc01 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 8005c16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	461d      	mov	r5, r3
 8005c1c:	f04f 0600 	mov.w	r6, #0
 8005c20:	46a8      	mov	r8, r5
 8005c22:	46b1      	mov	r9, r6
 8005c24:	eb18 0308 	adds.w	r3, r8, r8
 8005c28:	eb49 0409 	adc.w	r4, r9, r9
 8005c2c:	4698      	mov	r8, r3
 8005c2e:	46a1      	mov	r9, r4
 8005c30:	eb18 0805 	adds.w	r8, r8, r5
 8005c34:	eb49 0906 	adc.w	r9, r9, r6
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c4c:	4688      	mov	r8, r1
 8005c4e:	4691      	mov	r9, r2
 8005c50:	eb18 0005 	adds.w	r0, r8, r5
 8005c54:	eb49 0106 	adc.w	r1, r9, r6
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	461d      	mov	r5, r3
 8005c5e:	f04f 0600 	mov.w	r6, #0
 8005c62:	196b      	adds	r3, r5, r5
 8005c64:	eb46 0406 	adc.w	r4, r6, r6
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	f7fa ff5c 	bl	8000b28 <__aeabi_uldivmod>
 8005c70:	4603      	mov	r3, r0
 8005c72:	460c      	mov	r4, r1
 8005c74:	461a      	mov	r2, r3
 8005c76:	4b47      	ldr	r3, [pc, #284]	; (8005d94 <UART_SetConfig+0x384>)
 8005c78:	fba3 2302 	umull	r2, r3, r3, r2
 8005c7c:	095b      	lsrs	r3, r3, #5
 8005c7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	461d      	mov	r5, r3
 8005c86:	f04f 0600 	mov.w	r6, #0
 8005c8a:	46a9      	mov	r9, r5
 8005c8c:	46b2      	mov	sl, r6
 8005c8e:	eb19 0309 	adds.w	r3, r9, r9
 8005c92:	eb4a 040a 	adc.w	r4, sl, sl
 8005c96:	4699      	mov	r9, r3
 8005c98:	46a2      	mov	sl, r4
 8005c9a:	eb19 0905 	adds.w	r9, r9, r5
 8005c9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ca2:	f04f 0100 	mov.w	r1, #0
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	4692      	mov	sl, r2
 8005cba:	eb19 0005 	adds.w	r0, r9, r5
 8005cbe:	eb4a 0106 	adc.w	r1, sl, r6
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	f04f 0600 	mov.w	r6, #0
 8005ccc:	196b      	adds	r3, r5, r5
 8005cce:	eb46 0406 	adc.w	r4, r6, r6
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	4623      	mov	r3, r4
 8005cd6:	f7fa ff27 	bl	8000b28 <__aeabi_uldivmod>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	460c      	mov	r4, r1
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4b2c      	ldr	r3, [pc, #176]	; (8005d94 <UART_SetConfig+0x384>)
 8005ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2164      	movs	r1, #100	; 0x64
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	3332      	adds	r3, #50	; 0x32
 8005cf4:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <UART_SetConfig+0x384>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d02:	4498      	add	r8, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	461d      	mov	r5, r3
 8005d08:	f04f 0600 	mov.w	r6, #0
 8005d0c:	46a9      	mov	r9, r5
 8005d0e:	46b2      	mov	sl, r6
 8005d10:	eb19 0309 	adds.w	r3, r9, r9
 8005d14:	eb4a 040a 	adc.w	r4, sl, sl
 8005d18:	4699      	mov	r9, r3
 8005d1a:	46a2      	mov	sl, r4
 8005d1c:	eb19 0905 	adds.w	r9, r9, r5
 8005d20:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d24:	f04f 0100 	mov.w	r1, #0
 8005d28:	f04f 0200 	mov.w	r2, #0
 8005d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d38:	4689      	mov	r9, r1
 8005d3a:	4692      	mov	sl, r2
 8005d3c:	eb19 0005 	adds.w	r0, r9, r5
 8005d40:	eb4a 0106 	adc.w	r1, sl, r6
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	461d      	mov	r5, r3
 8005d4a:	f04f 0600 	mov.w	r6, #0
 8005d4e:	196b      	adds	r3, r5, r5
 8005d50:	eb46 0406 	adc.w	r4, r6, r6
 8005d54:	461a      	mov	r2, r3
 8005d56:	4623      	mov	r3, r4
 8005d58:	f7fa fee6 	bl	8000b28 <__aeabi_uldivmod>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	460c      	mov	r4, r1
 8005d60:	461a      	mov	r2, r3
 8005d62:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <UART_SetConfig+0x384>)
 8005d64:	fba3 1302 	umull	r1, r3, r3, r2
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	2164      	movs	r1, #100	; 0x64
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	3332      	adds	r3, #50	; 0x32
 8005d76:	4a07      	ldr	r2, [pc, #28]	; (8005d94 <UART_SetConfig+0x384>)
 8005d78:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7c:	095b      	lsrs	r3, r3, #5
 8005d7e:	f003 0207 	and.w	r2, r3, #7
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4442      	add	r2, r8
 8005d88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005d8a:	e1b2      	b.n	80060f2 <UART_SetConfig+0x6e2>
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40011400 	.word	0x40011400
 8005d94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4ad7      	ldr	r2, [pc, #860]	; (80060fc <UART_SetConfig+0x6ec>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d005      	beq.n	8005dae <UART_SetConfig+0x39e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4ad6      	ldr	r2, [pc, #856]	; (8006100 <UART_SetConfig+0x6f0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	f040 80d1 	bne.w	8005f50 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dae:	f7fe fb47 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8005db2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	469a      	mov	sl, r3
 8005db8:	f04f 0b00 	mov.w	fp, #0
 8005dbc:	46d0      	mov	r8, sl
 8005dbe:	46d9      	mov	r9, fp
 8005dc0:	eb18 0308 	adds.w	r3, r8, r8
 8005dc4:	eb49 0409 	adc.w	r4, r9, r9
 8005dc8:	4698      	mov	r8, r3
 8005dca:	46a1      	mov	r9, r4
 8005dcc:	eb18 080a 	adds.w	r8, r8, sl
 8005dd0:	eb49 090b 	adc.w	r9, r9, fp
 8005dd4:	f04f 0100 	mov.w	r1, #0
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005de0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005de4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005de8:	4688      	mov	r8, r1
 8005dea:	4691      	mov	r9, r2
 8005dec:	eb1a 0508 	adds.w	r5, sl, r8
 8005df0:	eb4b 0609 	adc.w	r6, fp, r9
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	f04f 0400 	mov.w	r4, #0
 8005e06:	0094      	lsls	r4, r2, #2
 8005e08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e0c:	008b      	lsls	r3, r1, #2
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4623      	mov	r3, r4
 8005e12:	4628      	mov	r0, r5
 8005e14:	4631      	mov	r1, r6
 8005e16:	f7fa fe87 	bl	8000b28 <__aeabi_uldivmod>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4bb8      	ldr	r3, [pc, #736]	; (8006104 <UART_SetConfig+0x6f4>)
 8005e22:	fba3 2302 	umull	r2, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	469b      	mov	fp, r3
 8005e30:	f04f 0c00 	mov.w	ip, #0
 8005e34:	46d9      	mov	r9, fp
 8005e36:	46e2      	mov	sl, ip
 8005e38:	eb19 0309 	adds.w	r3, r9, r9
 8005e3c:	eb4a 040a 	adc.w	r4, sl, sl
 8005e40:	4699      	mov	r9, r3
 8005e42:	46a2      	mov	sl, r4
 8005e44:	eb19 090b 	adds.w	r9, r9, fp
 8005e48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e4c:	f04f 0100 	mov.w	r1, #0
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e60:	4689      	mov	r9, r1
 8005e62:	4692      	mov	sl, r2
 8005e64:	eb1b 0509 	adds.w	r5, fp, r9
 8005e68:	eb4c 060a 	adc.w	r6, ip, sl
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4619      	mov	r1, r3
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	f04f 0400 	mov.w	r4, #0
 8005e7e:	0094      	lsls	r4, r2, #2
 8005e80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e84:	008b      	lsls	r3, r1, #2
 8005e86:	461a      	mov	r2, r3
 8005e88:	4623      	mov	r3, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	f7fa fe4b 	bl	8000b28 <__aeabi_uldivmod>
 8005e92:	4603      	mov	r3, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	461a      	mov	r2, r3
 8005e98:	4b9a      	ldr	r3, [pc, #616]	; (8006104 <UART_SetConfig+0x6f4>)
 8005e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	2164      	movs	r1, #100	; 0x64
 8005ea2:	fb01 f303 	mul.w	r3, r1, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	3332      	adds	r3, #50	; 0x32
 8005eac:	4a95      	ldr	r2, [pc, #596]	; (8006104 <UART_SetConfig+0x6f4>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb8:	4498      	add	r8, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	469b      	mov	fp, r3
 8005ebe:	f04f 0c00 	mov.w	ip, #0
 8005ec2:	46d9      	mov	r9, fp
 8005ec4:	46e2      	mov	sl, ip
 8005ec6:	eb19 0309 	adds.w	r3, r9, r9
 8005eca:	eb4a 040a 	adc.w	r4, sl, sl
 8005ece:	4699      	mov	r9, r3
 8005ed0:	46a2      	mov	sl, r4
 8005ed2:	eb19 090b 	adds.w	r9, r9, fp
 8005ed6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ee6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005eea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005eee:	4689      	mov	r9, r1
 8005ef0:	4692      	mov	sl, r2
 8005ef2:	eb1b 0509 	adds.w	r5, fp, r9
 8005ef6:	eb4c 060a 	adc.w	r6, ip, sl
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4619      	mov	r1, r3
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	f04f 0400 	mov.w	r4, #0
 8005f0c:	0094      	lsls	r4, r2, #2
 8005f0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f12:	008b      	lsls	r3, r1, #2
 8005f14:	461a      	mov	r2, r3
 8005f16:	4623      	mov	r3, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	f7fa fe04 	bl	8000b28 <__aeabi_uldivmod>
 8005f20:	4603      	mov	r3, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	461a      	mov	r2, r3
 8005f26:	4b77      	ldr	r3, [pc, #476]	; (8006104 <UART_SetConfig+0x6f4>)
 8005f28:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	2164      	movs	r1, #100	; 0x64
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	3332      	adds	r3, #50	; 0x32
 8005f3a:	4a72      	ldr	r2, [pc, #456]	; (8006104 <UART_SetConfig+0x6f4>)
 8005f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	f003 020f 	and.w	r2, r3, #15
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4442      	add	r2, r8
 8005f4c:	609a      	str	r2, [r3, #8]
 8005f4e:	e0d0      	b.n	80060f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f50:	f7fe fa62 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 8005f54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	469a      	mov	sl, r3
 8005f5a:	f04f 0b00 	mov.w	fp, #0
 8005f5e:	46d0      	mov	r8, sl
 8005f60:	46d9      	mov	r9, fp
 8005f62:	eb18 0308 	adds.w	r3, r8, r8
 8005f66:	eb49 0409 	adc.w	r4, r9, r9
 8005f6a:	4698      	mov	r8, r3
 8005f6c:	46a1      	mov	r9, r4
 8005f6e:	eb18 080a 	adds.w	r8, r8, sl
 8005f72:	eb49 090b 	adc.w	r9, r9, fp
 8005f76:	f04f 0100 	mov.w	r1, #0
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f82:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f86:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f8a:	4688      	mov	r8, r1
 8005f8c:	4691      	mov	r9, r2
 8005f8e:	eb1a 0508 	adds.w	r5, sl, r8
 8005f92:	eb4b 0609 	adc.w	r6, fp, r9
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	f04f 0400 	mov.w	r4, #0
 8005fa8:	0094      	lsls	r4, r2, #2
 8005faa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fae:	008b      	lsls	r3, r1, #2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4623      	mov	r3, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	f7fa fdb6 	bl	8000b28 <__aeabi_uldivmod>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4b50      	ldr	r3, [pc, #320]	; (8006104 <UART_SetConfig+0x6f4>)
 8005fc4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc8:	095b      	lsrs	r3, r3, #5
 8005fca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	469b      	mov	fp, r3
 8005fd2:	f04f 0c00 	mov.w	ip, #0
 8005fd6:	46d9      	mov	r9, fp
 8005fd8:	46e2      	mov	sl, ip
 8005fda:	eb19 0309 	adds.w	r3, r9, r9
 8005fde:	eb4a 040a 	adc.w	r4, sl, sl
 8005fe2:	4699      	mov	r9, r3
 8005fe4:	46a2      	mov	sl, r4
 8005fe6:	eb19 090b 	adds.w	r9, r9, fp
 8005fea:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005fee:	f04f 0100 	mov.w	r1, #0
 8005ff2:	f04f 0200 	mov.w	r2, #0
 8005ff6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ffa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ffe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006002:	4689      	mov	r9, r1
 8006004:	4692      	mov	sl, r2
 8006006:	eb1b 0509 	adds.w	r5, fp, r9
 800600a:	eb4c 060a 	adc.w	r6, ip, sl
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	4619      	mov	r1, r3
 8006014:	f04f 0200 	mov.w	r2, #0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	f04f 0400 	mov.w	r4, #0
 8006020:	0094      	lsls	r4, r2, #2
 8006022:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006026:	008b      	lsls	r3, r1, #2
 8006028:	461a      	mov	r2, r3
 800602a:	4623      	mov	r3, r4
 800602c:	4628      	mov	r0, r5
 800602e:	4631      	mov	r1, r6
 8006030:	f7fa fd7a 	bl	8000b28 <__aeabi_uldivmod>
 8006034:	4603      	mov	r3, r0
 8006036:	460c      	mov	r4, r1
 8006038:	461a      	mov	r2, r3
 800603a:	4b32      	ldr	r3, [pc, #200]	; (8006104 <UART_SetConfig+0x6f4>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	; 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	3332      	adds	r3, #50	; 0x32
 800604e:	4a2d      	ldr	r2, [pc, #180]	; (8006104 <UART_SetConfig+0x6f4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605a:	4498      	add	r8, r3
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	469b      	mov	fp, r3
 8006060:	f04f 0c00 	mov.w	ip, #0
 8006064:	46d9      	mov	r9, fp
 8006066:	46e2      	mov	sl, ip
 8006068:	eb19 0309 	adds.w	r3, r9, r9
 800606c:	eb4a 040a 	adc.w	r4, sl, sl
 8006070:	4699      	mov	r9, r3
 8006072:	46a2      	mov	sl, r4
 8006074:	eb19 090b 	adds.w	r9, r9, fp
 8006078:	eb4a 0a0c 	adc.w	sl, sl, ip
 800607c:	f04f 0100 	mov.w	r1, #0
 8006080:	f04f 0200 	mov.w	r2, #0
 8006084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006088:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800608c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006090:	4689      	mov	r9, r1
 8006092:	4692      	mov	sl, r2
 8006094:	eb1b 0509 	adds.w	r5, fp, r9
 8006098:	eb4c 060a 	adc.w	r6, ip, sl
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	4619      	mov	r1, r3
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	f04f 0400 	mov.w	r4, #0
 80060ae:	0094      	lsls	r4, r2, #2
 80060b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060b4:	008b      	lsls	r3, r1, #2
 80060b6:	461a      	mov	r2, r3
 80060b8:	4623      	mov	r3, r4
 80060ba:	4628      	mov	r0, r5
 80060bc:	4631      	mov	r1, r6
 80060be:	f7fa fd33 	bl	8000b28 <__aeabi_uldivmod>
 80060c2:	4603      	mov	r3, r0
 80060c4:	460c      	mov	r4, r1
 80060c6:	461a      	mov	r2, r3
 80060c8:	4b0e      	ldr	r3, [pc, #56]	; (8006104 <UART_SetConfig+0x6f4>)
 80060ca:	fba3 1302 	umull	r1, r3, r3, r2
 80060ce:	095b      	lsrs	r3, r3, #5
 80060d0:	2164      	movs	r1, #100	; 0x64
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	3332      	adds	r3, #50	; 0x32
 80060dc:	4a09      	ldr	r2, [pc, #36]	; (8006104 <UART_SetConfig+0x6f4>)
 80060de:	fba2 2303 	umull	r2, r3, r2, r3
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	f003 020f 	and.w	r2, r3, #15
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4442      	add	r2, r8
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	e7ff      	b.n	80060f2 <UART_SetConfig+0x6e2>
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	40011000 	.word	0x40011000
 8006100:	40011400 	.word	0x40011400
 8006104:	51eb851f 	.word	0x51eb851f

08006108 <atoi>:
 8006108:	220a      	movs	r2, #10
 800610a:	2100      	movs	r1, #0
 800610c:	f000 b90a 	b.w	8006324 <strtol>

08006110 <__errno>:
 8006110:	4b01      	ldr	r3, [pc, #4]	; (8006118 <__errno+0x8>)
 8006112:	6818      	ldr	r0, [r3, #0]
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	2000000c 	.word	0x2000000c

0800611c <__libc_init_array>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4e0d      	ldr	r6, [pc, #52]	; (8006154 <__libc_init_array+0x38>)
 8006120:	4c0d      	ldr	r4, [pc, #52]	; (8006158 <__libc_init_array+0x3c>)
 8006122:	1ba4      	subs	r4, r4, r6
 8006124:	10a4      	asrs	r4, r4, #2
 8006126:	2500      	movs	r5, #0
 8006128:	42a5      	cmp	r5, r4
 800612a:	d109      	bne.n	8006140 <__libc_init_array+0x24>
 800612c:	4e0b      	ldr	r6, [pc, #44]	; (800615c <__libc_init_array+0x40>)
 800612e:	4c0c      	ldr	r4, [pc, #48]	; (8006160 <__libc_init_array+0x44>)
 8006130:	f000 f9a6 	bl	8006480 <_init>
 8006134:	1ba4      	subs	r4, r4, r6
 8006136:	10a4      	asrs	r4, r4, #2
 8006138:	2500      	movs	r5, #0
 800613a:	42a5      	cmp	r5, r4
 800613c:	d105      	bne.n	800614a <__libc_init_array+0x2e>
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006144:	4798      	blx	r3
 8006146:	3501      	adds	r5, #1
 8006148:	e7ee      	b.n	8006128 <__libc_init_array+0xc>
 800614a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800614e:	4798      	blx	r3
 8006150:	3501      	adds	r5, #1
 8006152:	e7f2      	b.n	800613a <__libc_init_array+0x1e>
 8006154:	08006648 	.word	0x08006648
 8006158:	08006648 	.word	0x08006648
 800615c:	08006648 	.word	0x08006648
 8006160:	0800664c 	.word	0x0800664c

08006164 <memset>:
 8006164:	4402      	add	r2, r0
 8006166:	4603      	mov	r3, r0
 8006168:	4293      	cmp	r3, r2
 800616a:	d100      	bne.n	800616e <memset+0xa>
 800616c:	4770      	bx	lr
 800616e:	f803 1b01 	strb.w	r1, [r3], #1
 8006172:	e7f9      	b.n	8006168 <memset+0x4>

08006174 <strcpy>:
 8006174:	4603      	mov	r3, r0
 8006176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800617a:	f803 2b01 	strb.w	r2, [r3], #1
 800617e:	2a00      	cmp	r2, #0
 8006180:	d1f9      	bne.n	8006176 <strcpy+0x2>
 8006182:	4770      	bx	lr

08006184 <strtok>:
 8006184:	4b13      	ldr	r3, [pc, #76]	; (80061d4 <strtok+0x50>)
 8006186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800618a:	681d      	ldr	r5, [r3, #0]
 800618c:	6dac      	ldr	r4, [r5, #88]	; 0x58
 800618e:	4606      	mov	r6, r0
 8006190:	460f      	mov	r7, r1
 8006192:	b9b4      	cbnz	r4, 80061c2 <strtok+0x3e>
 8006194:	2050      	movs	r0, #80	; 0x50
 8006196:	f000 f8df 	bl	8006358 <malloc>
 800619a:	65a8      	str	r0, [r5, #88]	; 0x58
 800619c:	e9c0 4400 	strd	r4, r4, [r0]
 80061a0:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80061a4:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80061a8:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80061ac:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80061b0:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80061b4:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80061b8:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80061bc:	6184      	str	r4, [r0, #24]
 80061be:	7704      	strb	r4, [r0, #28]
 80061c0:	6244      	str	r4, [r0, #36]	; 0x24
 80061c2:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80061c4:	4639      	mov	r1, r7
 80061c6:	4630      	mov	r0, r6
 80061c8:	2301      	movs	r3, #1
 80061ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061ce:	f000 b803 	b.w	80061d8 <__strtok_r>
 80061d2:	bf00      	nop
 80061d4:	2000000c 	.word	0x2000000c

080061d8 <__strtok_r>:
 80061d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061da:	b918      	cbnz	r0, 80061e4 <__strtok_r+0xc>
 80061dc:	6810      	ldr	r0, [r2, #0]
 80061de:	b908      	cbnz	r0, 80061e4 <__strtok_r+0xc>
 80061e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061e2:	4620      	mov	r0, r4
 80061e4:	4604      	mov	r4, r0
 80061e6:	460f      	mov	r7, r1
 80061e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80061ec:	f817 6b01 	ldrb.w	r6, [r7], #1
 80061f0:	b91e      	cbnz	r6, 80061fa <__strtok_r+0x22>
 80061f2:	b96d      	cbnz	r5, 8006210 <__strtok_r+0x38>
 80061f4:	6015      	str	r5, [r2, #0]
 80061f6:	4628      	mov	r0, r5
 80061f8:	e7f2      	b.n	80061e0 <__strtok_r+0x8>
 80061fa:	42b5      	cmp	r5, r6
 80061fc:	d1f6      	bne.n	80061ec <__strtok_r+0x14>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1ef      	bne.n	80061e2 <__strtok_r+0xa>
 8006202:	6014      	str	r4, [r2, #0]
 8006204:	7003      	strb	r3, [r0, #0]
 8006206:	e7eb      	b.n	80061e0 <__strtok_r+0x8>
 8006208:	462b      	mov	r3, r5
 800620a:	e00d      	b.n	8006228 <__strtok_r+0x50>
 800620c:	b926      	cbnz	r6, 8006218 <__strtok_r+0x40>
 800620e:	461c      	mov	r4, r3
 8006210:	4623      	mov	r3, r4
 8006212:	460f      	mov	r7, r1
 8006214:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006218:	f817 6b01 	ldrb.w	r6, [r7], #1
 800621c:	42b5      	cmp	r5, r6
 800621e:	d1f5      	bne.n	800620c <__strtok_r+0x34>
 8006220:	2d00      	cmp	r5, #0
 8006222:	d0f1      	beq.n	8006208 <__strtok_r+0x30>
 8006224:	2100      	movs	r1, #0
 8006226:	7021      	strb	r1, [r4, #0]
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e7d9      	b.n	80061e0 <__strtok_r+0x8>

0800622c <_strtol_l.isra.0>:
 800622c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006230:	4680      	mov	r8, r0
 8006232:	4689      	mov	r9, r1
 8006234:	4692      	mov	sl, r2
 8006236:	461e      	mov	r6, r3
 8006238:	460f      	mov	r7, r1
 800623a:	463d      	mov	r5, r7
 800623c:	9808      	ldr	r0, [sp, #32]
 800623e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006242:	f000 f885 	bl	8006350 <__locale_ctype_ptr_l>
 8006246:	4420      	add	r0, r4
 8006248:	7843      	ldrb	r3, [r0, #1]
 800624a:	f013 0308 	ands.w	r3, r3, #8
 800624e:	d132      	bne.n	80062b6 <_strtol_l.isra.0+0x8a>
 8006250:	2c2d      	cmp	r4, #45	; 0x2d
 8006252:	d132      	bne.n	80062ba <_strtol_l.isra.0+0x8e>
 8006254:	787c      	ldrb	r4, [r7, #1]
 8006256:	1cbd      	adds	r5, r7, #2
 8006258:	2201      	movs	r2, #1
 800625a:	2e00      	cmp	r6, #0
 800625c:	d05d      	beq.n	800631a <_strtol_l.isra.0+0xee>
 800625e:	2e10      	cmp	r6, #16
 8006260:	d109      	bne.n	8006276 <_strtol_l.isra.0+0x4a>
 8006262:	2c30      	cmp	r4, #48	; 0x30
 8006264:	d107      	bne.n	8006276 <_strtol_l.isra.0+0x4a>
 8006266:	782b      	ldrb	r3, [r5, #0]
 8006268:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800626c:	2b58      	cmp	r3, #88	; 0x58
 800626e:	d14f      	bne.n	8006310 <_strtol_l.isra.0+0xe4>
 8006270:	786c      	ldrb	r4, [r5, #1]
 8006272:	2610      	movs	r6, #16
 8006274:	3502      	adds	r5, #2
 8006276:	2a00      	cmp	r2, #0
 8006278:	bf14      	ite	ne
 800627a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800627e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006282:	2700      	movs	r7, #0
 8006284:	fbb1 fcf6 	udiv	ip, r1, r6
 8006288:	4638      	mov	r0, r7
 800628a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800628e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006292:	2b09      	cmp	r3, #9
 8006294:	d817      	bhi.n	80062c6 <_strtol_l.isra.0+0x9a>
 8006296:	461c      	mov	r4, r3
 8006298:	42a6      	cmp	r6, r4
 800629a:	dd23      	ble.n	80062e4 <_strtol_l.isra.0+0xb8>
 800629c:	1c7b      	adds	r3, r7, #1
 800629e:	d007      	beq.n	80062b0 <_strtol_l.isra.0+0x84>
 80062a0:	4584      	cmp	ip, r0
 80062a2:	d31c      	bcc.n	80062de <_strtol_l.isra.0+0xb2>
 80062a4:	d101      	bne.n	80062aa <_strtol_l.isra.0+0x7e>
 80062a6:	45a6      	cmp	lr, r4
 80062a8:	db19      	blt.n	80062de <_strtol_l.isra.0+0xb2>
 80062aa:	fb00 4006 	mla	r0, r0, r6, r4
 80062ae:	2701      	movs	r7, #1
 80062b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062b4:	e7eb      	b.n	800628e <_strtol_l.isra.0+0x62>
 80062b6:	462f      	mov	r7, r5
 80062b8:	e7bf      	b.n	800623a <_strtol_l.isra.0+0xe>
 80062ba:	2c2b      	cmp	r4, #43	; 0x2b
 80062bc:	bf04      	itt	eq
 80062be:	1cbd      	addeq	r5, r7, #2
 80062c0:	787c      	ldrbeq	r4, [r7, #1]
 80062c2:	461a      	mov	r2, r3
 80062c4:	e7c9      	b.n	800625a <_strtol_l.isra.0+0x2e>
 80062c6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80062ca:	2b19      	cmp	r3, #25
 80062cc:	d801      	bhi.n	80062d2 <_strtol_l.isra.0+0xa6>
 80062ce:	3c37      	subs	r4, #55	; 0x37
 80062d0:	e7e2      	b.n	8006298 <_strtol_l.isra.0+0x6c>
 80062d2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80062d6:	2b19      	cmp	r3, #25
 80062d8:	d804      	bhi.n	80062e4 <_strtol_l.isra.0+0xb8>
 80062da:	3c57      	subs	r4, #87	; 0x57
 80062dc:	e7dc      	b.n	8006298 <_strtol_l.isra.0+0x6c>
 80062de:	f04f 37ff 	mov.w	r7, #4294967295
 80062e2:	e7e5      	b.n	80062b0 <_strtol_l.isra.0+0x84>
 80062e4:	1c7b      	adds	r3, r7, #1
 80062e6:	d108      	bne.n	80062fa <_strtol_l.isra.0+0xce>
 80062e8:	2322      	movs	r3, #34	; 0x22
 80062ea:	f8c8 3000 	str.w	r3, [r8]
 80062ee:	4608      	mov	r0, r1
 80062f0:	f1ba 0f00 	cmp.w	sl, #0
 80062f4:	d107      	bne.n	8006306 <_strtol_l.isra.0+0xda>
 80062f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fa:	b102      	cbz	r2, 80062fe <_strtol_l.isra.0+0xd2>
 80062fc:	4240      	negs	r0, r0
 80062fe:	f1ba 0f00 	cmp.w	sl, #0
 8006302:	d0f8      	beq.n	80062f6 <_strtol_l.isra.0+0xca>
 8006304:	b10f      	cbz	r7, 800630a <_strtol_l.isra.0+0xde>
 8006306:	f105 39ff 	add.w	r9, r5, #4294967295
 800630a:	f8ca 9000 	str.w	r9, [sl]
 800630e:	e7f2      	b.n	80062f6 <_strtol_l.isra.0+0xca>
 8006310:	2430      	movs	r4, #48	; 0x30
 8006312:	2e00      	cmp	r6, #0
 8006314:	d1af      	bne.n	8006276 <_strtol_l.isra.0+0x4a>
 8006316:	2608      	movs	r6, #8
 8006318:	e7ad      	b.n	8006276 <_strtol_l.isra.0+0x4a>
 800631a:	2c30      	cmp	r4, #48	; 0x30
 800631c:	d0a3      	beq.n	8006266 <_strtol_l.isra.0+0x3a>
 800631e:	260a      	movs	r6, #10
 8006320:	e7a9      	b.n	8006276 <_strtol_l.isra.0+0x4a>
	...

08006324 <strtol>:
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <strtol+0x24>)
 8006326:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006328:	681c      	ldr	r4, [r3, #0]
 800632a:	4d08      	ldr	r5, [pc, #32]	; (800634c <strtol+0x28>)
 800632c:	6a23      	ldr	r3, [r4, #32]
 800632e:	2b00      	cmp	r3, #0
 8006330:	bf08      	it	eq
 8006332:	462b      	moveq	r3, r5
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	4613      	mov	r3, r2
 8006338:	460a      	mov	r2, r1
 800633a:	4601      	mov	r1, r0
 800633c:	4620      	mov	r0, r4
 800633e:	f7ff ff75 	bl	800622c <_strtol_l.isra.0>
 8006342:	b003      	add	sp, #12
 8006344:	bd30      	pop	{r4, r5, pc}
 8006346:	bf00      	nop
 8006348:	2000000c 	.word	0x2000000c
 800634c:	20000070 	.word	0x20000070

08006350 <__locale_ctype_ptr_l>:
 8006350:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006354:	4770      	bx	lr
	...

08006358 <malloc>:
 8006358:	4b02      	ldr	r3, [pc, #8]	; (8006364 <malloc+0xc>)
 800635a:	4601      	mov	r1, r0
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	f000 b815 	b.w	800638c <_malloc_r>
 8006362:	bf00      	nop
 8006364:	2000000c 	.word	0x2000000c

08006368 <__ascii_mbtowc>:
 8006368:	b082      	sub	sp, #8
 800636a:	b901      	cbnz	r1, 800636e <__ascii_mbtowc+0x6>
 800636c:	a901      	add	r1, sp, #4
 800636e:	b142      	cbz	r2, 8006382 <__ascii_mbtowc+0x1a>
 8006370:	b14b      	cbz	r3, 8006386 <__ascii_mbtowc+0x1e>
 8006372:	7813      	ldrb	r3, [r2, #0]
 8006374:	600b      	str	r3, [r1, #0]
 8006376:	7812      	ldrb	r2, [r2, #0]
 8006378:	1c10      	adds	r0, r2, #0
 800637a:	bf18      	it	ne
 800637c:	2001      	movne	r0, #1
 800637e:	b002      	add	sp, #8
 8006380:	4770      	bx	lr
 8006382:	4610      	mov	r0, r2
 8006384:	e7fb      	b.n	800637e <__ascii_mbtowc+0x16>
 8006386:	f06f 0001 	mvn.w	r0, #1
 800638a:	e7f8      	b.n	800637e <__ascii_mbtowc+0x16>

0800638c <_malloc_r>:
 800638c:	b570      	push	{r4, r5, r6, lr}
 800638e:	1ccd      	adds	r5, r1, #3
 8006390:	f025 0503 	bic.w	r5, r5, #3
 8006394:	3508      	adds	r5, #8
 8006396:	2d0c      	cmp	r5, #12
 8006398:	bf38      	it	cc
 800639a:	250c      	movcc	r5, #12
 800639c:	2d00      	cmp	r5, #0
 800639e:	4606      	mov	r6, r0
 80063a0:	db01      	blt.n	80063a6 <_malloc_r+0x1a>
 80063a2:	42a9      	cmp	r1, r5
 80063a4:	d903      	bls.n	80063ae <_malloc_r+0x22>
 80063a6:	230c      	movs	r3, #12
 80063a8:	6033      	str	r3, [r6, #0]
 80063aa:	2000      	movs	r0, #0
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
 80063ae:	f000 f864 	bl	800647a <__malloc_lock>
 80063b2:	4a21      	ldr	r2, [pc, #132]	; (8006438 <_malloc_r+0xac>)
 80063b4:	6814      	ldr	r4, [r2, #0]
 80063b6:	4621      	mov	r1, r4
 80063b8:	b991      	cbnz	r1, 80063e0 <_malloc_r+0x54>
 80063ba:	4c20      	ldr	r4, [pc, #128]	; (800643c <_malloc_r+0xb0>)
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	b91b      	cbnz	r3, 80063c8 <_malloc_r+0x3c>
 80063c0:	4630      	mov	r0, r6
 80063c2:	f000 f83d 	bl	8006440 <_sbrk_r>
 80063c6:	6020      	str	r0, [r4, #0]
 80063c8:	4629      	mov	r1, r5
 80063ca:	4630      	mov	r0, r6
 80063cc:	f000 f838 	bl	8006440 <_sbrk_r>
 80063d0:	1c43      	adds	r3, r0, #1
 80063d2:	d124      	bne.n	800641e <_malloc_r+0x92>
 80063d4:	230c      	movs	r3, #12
 80063d6:	6033      	str	r3, [r6, #0]
 80063d8:	4630      	mov	r0, r6
 80063da:	f000 f84f 	bl	800647c <__malloc_unlock>
 80063de:	e7e4      	b.n	80063aa <_malloc_r+0x1e>
 80063e0:	680b      	ldr	r3, [r1, #0]
 80063e2:	1b5b      	subs	r3, r3, r5
 80063e4:	d418      	bmi.n	8006418 <_malloc_r+0x8c>
 80063e6:	2b0b      	cmp	r3, #11
 80063e8:	d90f      	bls.n	800640a <_malloc_r+0x7e>
 80063ea:	600b      	str	r3, [r1, #0]
 80063ec:	50cd      	str	r5, [r1, r3]
 80063ee:	18cc      	adds	r4, r1, r3
 80063f0:	4630      	mov	r0, r6
 80063f2:	f000 f843 	bl	800647c <__malloc_unlock>
 80063f6:	f104 000b 	add.w	r0, r4, #11
 80063fa:	1d23      	adds	r3, r4, #4
 80063fc:	f020 0007 	bic.w	r0, r0, #7
 8006400:	1ac3      	subs	r3, r0, r3
 8006402:	d0d3      	beq.n	80063ac <_malloc_r+0x20>
 8006404:	425a      	negs	r2, r3
 8006406:	50e2      	str	r2, [r4, r3]
 8006408:	e7d0      	b.n	80063ac <_malloc_r+0x20>
 800640a:	428c      	cmp	r4, r1
 800640c:	684b      	ldr	r3, [r1, #4]
 800640e:	bf16      	itet	ne
 8006410:	6063      	strne	r3, [r4, #4]
 8006412:	6013      	streq	r3, [r2, #0]
 8006414:	460c      	movne	r4, r1
 8006416:	e7eb      	b.n	80063f0 <_malloc_r+0x64>
 8006418:	460c      	mov	r4, r1
 800641a:	6849      	ldr	r1, [r1, #4]
 800641c:	e7cc      	b.n	80063b8 <_malloc_r+0x2c>
 800641e:	1cc4      	adds	r4, r0, #3
 8006420:	f024 0403 	bic.w	r4, r4, #3
 8006424:	42a0      	cmp	r0, r4
 8006426:	d005      	beq.n	8006434 <_malloc_r+0xa8>
 8006428:	1a21      	subs	r1, r4, r0
 800642a:	4630      	mov	r0, r6
 800642c:	f000 f808 	bl	8006440 <_sbrk_r>
 8006430:	3001      	adds	r0, #1
 8006432:	d0cf      	beq.n	80063d4 <_malloc_r+0x48>
 8006434:	6025      	str	r5, [r4, #0]
 8006436:	e7db      	b.n	80063f0 <_malloc_r+0x64>
 8006438:	200001fc 	.word	0x200001fc
 800643c:	20000200 	.word	0x20000200

08006440 <_sbrk_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4c06      	ldr	r4, [pc, #24]	; (800645c <_sbrk_r+0x1c>)
 8006444:	2300      	movs	r3, #0
 8006446:	4605      	mov	r5, r0
 8006448:	4608      	mov	r0, r1
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	f7fc fbb2 	bl	8002bb4 <_sbrk>
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	d102      	bne.n	800645a <_sbrk_r+0x1a>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	b103      	cbz	r3, 800645a <_sbrk_r+0x1a>
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	bd38      	pop	{r3, r4, r5, pc}
 800645c:	20005814 	.word	0x20005814

08006460 <__ascii_wctomb>:
 8006460:	b149      	cbz	r1, 8006476 <__ascii_wctomb+0x16>
 8006462:	2aff      	cmp	r2, #255	; 0xff
 8006464:	bf85      	ittet	hi
 8006466:	238a      	movhi	r3, #138	; 0x8a
 8006468:	6003      	strhi	r3, [r0, #0]
 800646a:	700a      	strbls	r2, [r1, #0]
 800646c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006470:	bf98      	it	ls
 8006472:	2001      	movls	r0, #1
 8006474:	4770      	bx	lr
 8006476:	4608      	mov	r0, r1
 8006478:	4770      	bx	lr

0800647a <__malloc_lock>:
 800647a:	4770      	bx	lr

0800647c <__malloc_unlock>:
 800647c:	4770      	bx	lr
	...

08006480 <_init>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr

0800648c <_fini>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	bf00      	nop
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr
