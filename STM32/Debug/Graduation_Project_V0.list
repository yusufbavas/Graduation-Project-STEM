
Graduation_Project_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006098  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d8  080063d8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e0  080063e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e4  080063e4  000163e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080063e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000563c  200001dc  080065c4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005818  080065c4  00025818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f64  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000224e  00000000  00000000  00031170  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  000333c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  000342a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c2d  00000000  00000000  000350c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b821  00000000  00000000  0004ccf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009095a  00000000  00000000  00058516  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8e70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000447c  00000000  00000000  000e8eec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001dc 	.word	0x200001dc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006218 	.word	0x08006218

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e0 	.word	0x200001e0
 80001d4:	08006218 	.word	0x08006218

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_d2iz>:
 8000a98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa0:	d215      	bcs.n	8000ace <__aeabi_d2iz+0x36>
 8000aa2:	d511      	bpl.n	8000ac8 <__aeabi_d2iz+0x30>
 8000aa4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aa8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aac:	d912      	bls.n	8000ad4 <__aeabi_d2iz+0x3c>
 8000aae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	4240      	negne	r0, r0
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d105      	bne.n	8000ae0 <__aeabi_d2iz+0x48>
 8000ad4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ad8:	bf08      	it	eq
 8000ada:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_d2uiz>:
 8000ae8:	004a      	lsls	r2, r1, #1
 8000aea:	d211      	bcs.n	8000b10 <__aeabi_d2uiz+0x28>
 8000aec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af0:	d211      	bcs.n	8000b16 <__aeabi_d2uiz+0x2e>
 8000af2:	d50d      	bpl.n	8000b10 <__aeabi_d2uiz+0x28>
 8000af4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000afc:	d40e      	bmi.n	8000b1c <__aeabi_d2uiz+0x34>
 8000afe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_d2uiz+0x3a>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0000 	mov.w	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_uldivmod>:
 8000b28:	b953      	cbnz	r3, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2a:	b94a      	cbnz	r2, 8000b40 <__aeabi_uldivmod+0x18>
 8000b2c:	2900      	cmp	r1, #0
 8000b2e:	bf08      	it	eq
 8000b30:	2800      	cmpeq	r0, #0
 8000b32:	bf1c      	itt	ne
 8000b34:	f04f 31ff 	movne.w	r1, #4294967295
 8000b38:	f04f 30ff 	movne.w	r0, #4294967295
 8000b3c:	f000 b972 	b.w	8000e24 <__aeabi_idiv0>
 8000b40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b48:	f000 f806 	bl	8000b58 <__udivmoddi4>
 8000b4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b54:	b004      	add	sp, #16
 8000b56:	4770      	bx	lr

08000b58 <__udivmoddi4>:
 8000b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b5c:	9e08      	ldr	r6, [sp, #32]
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4688      	mov	r8, r1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d14b      	bne.n	8000bfe <__udivmoddi4+0xa6>
 8000b66:	428a      	cmp	r2, r1
 8000b68:	4615      	mov	r5, r2
 8000b6a:	d967      	bls.n	8000c3c <__udivmoddi4+0xe4>
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	b14a      	cbz	r2, 8000b86 <__udivmoddi4+0x2e>
 8000b72:	f1c2 0720 	rsb	r7, r2, #32
 8000b76:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000b7e:	4095      	lsls	r5, r2
 8000b80:	ea47 0803 	orr.w	r8, r7, r3
 8000b84:	4094      	lsls	r4, r2
 8000b86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8a:	0c23      	lsrs	r3, r4, #16
 8000b8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b90:	fa1f fc85 	uxth.w	ip, r5
 8000b94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x60>
 8000ba4:	18eb      	adds	r3, r5, r3
 8000ba6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000baa:	f080 811b 	bcs.w	8000de4 <__udivmoddi4+0x28c>
 8000bae:	4299      	cmp	r1, r3
 8000bb0:	f240 8118 	bls.w	8000de4 <__udivmoddi4+0x28c>
 8000bb4:	3f02      	subs	r7, #2
 8000bb6:	442b      	add	r3, r5
 8000bb8:	1a5b      	subs	r3, r3, r1
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bcc:	45a4      	cmp	ip, r4
 8000bce:	d909      	bls.n	8000be4 <__udivmoddi4+0x8c>
 8000bd0:	192c      	adds	r4, r5, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd6:	f080 8107 	bcs.w	8000de8 <__udivmoddi4+0x290>
 8000bda:	45a4      	cmp	ip, r4
 8000bdc:	f240 8104 	bls.w	8000de8 <__udivmoddi4+0x290>
 8000be0:	3802      	subs	r0, #2
 8000be2:	442c      	add	r4, r5
 8000be4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000be8:	eba4 040c 	sub.w	r4, r4, ip
 8000bec:	2700      	movs	r7, #0
 8000bee:	b11e      	cbz	r6, 8000bf8 <__udivmoddi4+0xa0>
 8000bf0:	40d4      	lsrs	r4, r2
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0xbe>
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	f000 80eb 	beq.w	8000dde <__udivmoddi4+0x286>
 8000c08:	2700      	movs	r7, #0
 8000c0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c0e:	4638      	mov	r0, r7
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	fab3 f783 	clz	r7, r3
 8000c1a:	2f00      	cmp	r7, #0
 8000c1c:	d147      	bne.n	8000cae <__udivmoddi4+0x156>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xd0>
 8000c22:	4282      	cmp	r2, r0
 8000c24:	f200 80fa 	bhi.w	8000e1c <__udivmoddi4+0x2c4>
 8000c28:	1a84      	subs	r4, r0, r2
 8000c2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	4698      	mov	r8, r3
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d0e0      	beq.n	8000bf8 <__udivmoddi4+0xa0>
 8000c36:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3a:	e7dd      	b.n	8000bf8 <__udivmoddi4+0xa0>
 8000c3c:	b902      	cbnz	r2, 8000c40 <__udivmoddi4+0xe8>
 8000c3e:	deff      	udf	#255	; 0xff
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	2a00      	cmp	r2, #0
 8000c46:	f040 808f 	bne.w	8000d68 <__udivmoddi4+0x210>
 8000c4a:	1b49      	subs	r1, r1, r5
 8000c4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c50:	fa1f f885 	uxth.w	r8, r5
 8000c54:	2701      	movs	r7, #1
 8000c56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c64:	fb08 f10c 	mul.w	r1, r8, ip
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	d907      	bls.n	8000c7c <__udivmoddi4+0x124>
 8000c6c:	18eb      	adds	r3, r5, r3
 8000c6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x122>
 8000c74:	4299      	cmp	r1, r3
 8000c76:	f200 80cd 	bhi.w	8000e14 <__udivmoddi4+0x2bc>
 8000c7a:	4684      	mov	ip, r0
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	b2a3      	uxth	r3, r4
 8000c80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c8c:	fb08 f800 	mul.w	r8, r8, r0
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0x14c>
 8000c94:	192c      	adds	r4, r5, r4
 8000c96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x14a>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f200 80b6 	bhi.w	8000e0e <__udivmoddi4+0x2b6>
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	eba4 0408 	sub.w	r4, r4, r8
 8000ca8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cac:	e79f      	b.n	8000bee <__udivmoddi4+0x96>
 8000cae:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb2:	40bb      	lsls	r3, r7
 8000cb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ccc:	4325      	orrs	r5, r4
 8000cce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd2:	0c2c      	lsrs	r4, r5, #16
 8000cd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000cd8:	fa1f fa8e 	uxth.w	sl, lr
 8000cdc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	fa02 f207 	lsl.w	r2, r2, r7
 8000cea:	fa00 f107 	lsl.w	r1, r0, r7
 8000cee:	d90b      	bls.n	8000d08 <__udivmoddi4+0x1b0>
 8000cf0:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf8:	f080 8087 	bcs.w	8000e0a <__udivmoddi4+0x2b2>
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	f240 8084 	bls.w	8000e0a <__udivmoddi4+0x2b2>
 8000d02:	f1a9 0902 	sub.w	r9, r9, #2
 8000d06:	4473      	add	r3, lr
 8000d08:	1b1b      	subs	r3, r3, r4
 8000d0a:	b2ad      	uxth	r5, r5
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d1c:	45a2      	cmp	sl, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x1da>
 8000d20:	eb1e 0404 	adds.w	r4, lr, r4
 8000d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d28:	d26b      	bcs.n	8000e02 <__udivmoddi4+0x2aa>
 8000d2a:	45a2      	cmp	sl, r4
 8000d2c:	d969      	bls.n	8000e02 <__udivmoddi4+0x2aa>
 8000d2e:	3802      	subs	r0, #2
 8000d30:	4474      	add	r4, lr
 8000d32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d36:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3a:	eba4 040a 	sub.w	r4, r4, sl
 8000d3e:	454c      	cmp	r4, r9
 8000d40:	46c2      	mov	sl, r8
 8000d42:	464b      	mov	r3, r9
 8000d44:	d354      	bcc.n	8000df0 <__udivmoddi4+0x298>
 8000d46:	d051      	beq.n	8000dec <__udivmoddi4+0x294>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d069      	beq.n	8000e20 <__udivmoddi4+0x2c8>
 8000d4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000d50:	eb64 0403 	sbc.w	r4, r4, r3
 8000d54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d58:	40fd      	lsrs	r5, r7
 8000d5a:	40fc      	lsrs	r4, r7
 8000d5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000d60:	e9c6 5400 	strd	r5, r4, [r6]
 8000d64:	2700      	movs	r7, #0
 8000d66:	e747      	b.n	8000bf8 <__udivmoddi4+0xa0>
 8000d68:	f1c2 0320 	rsb	r3, r2, #32
 8000d6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000d70:	4095      	lsls	r5, r2
 8000d72:	fa01 f002 	lsl.w	r0, r1, r2
 8000d76:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d7e:	4338      	orrs	r0, r7
 8000d80:	0c01      	lsrs	r1, r0, #16
 8000d82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d86:	fa1f f885 	uxth.w	r8, r5
 8000d8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb07 f308 	mul.w	r3, r7, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9c:	d907      	bls.n	8000dae <__udivmoddi4+0x256>
 8000d9e:	1869      	adds	r1, r5, r1
 8000da0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da4:	d22f      	bcs.n	8000e06 <__udivmoddi4+0x2ae>
 8000da6:	428b      	cmp	r3, r1
 8000da8:	d92d      	bls.n	8000e06 <__udivmoddi4+0x2ae>
 8000daa:	3f02      	subs	r7, #2
 8000dac:	4429      	add	r1, r5
 8000dae:	1acb      	subs	r3, r1, r3
 8000db0:	b281      	uxth	r1, r0
 8000db2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbe:	fb00 f308 	mul.w	r3, r0, r8
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x27e>
 8000dc6:	1869      	adds	r1, r5, r1
 8000dc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dcc:	d217      	bcs.n	8000dfe <__udivmoddi4+0x2a6>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d915      	bls.n	8000dfe <__udivmoddi4+0x2a6>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4429      	add	r1, r5
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ddc:	e73b      	b.n	8000c56 <__udivmoddi4+0xfe>
 8000dde:	4637      	mov	r7, r6
 8000de0:	4630      	mov	r0, r6
 8000de2:	e709      	b.n	8000bf8 <__udivmoddi4+0xa0>
 8000de4:	4607      	mov	r7, r0
 8000de6:	e6e7      	b.n	8000bb8 <__udivmoddi4+0x60>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6fb      	b.n	8000be4 <__udivmoddi4+0x8c>
 8000dec:	4541      	cmp	r1, r8
 8000dee:	d2ab      	bcs.n	8000d48 <__udivmoddi4+0x1f0>
 8000df0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df4:	eb69 020e 	sbc.w	r2, r9, lr
 8000df8:	3801      	subs	r0, #1
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	e7a4      	b.n	8000d48 <__udivmoddi4+0x1f0>
 8000dfe:	4660      	mov	r0, ip
 8000e00:	e7e9      	b.n	8000dd6 <__udivmoddi4+0x27e>
 8000e02:	4618      	mov	r0, r3
 8000e04:	e795      	b.n	8000d32 <__udivmoddi4+0x1da>
 8000e06:	4667      	mov	r7, ip
 8000e08:	e7d1      	b.n	8000dae <__udivmoddi4+0x256>
 8000e0a:	4681      	mov	r9, r0
 8000e0c:	e77c      	b.n	8000d08 <__udivmoddi4+0x1b0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	442c      	add	r4, r5
 8000e12:	e747      	b.n	8000ca4 <__udivmoddi4+0x14c>
 8000e14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e18:	442b      	add	r3, r5
 8000e1a:	e72f      	b.n	8000c7c <__udivmoddi4+0x124>
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	e708      	b.n	8000c32 <__udivmoddi4+0xda>
 8000e20:	4637      	mov	r7, r6
 8000e22:	e6e9      	b.n	8000bf8 <__udivmoddi4+0xa0>

08000e24 <__aeabi_idiv0>:
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop

08000e28 <HCSR04_init>:
#include "HCSR04.h"


void HCSR04_init(TIM_HandleTypeDef *tim){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	IC_Val1 = 0;
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HCSR04_init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
	IC_Val2 = 0;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <HCSR04_init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
	Difference = 0;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HCSR04_init+0x54>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
	Is_First_Captured = 0;  // is the first value captured ?
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <HCSR04_init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
	Distance  = 0;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HCSR04_init+0x5c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]

	timer = tim;
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HCSR04_init+0x60>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(timer);
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HCSR04_init+0x60>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f003 f9fc 	bl	8004256 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(timer, TIM_CHANNEL_3);
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HCSR04_init+0x60>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2108      	movs	r1, #8
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 faad 	bl	80043c4 <HAL_TIM_IC_Start_IT>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000020c 	.word	0x2000020c
 8000e78:	20000214 	.word	0x20000214
 8000e7c:	20000218 	.word	0x20000218
 8000e80:	20000210 	.word	0x20000210
 8000e84:	20000208 	.word	0x20000208
 8000e88:	20000204 	.word	0x20000204

08000e8c <delay_us>:

void delay_us (uint16_t us)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(timer,0);  // set the counter value a 0
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <delay_us+0x30>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(timer) < us);  // wait for the counter to reach the us input in the parameter
 8000ea0:	bf00      	nop
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <delay_us+0x30>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d3f8      	bcc.n	8000ea2 <delay_us+0x16>
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	20000204 	.word	0x20000204

08000ec0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC_SR04_Output_GPIO_Port, HC_SR04_Output_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eca:	480c      	ldr	r0, [pc, #48]	; (8000efc <HCSR04_Read+0x3c>)
 8000ecc:	f002 f8dc 	bl	8003088 <HAL_GPIO_WritePin>
	delay_us(10);  // wait for 10 us
 8000ed0:	200a      	movs	r0, #10
 8000ed2:	f7ff ffdb 	bl	8000e8c <delay_us>
	HAL_GPIO_WritePin(HC_SR04_Output_GPIO_Port, HC_SR04_Output_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <HCSR04_Read+0x3c>)
 8000ede:	f002 f8d3 	bl	8003088 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(timer, TIM_IT_CC3);
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <HCSR04_Read+0x40>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HCSR04_Read+0x40>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f042 0208 	orr.w	r2, r2, #8
 8000ef4:	60da      	str	r2, [r3, #12]
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40020400 	.word	0x40020400
 8000f00:	20000204 	.word	0x20000204
 8000f04:	00000000 	.word	0x00000000

08000f08 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	7f1b      	ldrb	r3, [r3, #28]
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	f040 8083 	bne.w	8001020 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000f1a:	4b45      	ldr	r3, [pc, #276]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d11a      	bne.n	8000f58 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3); // read the first value
 8000f22:	2108      	movs	r1, #8
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f003 fdd7 	bl	8004ad8 <HAL_TIM_ReadCapturedValue>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	4b41      	ldr	r3, [pc, #260]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f2e:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000f30:	4b3f      	ldr	r3, [pc, #252]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6a1a      	ldr	r2, [r3, #32]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8000f44:	621a      	str	r2, [r3, #32]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6a1a      	ldr	r2, [r3, #32]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f54:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
		}
	}
}
 8000f56:	e063      	b.n	8001020 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000f58:	4b35      	ldr	r3, [pc, #212]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d15f      	bne.n	8001020 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);  // read second value
 8000f60:	2108      	movs	r1, #8
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f003 fdb8 	bl	8004ad8 <HAL_TIM_ReadCapturedValue>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f6c:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2200      	movs	r2, #0
 8000f74:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	4b2e      	ldr	r3, [pc, #184]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d907      	bls.n	8000f92 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	4b2b      	ldr	r3, [pc, #172]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	4a2b      	ldr	r2, [pc, #172]	; (800103c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000f8e:	6013      	str	r3, [r2, #0]
 8000f90:	e00f      	b.n	8000fb2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b28      	ldr	r3, [pc, #160]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d909      	bls.n	8000fb2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b24      	ldr	r3, [pc, #144]	; (8001034 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fac:	33ff      	adds	r3, #255	; 0xff
 8000fae:	4a23      	ldr	r2, [pc, #140]	; (800103c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fb0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fa5a 	bl	8000470 <__aeabi_ui2d>
 8000fbc:	a31a      	add	r3, pc, #104	; (adr r3, 8001028 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff facf 	bl	8000564 <__aeabi_dmul>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460c      	mov	r4, r1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	4621      	mov	r1, r4
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd6:	f7ff fbef 	bl	80007b8 <__aeabi_ddiv>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460c      	mov	r4, r1
 8000fde:	4618      	mov	r0, r3
 8000fe0:	4621      	mov	r1, r4
 8000fe2:	f7ff fd81 	bl	8000ae8 <__aeabi_d2uiz>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000fec:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6a1a      	ldr	r2, [r3, #32]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 8001002:	621a      	str	r2, [r3, #32]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a12      	ldr	r2, [r2, #32]
 800100e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f022 0208 	bic.w	r2, r2, #8
 800101e:	60da      	str	r2, [r3, #12]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	b020c49c 	.word	0xb020c49c
 800102c:	3fa16872 	.word	0x3fa16872
 8001030:	20000210 	.word	0x20000210
 8001034:	2000020c 	.word	0x2000020c
 8001038:	20000214 	.word	0x20000214
 800103c:	20000218 	.word	0x20000218
 8001040:	20000208 	.word	0x20000208

08001044 <QMC5883L_Write_Reg>:
	HAL_I2C_Mem_Read(QMC5883L_I2C_PORT,QMC5883L_ADDRESS,reg,1,Buffer,1,10);
	return Buffer[0];
}

void QMC5883L_Write_Reg(uint8_t reg, uint8_t data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4613      	mov	r3, r2
 8001052:	71bb      	strb	r3, [r7, #6]
	uint8_t Buffer[2]={reg,data};
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	733b      	strb	r3, [r7, #12]
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(QMC5883L_I2C_PORT,QMC5883L_ADDRESS,Buffer,2,10);
 800105c:	f107 020c 	add.w	r2, r7, #12
 8001060:	230a      	movs	r3, #10
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2302      	movs	r3, #2
 8001066:	211a      	movs	r1, #26
 8001068:	4803      	ldr	r0, [pc, #12]	; (8001078 <QMC5883L_Write_Reg+0x34>)
 800106a:	f002 f95f 	bl	800332c <HAL_I2C_Master_Transmit>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000234 	.word	0x20000234

0800107c <QMC5883L_Initialize>:
	return (((int16_t)QMC5883L_Read_Reg(QMC5883L_TEMP_READ_LSB)) | (((int16_t)QMC5883L_Read_Reg(QMC5883L_TEMP_READ_MSB))<<8))/100;
}


void QMC5883L_Initialize(_qmc5883l_MODE MODE,_qmc5883l_ODR ODR,_qmc5883l_RNG RNG,_qmc5883l_OSR OSR)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	71fb      	strb	r3, [r7, #7]
 800108e:	4603      	mov	r3, r0
 8001090:	71bb      	strb	r3, [r7, #6]
 8001092:	460b      	mov	r3, r1
 8001094:	717b      	strb	r3, [r7, #5]
 8001096:	4613      	mov	r3, r2
 8001098:	713b      	strb	r3, [r7, #4]
	QMC5883L_Write_Reg(QMC5883L_CONFIG_3,0x01);
 800109a:	2101      	movs	r1, #1
 800109c:	200b      	movs	r0, #11
 800109e:	f7ff ffd1 	bl	8001044 <QMC5883L_Write_Reg>
	QMC5883L_Write_Reg(QMC5883L_CONFIG_1,MODE | ODR | RNG | OSR);
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	797b      	ldrb	r3, [r7, #5]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	793b      	ldrb	r3, [r7, #4]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4619      	mov	r1, r3
 80010b8:	2009      	movs	r0, #9
 80010ba:	f7ff ffc3 	bl	8001044 <QMC5883L_Write_Reg>
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
	...

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f001 fcb4 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f838 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d4:	f000 fa20 	bl	8001518 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010d8:	f000 f9f4 	bl	80014c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010dc:	f000 f89c 	bl	8001218 <MX_I2C1_Init>
  MX_TIM1_Init();
 80010e0:	f000 f8c8 	bl	8001274 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010e4:	f000 f9c4 	bl	8001470 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80010e8:	f000 f970 	bl	80013cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  QMC5883L_Initialize(0x01,0x0C,0x10,0x00);
 80010ec:	2300      	movs	r3, #0
 80010ee:	2210      	movs	r2, #16
 80010f0:	210c      	movs	r1, #12
 80010f2:	2001      	movs	r0, #1
 80010f4:	f7ff ffc2 	bl	800107c <QMC5883L_Initialize>
  HCSR04_init(&htim2);
 80010f8:	480e      	ldr	r0, [pc, #56]	; (8001134 <main+0x6c>)
 80010fa:	f7ff fe95 	bl	8000e28 <HCSR04_init>

  HAL_TIM_Base_Start(&htim1);
 80010fe:	480e      	ldr	r0, [pc, #56]	; (8001138 <main+0x70>)
 8001100:	f003 f8a9 	bl	8004256 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001104:	2100      	movs	r1, #0
 8001106:	480c      	ldr	r0, [pc, #48]	; (8001138 <main+0x70>)
 8001108:	f003 f8fe 	bl	8004308 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800110c:	2104      	movs	r1, #4
 800110e:	480a      	ldr	r0, [pc, #40]	; (8001138 <main+0x70>)
 8001110:	f003 f8fa 	bl	8004308 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_UART_Receive(&huart1, buffer, BUFFER_SIZE, 100) == HAL_OK){
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	2214      	movs	r2, #20
 8001118:	4908      	ldr	r1, [pc, #32]	; (800113c <main+0x74>)
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <main+0x78>)
 800111c:	f004 fa53 	bl	80055c6 <HAL_UART_Receive>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f6      	bne.n	8001114 <main+0x4c>
		  read_commands(&huart1);
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <main+0x78>)
 8001128:	f000 fa94 	bl	8001654 <read_commands>
		  //HAL_UART_Transmit(&huart2, buffer, BUFFER_SIZE, 100);
		  //sprintf(buffer,"Count: %d\r\n",command_count);
		  //HAL_UART_Transmit(&huart2, buffer, BUFFER_SIZE, 100);
		  process_commands();
 800112c:	f000 fad0 	bl	80016d0 <process_commands>
	  if (HAL_UART_Receive(&huart1, buffer, BUFFER_SIZE, 100) == HAL_OK){
 8001130:	e7f0      	b.n	8001114 <main+0x4c>
 8001132:	bf00      	nop
 8001134:	20000968 	.word	0x20000968
 8001138:	200002e8 	.word	0x200002e8
 800113c:	200002d0 	.word	0x200002d0
 8001140:	20000290 	.word	0x20000290

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	; 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	2230      	movs	r2, #48	; 0x30
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f004 fed2 	bl	8005efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	f107 030c 	add.w	r3, r7, #12
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	4b28      	ldr	r3, [pc, #160]	; (8001210 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a27      	ldr	r2, [pc, #156]	; (8001210 <SystemClock_Config+0xcc>)
 8001172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <SystemClock_Config+0xcc>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b22      	ldr	r3, [pc, #136]	; (8001214 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <SystemClock_Config+0xd0>)
 800118e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <SystemClock_Config+0xd0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a0:	2302      	movs	r3, #2
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a8:	2310      	movs	r3, #16
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ac:	2302      	movs	r3, #2
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011b4:	2310      	movs	r3, #16
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011be:	2304      	movs	r3, #4
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c2:	2304      	movs	r3, #4
 80011c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fbb6 	bl	800393c <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011d6:	f000 fa39 	bl	800164c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011de:	2302      	movs	r3, #2
 80011e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 fe10 	bl	8003e1c <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001202:	f000 fa23 	bl	800164c <Error_Handler>
  }
}
 8001206:	bf00      	nop
 8001208:	3750      	adds	r7, #80	; 0x50
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40007000 	.word	0x40007000

08001218 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <MX_I2C1_Init+0x50>)
 800121e:	4a13      	ldr	r2, [pc, #76]	; (800126c <MX_I2C1_Init+0x54>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_I2C1_Init+0x50>)
 8001224:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_I2C1_Init+0x58>)
 8001226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_I2C1_Init+0x50>)
 8001236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800123a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <MX_I2C1_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_I2C1_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_I2C1_Init+0x50>)
 8001256:	f001 ff31 	bl	80030bc <HAL_I2C_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001260:	f000 f9f4 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000234 	.word	0x20000234
 800126c:	40005400 	.word	0x40005400
 8001270:	00061a80 	.word	0x00061a80

08001274 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b096      	sub	sp, #88	; 0x58
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2220      	movs	r2, #32
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 fe25 	bl	8005efc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b2:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012b4:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <MX_TIM1_Init+0x154>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800;
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012ba:	f244 12a0 	movw	r2, #16800	; 0x41a0
 80012be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b40      	ldr	r3, [pc, #256]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012c8:	2264      	movs	r2, #100	; 0x64
 80012ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012cc:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d2:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012de:	4839      	ldr	r0, [pc, #228]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012e0:	f002 ff8e 	bl	8004200 <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012ea:	f000 f9af 	bl	800164c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f8:	4619      	mov	r1, r3
 80012fa:	4832      	ldr	r0, [pc, #200]	; (80013c4 <MX_TIM1_Init+0x150>)
 80012fc:	f003 fb34 	bl	8004968 <HAL_TIM_ConfigClockSource>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001306:	f000 f9a1 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800130a:	482e      	ldr	r0, [pc, #184]	; (80013c4 <MX_TIM1_Init+0x150>)
 800130c:	f002 ffc7 	bl	800429e <HAL_TIM_PWM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001316:	f000 f999 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001322:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001326:	4619      	mov	r1, r3
 8001328:	4826      	ldr	r0, [pc, #152]	; (80013c4 <MX_TIM1_Init+0x150>)
 800132a:	f004 f82b 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001334:	f000 f98a 	bl	800164c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001338:	2360      	movs	r3, #96	; 0x60
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001344:	2300      	movs	r3, #0
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001350:	2300      	movs	r3, #0
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	4819      	ldr	r0, [pc, #100]	; (80013c4 <MX_TIM1_Init+0x150>)
 800135e:	f003 fa3d 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001368:	f000 f970 	bl	800164c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	2204      	movs	r2, #4
 8001372:	4619      	mov	r1, r3
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <MX_TIM1_Init+0x150>)
 8001376:	f003 fa31 	bl	80047dc <HAL_TIM_PWM_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001380:	f000 f964 	bl	800164c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4807      	ldr	r0, [pc, #28]	; (80013c4 <MX_TIM1_Init+0x150>)
 80013a8:	f004 f85a 	bl	8005460 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80013b2:	f000 f94b 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <MX_TIM1_Init+0x150>)
 80013b8:	f001 f9de 	bl	8002778 <HAL_TIM_MspPostInit>

}
 80013bc:	bf00      	nop
 80013be:	3758      	adds	r7, #88	; 0x58
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200002e8 	.word	0x200002e8
 80013c8:	40010000 	.word	0x40010000

080013cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	f107 0310 	add.w	r3, r7, #16
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e8:	4b20      	ldr	r3, [pc, #128]	; (800146c <MX_TIM2_Init+0xa0>)
 80013ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84 -1;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <MX_TIM2_Init+0xa0>)
 80013f2:	2253      	movs	r2, #83	; 0x53
 80013f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM2_Init+0xa0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff - 1;
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_TIM2_Init+0xa0>)
 80013fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001402:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM2_Init+0xa0>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_TIM2_Init+0xa0>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001410:	4816      	ldr	r0, [pc, #88]	; (800146c <MX_TIM2_Init+0xa0>)
 8001412:	f002 ffab 	bl	800436c <HAL_TIM_IC_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800141c:	f000 f916 	bl	800164c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4619      	mov	r1, r3
 800142e:	480f      	ldr	r0, [pc, #60]	; (800146c <MX_TIM2_Init+0xa0>)
 8001430:	f003 ffa8 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800143a:	f000 f907 	bl	800164c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001442:	2301      	movs	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2208      	movs	r2, #8
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM2_Init+0xa0>)
 8001456:	f003 f925 	bl	80046a4 <HAL_TIM_IC_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001460:	f000 f8f4 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000968 	.word	0x20000968

08001470 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <MX_USART1_UART_Init+0x50>)
 8001478:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800147c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001480:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 8001496:	220c      	movs	r2, #12
 8001498:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_USART1_UART_Init+0x4c>)
 80014a8:	f004 f840 	bl	800552c <HAL_UART_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014b2:	f000 f8cb 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000290 	.word	0x20000290
 80014c0:	40011000 	.word	0x40011000

080014c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_USART2_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART2_UART_Init+0x4c>)
 80014fc:	f004 f816 	bl	800552c <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f8a1 	bl	800164c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200009a8 	.word	0x200009a8
 8001514:	40004400 	.word	0x40004400

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <MX_GPIO_Init+0x120>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <MX_GPIO_Init+0x120>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b3e      	ldr	r3, [pc, #248]	; (8001638 <MX_GPIO_Init+0x120>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <MX_GPIO_Init+0x120>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a39      	ldr	r2, [pc, #228]	; (8001638 <MX_GPIO_Init+0x120>)
 8001554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <MX_GPIO_Init+0x120>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b33      	ldr	r3, [pc, #204]	; (8001638 <MX_GPIO_Init+0x120>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a32      	ldr	r2, [pc, #200]	; (8001638 <MX_GPIO_Init+0x120>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <MX_GPIO_Init+0x120>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <MX_GPIO_Init+0x120>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a2b      	ldr	r2, [pc, #172]	; (8001638 <MX_GPIO_Init+0x120>)
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <MX_GPIO_Init+0x120>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2103      	movs	r1, #3
 80015a2:	4826      	ldr	r0, [pc, #152]	; (800163c <MX_GPIO_Init+0x124>)
 80015a4:	f001 fd70 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2123      	movs	r1, #35	; 0x23
 80015ac:	4824      	ldr	r0, [pc, #144]	; (8001640 <MX_GPIO_Init+0x128>)
 80015ae:	f001 fd6b 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC_SR04_Output_GPIO_Port, HC_SR04_Output_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015b8:	4822      	ldr	r0, [pc, #136]	; (8001644 <MX_GPIO_Init+0x12c>)
 80015ba:	f001 fd65 	bl	8003088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015c4:	4b20      	ldr	r3, [pc, #128]	; (8001648 <MX_GPIO_Init+0x130>)
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	4619      	mov	r1, r3
 80015d2:	481a      	ldr	r0, [pc, #104]	; (800163c <MX_GPIO_Init+0x124>)
 80015d4:	f001 fbd6 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015d8:	2303      	movs	r3, #3
 80015da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015dc:	2301      	movs	r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4813      	ldr	r0, [pc, #76]	; (800163c <MX_GPIO_Init+0x124>)
 80015f0:	f001 fbc8 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 80015f4:	2323      	movs	r3, #35	; 0x23
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f8:	2301      	movs	r3, #1
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_GPIO_Init+0x128>)
 800160c:	f001 fbba 	bl	8002d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : HC_SR04_Output_Pin */
  GPIO_InitStruct.Pin = HC_SR04_Output_Pin;
 8001610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HC_SR04_Output_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	4619      	mov	r1, r3
 8001628:	4806      	ldr	r0, [pc, #24]	; (8001644 <MX_GPIO_Init+0x12c>)
 800162a:	f001 fbab 	bl	8002d84 <HAL_GPIO_Init>

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40020800 	.word	0x40020800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	10210000 	.word	0x10210000

0800164c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001652:	e7fe      	b.n	8001652 <Error_Handler+0x6>

08001654 <read_commands>:
#include "process_commands.h"

void read_commands(UART_HandleTypeDef* uart){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	command_count = 0;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <read_commands+0x68>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
	variable_count = 0;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <read_commands+0x6c>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

	while(1){
		if (HAL_UART_Receive(uart, commands[command_count], COMMAND_SIZE, 100) == HAL_OK){
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <read_commands+0x68>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <read_commands+0x70>)
 8001676:	1899      	adds	r1, r3, r2
 8001678:	2364      	movs	r3, #100	; 0x64
 800167a:	2214      	movs	r2, #20
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f003 ffa2 	bl	80055c6 <HAL_UART_Receive>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ef      	bne.n	8001668 <read_commands+0x14>
			if(strcmp(commands[command_count],COMMAND_END) == 0)
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <read_commands+0x68>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <read_commands+0x70>)
 8001696:	4413      	add	r3, r2
 8001698:	490b      	ldr	r1, [pc, #44]	; (80016c8 <read_commands+0x74>)
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe fd9c 	bl	80001d8 <strcmp>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d005      	beq.n	80016b2 <read_commands+0x5e>
				break;
			command_count++;
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <read_commands+0x68>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <read_commands+0x68>)
 80016ae:	6013      	str	r3, [r2, #0]
		if (HAL_UART_Receive(uart, commands[command_count], COMMAND_SIZE, 100) == HAL_OK){
 80016b0:	e7da      	b.n	8001668 <read_commands+0x14>
				break;
 80016b2:	bf00      	nop
		}
	}
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20005808 	.word	0x20005808
 80016c0:	20000288 	.word	0x20000288
 80016c4:	200009e8 	.word	0x200009e8
 80016c8:	08006230 	.word	0x08006230
 80016cc:	00000000 	.word	0x00000000

080016d0 <process_commands>:

void process_commands(){
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b098      	sub	sp, #96	; 0x60
 80016d4:	af00      	add	r7, sp, #0

	strcpy(delimeter," ");
 80016d6:	4ab8      	ldr	r2, [pc, #736]	; (80019b8 <process_commands+0x2e8>)
 80016d8:	4bb8      	ldr	r3, [pc, #736]	; (80019bc <process_commands+0x2ec>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	8013      	strh	r3, [r2, #0]

	for(int i=0;i<command_count;++i){
 80016de:	2300      	movs	r3, #0
 80016e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80016e2:	f000 beba 	b.w	800245a <process_commands+0xd8a>
		memset(loops_command,0,COMMAND_SIZE);
 80016e6:	2214      	movs	r2, #20
 80016e8:	2100      	movs	r1, #0
 80016ea:	48b5      	ldr	r0, [pc, #724]	; (80019c0 <process_commands+0x2f0>)
 80016ec:	f004 fc06 	bl	8005efc <memset>
		strcpy(loops_command,commands[i]);
 80016f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4ab2      	ldr	r2, [pc, #712]	; (80019c4 <process_commands+0x2f4>)
 80016fc:	4413      	add	r3, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	48af      	ldr	r0, [pc, #700]	; (80019c0 <process_commands+0x2f0>)
 8001702:	f004 fc03 	bl	8005f0c <strcpy>

		command = strtok(loops_command,delimeter);
 8001706:	49ac      	ldr	r1, [pc, #688]	; (80019b8 <process_commands+0x2e8>)
 8001708:	48ad      	ldr	r0, [pc, #692]	; (80019c0 <process_commands+0x2f0>)
 800170a:	f004 fc07 	bl	8005f1c <strtok>
 800170e:	4602      	mov	r2, r0
 8001710:	4bad      	ldr	r3, [pc, #692]	; (80019c8 <process_commands+0x2f8>)
 8001712:	601a      	str	r2, [r3, #0]
		// Forward
		if(strcmp(command,COMMAND_FORWARD) == 0){
 8001714:	4bac      	ldr	r3, [pc, #688]	; (80019c8 <process_commands+0x2f8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	49ac      	ldr	r1, [pc, #688]	; (80019cc <process_commands+0x2fc>)
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fd5c 	bl	80001d8 <strcmp>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 8122 	bne.w	800196c <process_commands+0x29c>
			int speed;
			parameter = strtok(NULL, delimeter);
 8001728:	49a3      	ldr	r1, [pc, #652]	; (80019b8 <process_commands+0x2e8>)
 800172a:	2000      	movs	r0, #0
 800172c:	f004 fbf6 	bl	8005f1c <strtok>
 8001730:	4602      	mov	r2, r0
 8001732:	4ba7      	ldr	r3, [pc, #668]	; (80019d0 <process_commands+0x300>)
 8001734:	601a      	str	r2, [r3, #0]
			if(isdigit(parameter[0])){
 8001736:	4ba6      	ldr	r3, [pc, #664]	; (80019d0 <process_commands+0x300>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	3b30      	subs	r3, #48	; 0x30
 800173e:	2b09      	cmp	r3, #9
 8001740:	d80e      	bhi.n	8001760 <process_commands+0x90>
				speed = atoi(parameter);
 8001742:	4ba3      	ldr	r3, [pc, #652]	; (80019d0 <process_commands+0x300>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f004 fbaa 	bl	8005ea0 <atoi>
 800174c:	65b8      	str	r0, [r7, #88]	; 0x58
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 800174e:	4ba1      	ldr	r3, [pc, #644]	; (80019d4 <process_commands+0x304>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 8001756:	4b9f      	ldr	r3, [pc, #636]	; (80019d4 <process_commands+0x304>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
 800175e:	e010      	b.n	8001782 <process_commands+0xb2>
			}
			else{
				variable *v2 = find_variable(parameter);
 8001760:	4b9b      	ldr	r3, [pc, #620]	; (80019d0 <process_commands+0x300>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 feeb 	bl	8002540 <find_variable>
 800176a:	60f8      	str	r0, [r7, #12]
				speed = v2->value;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	65bb      	str	r3, [r7, #88]	; 0x58
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 8001772:	4b98      	ldr	r3, [pc, #608]	; (80019d4 <process_commands+0x304>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001778:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 800177a:	4b96      	ldr	r3, [pc, #600]	; (80019d4 <process_commands+0x304>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001780:	639a      	str	r2, [r3, #56]	; 0x38
			}

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2101      	movs	r1, #1
 8001786:	4894      	ldr	r0, [pc, #592]	; (80019d8 <process_commands+0x308>)
 8001788:	f001 fc7e 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 800178c:	2201      	movs	r2, #1
 800178e:	2102      	movs	r1, #2
 8001790:	4891      	ldr	r0, [pc, #580]	; (80019d8 <process_commands+0x308>)
 8001792:	f001 fc79 	bl	8003088 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2101      	movs	r1, #1
 800179a:	4890      	ldr	r0, [pc, #576]	; (80019dc <process_commands+0x30c>)
 800179c:	f001 fc74 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2102      	movs	r1, #2
 80017a4:	488d      	ldr	r0, [pc, #564]	; (80019dc <process_commands+0x30c>)
 80017a6:	f001 fc6f 	bl	8003088 <HAL_GPIO_WritePin>

			parameter = strtok(NULL, delimeter);
 80017aa:	4983      	ldr	r1, [pc, #524]	; (80019b8 <process_commands+0x2e8>)
 80017ac:	2000      	movs	r0, #0
 80017ae:	f004 fbb5 	bl	8005f1c <strtok>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b86      	ldr	r3, [pc, #536]	; (80019d0 <process_commands+0x300>)
 80017b6:	601a      	str	r2, [r3, #0]
			// forward with 2 argument
			if (parameter != NULL){
 80017b8:	4b85      	ldr	r3, [pc, #532]	; (80019d0 <process_commands+0x300>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8649 	beq.w	8002454 <process_commands+0xd84>
				int param;
				if(isdigit(parameter[0])){
 80017c2:	4b83      	ldr	r3, [pc, #524]	; (80019d0 <process_commands+0x300>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	3b30      	subs	r3, #48	; 0x30
 80017ca:	2b09      	cmp	r3, #9
 80017cc:	d806      	bhi.n	80017dc <process_commands+0x10c>
					param = atoi(parameter);
 80017ce:	4b80      	ldr	r3, [pc, #512]	; (80019d0 <process_commands+0x300>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f004 fb64 	bl	8005ea0 <atoi>
 80017d8:	6578      	str	r0, [r7, #84]	; 0x54
 80017da:	e008      	b.n	80017ee <process_commands+0x11e>
				}
				else{
					variable *v2 = find_variable(parameter);
 80017dc:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <process_commands+0x300>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fead 	bl	8002540 <find_variable>
 80017e6:	60b8      	str	r0, [r7, #8]
					param = v2->value;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	657b      	str	r3, [r7, #84]	; 0x54
				}
				HAL_Delay(ROUND_TO_INT(DISTANCE_TO_MS2(param,(speed < 100 ? speed: 100))));
 80017ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f0:	2232      	movs	r2, #50	; 0x32
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fe4a 	bl	8000490 <__aeabi_i2d>
 80017fc:	4604      	mov	r4, r0
 80017fe:	460d      	mov	r5, r1
 8001800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001802:	2b63      	cmp	r3, #99	; 0x63
 8001804:	dc14      	bgt.n	8001830 <process_commands+0x160>
 8001806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001810:	ee17 0a90 	vmov	r0, s15
 8001814:	f7fe fe4e 	bl	80004b4 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	f04f 0000 	mov.w	r0, #0
 8001820:	496f      	ldr	r1, [pc, #444]	; (80019e0 <process_commands+0x310>)
 8001822:	f7fe ffc9 	bl	80007b8 <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	e002      	b.n	8001836 <process_commands+0x166>
 8001830:	f04f 0000 	mov.w	r0, #0
 8001834:	496b      	ldr	r1, [pc, #428]	; (80019e4 <process_commands+0x314>)
 8001836:	4622      	mov	r2, r4
 8001838:	462b      	mov	r3, r5
 800183a:	f7fe fe93 	bl	8000564 <__aeabi_dmul>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	4618      	mov	r0, r3
 8001844:	4621      	mov	r1, r4
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	f7ff f90f 	bl	8000a70 <__aeabi_dcmpge>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d038      	beq.n	80018ca <process_commands+0x1fa>
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	2232      	movs	r2, #50	; 0x32
 800185c:	fb02 f303 	mul.w	r3, r2, r3
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fe15 	bl	8000490 <__aeabi_i2d>
 8001866:	4604      	mov	r4, r0
 8001868:	460d      	mov	r5, r1
 800186a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800186c:	2b63      	cmp	r3, #99	; 0x63
 800186e:	dc14      	bgt.n	800189a <process_commands+0x1ca>
 8001870:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	ee17 0a90 	vmov	r0, s15
 800187e:	f7fe fe19 	bl	80004b4 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	f04f 0000 	mov.w	r0, #0
 800188a:	4955      	ldr	r1, [pc, #340]	; (80019e0 <process_commands+0x310>)
 800188c:	f7fe ff94 	bl	80007b8 <__aeabi_ddiv>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	e002      	b.n	80018a0 <process_commands+0x1d0>
 800189a:	f04f 0000 	mov.w	r0, #0
 800189e:	4951      	ldr	r1, [pc, #324]	; (80019e4 <process_commands+0x314>)
 80018a0:	4622      	mov	r2, r4
 80018a2:	462b      	mov	r3, r5
 80018a4:	f7fe fe5e 	bl	8000564 <__aeabi_dmul>
 80018a8:	4603      	mov	r3, r0
 80018aa:	460c      	mov	r4, r1
 80018ac:	4618      	mov	r0, r3
 80018ae:	4621      	mov	r1, r4
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b4c      	ldr	r3, [pc, #304]	; (80019e8 <process_commands+0x318>)
 80018b6:	f7fe fc9f 	bl	80001f8 <__adddf3>
 80018ba:	4603      	mov	r3, r0
 80018bc:	460c      	mov	r4, r1
 80018be:	4618      	mov	r0, r3
 80018c0:	4621      	mov	r1, r4
 80018c2:	f7ff f8e9 	bl	8000a98 <__aeabi_d2iz>
 80018c6:	4603      	mov	r3, r0
 80018c8:	e037      	b.n	800193a <process_commands+0x26a>
 80018ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018cc:	2232      	movs	r2, #50	; 0x32
 80018ce:	fb02 f303 	mul.w	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fddc 	bl	8000490 <__aeabi_i2d>
 80018d8:	4604      	mov	r4, r0
 80018da:	460d      	mov	r5, r1
 80018dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018de:	2b63      	cmp	r3, #99	; 0x63
 80018e0:	dc14      	bgt.n	800190c <process_commands+0x23c>
 80018e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ec:	ee17 0a90 	vmov	r0, s15
 80018f0:	f7fe fde0 	bl	80004b4 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	f04f 0000 	mov.w	r0, #0
 80018fc:	4938      	ldr	r1, [pc, #224]	; (80019e0 <process_commands+0x310>)
 80018fe:	f7fe ff5b 	bl	80007b8 <__aeabi_ddiv>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	e002      	b.n	8001912 <process_commands+0x242>
 800190c:	f04f 0000 	mov.w	r0, #0
 8001910:	4934      	ldr	r1, [pc, #208]	; (80019e4 <process_commands+0x314>)
 8001912:	4622      	mov	r2, r4
 8001914:	462b      	mov	r3, r5
 8001916:	f7fe fe25 	bl	8000564 <__aeabi_dmul>
 800191a:	4603      	mov	r3, r0
 800191c:	460c      	mov	r4, r1
 800191e:	4618      	mov	r0, r3
 8001920:	4621      	mov	r1, r4
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <process_commands+0x318>)
 8001928:	f7fe fc64 	bl	80001f4 <__aeabi_dsub>
 800192c:	4603      	mov	r3, r0
 800192e:	460c      	mov	r4, r1
 8001930:	4618      	mov	r0, r3
 8001932:	4621      	mov	r1, r4
 8001934:	f7ff f8b0 	bl	8000a98 <__aeabi_d2iz>
 8001938:	4603      	mov	r3, r0
 800193a:	4618      	mov	r0, r3
 800193c:	f001 f8ee 	bl	8002b1c <HAL_Delay>

				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001940:	2200      	movs	r2, #0
 8001942:	2101      	movs	r1, #1
 8001944:	4824      	ldr	r0, [pc, #144]	; (80019d8 <process_commands+0x308>)
 8001946:	f001 fb9f 	bl	8003088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	2102      	movs	r1, #2
 800194e:	4822      	ldr	r0, [pc, #136]	; (80019d8 <process_commands+0x308>)
 8001950:	f001 fb9a 	bl	8003088 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	2101      	movs	r1, #1
 8001958:	4820      	ldr	r0, [pc, #128]	; (80019dc <process_commands+0x30c>)
 800195a:	f001 fb95 	bl	8003088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2102      	movs	r1, #2
 8001962:	481e      	ldr	r0, [pc, #120]	; (80019dc <process_commands+0x30c>)
 8001964:	f001 fb90 	bl	8003088 <HAL_GPIO_WritePin>
 8001968:	f000 bd74 	b.w	8002454 <process_commands+0xd84>
			}
		}
		// backward
		else if(strcmp(command,COMMAND_BACKWARD) == 0){
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <process_commands+0x2f8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	491e      	ldr	r1, [pc, #120]	; (80019ec <process_commands+0x31c>)
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fc30 	bl	80001d8 <strcmp>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	f040 813e 	bne.w	8001bfc <process_commands+0x52c>
			int speed;
			parameter = strtok(NULL, delimeter);
 8001980:	490d      	ldr	r1, [pc, #52]	; (80019b8 <process_commands+0x2e8>)
 8001982:	2000      	movs	r0, #0
 8001984:	f004 faca 	bl	8005f1c <strtok>
 8001988:	4602      	mov	r2, r0
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <process_commands+0x300>)
 800198c:	601a      	str	r2, [r3, #0]

			if(isdigit(parameter[0])){
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <process_commands+0x300>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	3b30      	subs	r3, #48	; 0x30
 8001996:	2b09      	cmp	r3, #9
 8001998:	d82a      	bhi.n	80019f0 <process_commands+0x320>
				speed = atoi(parameter);
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <process_commands+0x300>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 fa7e 	bl	8005ea0 <atoi>
 80019a4:	6538      	str	r0, [r7, #80]	; 0x50
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <process_commands+0x304>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <process_commands+0x304>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019b4:	639a      	str	r2, [r3, #56]	; 0x38
 80019b6:	e02c      	b.n	8001a12 <process_commands+0x342>
 80019b8:	2000580c 	.word	0x2000580c
 80019bc:	08006244 	.word	0x08006244
 80019c0:	20000220 	.word	0x20000220
 80019c4:	200009e8 	.word	0x200009e8
 80019c8:	2000028c 	.word	0x2000028c
 80019cc:	08006248 	.word	0x08006248
 80019d0:	2000021c 	.word	0x2000021c
 80019d4:	200002e8 	.word	0x200002e8
 80019d8:	40020000 	.word	0x40020000
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40590000 	.word	0x40590000
 80019e4:	3ff00000 	.word	0x3ff00000
 80019e8:	3fe00000 	.word	0x3fe00000
 80019ec:	0800624c 	.word	0x0800624c
			}
			else{
				variable *v2 = find_variable(parameter);
 80019f0:	4bc9      	ldr	r3, [pc, #804]	; (8001d18 <process_commands+0x648>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fda3 	bl	8002540 <find_variable>
 80019fa:	6178      	str	r0, [r7, #20]
				speed = v2->value;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	653b      	str	r3, [r7, #80]	; 0x50
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,speed);
 8001a02:	4bc6      	ldr	r3, [pc, #792]	; (8001d1c <process_commands+0x64c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,speed);
 8001a0a:	4bc4      	ldr	r3, [pc, #784]	; (8001d1c <process_commands+0x64c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a10:	639a      	str	r2, [r3, #56]	; 0x38
			}

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001a12:	2201      	movs	r2, #1
 8001a14:	2101      	movs	r1, #1
 8001a16:	48c2      	ldr	r0, [pc, #776]	; (8001d20 <process_commands+0x650>)
 8001a18:	f001 fb36 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2102      	movs	r1, #2
 8001a20:	48bf      	ldr	r0, [pc, #764]	; (8001d20 <process_commands+0x650>)
 8001a22:	f001 fb31 	bl	8003088 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8001a26:	2201      	movs	r2, #1
 8001a28:	2101      	movs	r1, #1
 8001a2a:	48be      	ldr	r0, [pc, #760]	; (8001d24 <process_commands+0x654>)
 8001a2c:	f001 fb2c 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2102      	movs	r1, #2
 8001a34:	48bb      	ldr	r0, [pc, #748]	; (8001d24 <process_commands+0x654>)
 8001a36:	f001 fb27 	bl	8003088 <HAL_GPIO_WritePin>

			parameter = strtok(NULL, delimeter);
 8001a3a:	49bb      	ldr	r1, [pc, #748]	; (8001d28 <process_commands+0x658>)
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f004 fa6d 	bl	8005f1c <strtok>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4bb4      	ldr	r3, [pc, #720]	; (8001d18 <process_commands+0x648>)
 8001a46:	601a      	str	r2, [r3, #0]
			// backward with second argument
			if (parameter != NULL){
 8001a48:	4bb3      	ldr	r3, [pc, #716]	; (8001d18 <process_commands+0x648>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f000 8501 	beq.w	8002454 <process_commands+0xd84>
				int param;
				if(isdigit(parameter[0])){
 8001a52:	4bb1      	ldr	r3, [pc, #708]	; (8001d18 <process_commands+0x648>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	3b30      	subs	r3, #48	; 0x30
 8001a5a:	2b09      	cmp	r3, #9
 8001a5c:	d806      	bhi.n	8001a6c <process_commands+0x39c>
					param = atoi(parameter);
 8001a5e:	4bae      	ldr	r3, [pc, #696]	; (8001d18 <process_commands+0x648>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 fa1c 	bl	8005ea0 <atoi>
 8001a68:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001a6a:	e008      	b.n	8001a7e <process_commands+0x3ae>
				}
				else{
					variable *v2 = find_variable(parameter);
 8001a6c:	4baa      	ldr	r3, [pc, #680]	; (8001d18 <process_commands+0x648>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fd65 	bl	8002540 <find_variable>
 8001a76:	6138      	str	r0, [r7, #16]
					param = v2->value;
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
				}
				HAL_Delay(ROUND_TO_INT(DISTANCE_TO_MS2(param,(speed < 100 ? speed: 100))));
 8001a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a80:	2232      	movs	r2, #50	; 0x32
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd02 	bl	8000490 <__aeabi_i2d>
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	460d      	mov	r5, r1
 8001a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a92:	2b63      	cmp	r3, #99	; 0x63
 8001a94:	dc14      	bgt.n	8001ac0 <process_commands+0x3f0>
 8001a96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa0:	ee17 0a90 	vmov	r0, s15
 8001aa4:	f7fe fd06 	bl	80004b4 <__aeabi_f2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	f04f 0000 	mov.w	r0, #0
 8001ab0:	499e      	ldr	r1, [pc, #632]	; (8001d2c <process_commands+0x65c>)
 8001ab2:	f7fe fe81 	bl	80007b8 <__aeabi_ddiv>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	e002      	b.n	8001ac6 <process_commands+0x3f6>
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	499a      	ldr	r1, [pc, #616]	; (8001d30 <process_commands+0x660>)
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	462b      	mov	r3, r5
 8001aca:	f7fe fd4b 	bl	8000564 <__aeabi_dmul>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	f7fe ffc7 	bl	8000a70 <__aeabi_dcmpge>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d038      	beq.n	8001b5a <process_commands+0x48a>
 8001ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aea:	2232      	movs	r2, #50	; 0x32
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fccd 	bl	8000490 <__aeabi_i2d>
 8001af6:	4604      	mov	r4, r0
 8001af8:	460d      	mov	r5, r1
 8001afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001afc:	2b63      	cmp	r3, #99	; 0x63
 8001afe:	dc14      	bgt.n	8001b2a <process_commands+0x45a>
 8001b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0a:	ee17 0a90 	vmov	r0, s15
 8001b0e:	f7fe fcd1 	bl	80004b4 <__aeabi_f2d>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	f04f 0000 	mov.w	r0, #0
 8001b1a:	4984      	ldr	r1, [pc, #528]	; (8001d2c <process_commands+0x65c>)
 8001b1c:	f7fe fe4c 	bl	80007b8 <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	e002      	b.n	8001b30 <process_commands+0x460>
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	4980      	ldr	r1, [pc, #512]	; (8001d30 <process_commands+0x660>)
 8001b30:	4622      	mov	r2, r4
 8001b32:	462b      	mov	r3, r5
 8001b34:	f7fe fd16 	bl	8000564 <__aeabi_dmul>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	460c      	mov	r4, r1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	4621      	mov	r1, r4
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <process_commands+0x664>)
 8001b46:	f7fe fb57 	bl	80001f8 <__adddf3>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	460c      	mov	r4, r1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	4621      	mov	r1, r4
 8001b52:	f7fe ffa1 	bl	8000a98 <__aeabi_d2iz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	e037      	b.n	8001bca <process_commands+0x4fa>
 8001b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b5c:	2232      	movs	r2, #50	; 0x32
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fc94 	bl	8000490 <__aeabi_i2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
 8001b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b6e:	2b63      	cmp	r3, #99	; 0x63
 8001b70:	dc14      	bgt.n	8001b9c <process_commands+0x4cc>
 8001b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7c:	ee17 0a90 	vmov	r0, s15
 8001b80:	f7fe fc98 	bl	80004b4 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	f04f 0000 	mov.w	r0, #0
 8001b8c:	4967      	ldr	r1, [pc, #412]	; (8001d2c <process_commands+0x65c>)
 8001b8e:	f7fe fe13 	bl	80007b8 <__aeabi_ddiv>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	e002      	b.n	8001ba2 <process_commands+0x4d2>
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	4963      	ldr	r1, [pc, #396]	; (8001d30 <process_commands+0x660>)
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	f7fe fcdd 	bl	8000564 <__aeabi_dmul>
 8001baa:	4603      	mov	r3, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	4618      	mov	r0, r3
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	4b5f      	ldr	r3, [pc, #380]	; (8001d34 <process_commands+0x664>)
 8001bb8:	f7fe fb1c 	bl	80001f4 <__aeabi_dsub>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	460c      	mov	r4, r1
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	f7fe ff68 	bl	8000a98 <__aeabi_d2iz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 ffa6 	bl	8002b1c <HAL_Delay>

				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	4852      	ldr	r0, [pc, #328]	; (8001d20 <process_commands+0x650>)
 8001bd6:	f001 fa57 	bl	8003088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2102      	movs	r1, #2
 8001bde:	4850      	ldr	r0, [pc, #320]	; (8001d20 <process_commands+0x650>)
 8001be0:	f001 fa52 	bl	8003088 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2101      	movs	r1, #1
 8001be8:	484e      	ldr	r0, [pc, #312]	; (8001d24 <process_commands+0x654>)
 8001bea:	f001 fa4d 	bl	8003088 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	484c      	ldr	r0, [pc, #304]	; (8001d24 <process_commands+0x654>)
 8001bf4:	f001 fa48 	bl	8003088 <HAL_GPIO_WritePin>
 8001bf8:	f000 bc2c 	b.w	8002454 <process_commands+0xd84>
			}
		}
		else if(strcmp(command,COMMAND_RIGHT) == 0){
 8001bfc:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <process_commands+0x668>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	494e      	ldr	r1, [pc, #312]	; (8001d3c <process_commands+0x66c>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fae8 	bl	80001d8 <strcmp>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f040 80d1 	bne.w	8001db2 <process_commands+0x6e2>
			parameter = strtok(NULL, delimeter);
 8001c10:	4945      	ldr	r1, [pc, #276]	; (8001d28 <process_commands+0x658>)
 8001c12:	2000      	movs	r0, #0
 8001c14:	f004 f982 	bl	8005f1c <strtok>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b3f      	ldr	r3, [pc, #252]	; (8001d18 <process_commands+0x648>)
 8001c1c:	601a      	str	r2, [r3, #0]

			int param;
			if(isdigit(parameter[0])){
 8001c1e:	4b3e      	ldr	r3, [pc, #248]	; (8001d18 <process_commands+0x648>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	3b30      	subs	r3, #48	; 0x30
 8001c26:	2b09      	cmp	r3, #9
 8001c28:	d806      	bhi.n	8001c38 <process_commands+0x568>
				param = atoi(parameter);
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <process_commands+0x648>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f004 f936 	bl	8005ea0 <atoi>
 8001c34:	64b8      	str	r0, [r7, #72]	; 0x48
 8001c36:	e008      	b.n	8001c4a <process_commands+0x57a>
			}
			else{
				variable *v2 = find_variable(parameter);
 8001c38:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <process_commands+0x648>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fc7f 	bl	8002540 <find_variable>
 8001c42:	61b8      	str	r0, [r7, #24]
				param = v2->value;
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <process_commands+0x64c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2264      	movs	r2, #100	; 0x64
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <process_commands+0x64c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2264      	movs	r2, #100	; 0x64
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4830      	ldr	r0, [pc, #192]	; (8001d20 <process_commands+0x650>)
 8001c60:	f001 fa12 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2102      	movs	r1, #2
 8001c68:	482d      	ldr	r0, [pc, #180]	; (8001d20 <process_commands+0x650>)
 8001c6a:	f001 fa0d 	bl	8003088 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2101      	movs	r1, #1
 8001c72:	482c      	ldr	r0, [pc, #176]	; (8001d24 <process_commands+0x654>)
 8001c74:	f001 fa08 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2102      	movs	r1, #2
 8001c7c:	4829      	ldr	r0, [pc, #164]	; (8001d24 <process_commands+0x654>)
 8001c7e:	f001 fa03 	bl	8003088 <HAL_GPIO_WritePin>

			//HAL_Delay(param);
			HAL_Delay(ROUND_TO_INT(DEGREE_TO_MS(param)));
 8001c82:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c84:	f7fe fc04 	bl	8000490 <__aeabi_i2d>
 8001c88:	a31f      	add	r3, pc, #124	; (adr r3, 8001d08 <process_commands+0x638>)
 8001c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8e:	f7fe fd93 	bl	80007b8 <__aeabi_ddiv>
 8001c92:	4603      	mov	r3, r0
 8001c94:	460c      	mov	r4, r1
 8001c96:	4618      	mov	r0, r3
 8001c98:	4621      	mov	r1, r4
 8001c9a:	a31d      	add	r3, pc, #116	; (adr r3, 8001d10 <process_commands+0x640>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe faaa 	bl	80001f8 <__adddf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	460c      	mov	r4, r1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	4621      	mov	r1, r4
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	f7fe fedc 	bl	8000a70 <__aeabi_dcmpge>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d040      	beq.n	8001d40 <process_commands+0x670>
 8001cbe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001cc0:	f7fe fbe6 	bl	8000490 <__aeabi_i2d>
 8001cc4:	a310      	add	r3, pc, #64	; (adr r3, 8001d08 <process_commands+0x638>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f7fe fd75 	bl	80007b8 <__aeabi_ddiv>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	a30e      	add	r3, pc, #56	; (adr r3, 8001d10 <process_commands+0x640>)
 8001cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cdc:	f7fe fa8c 	bl	80001f8 <__adddf3>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <process_commands+0x664>)
 8001cee:	f7fe fa83 	bl	80001f8 <__adddf3>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	f7fe fecd 	bl	8000a98 <__aeabi_d2iz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	e03f      	b.n	8001d82 <process_commands+0x6b2>
 8001d02:	bf00      	nop
 8001d04:	f3af 8000 	nop.w
 8001d08:	62771890 	.word	0x62771890
 8001d0c:	3fa9c45a 	.word	0x3fa9c45a
 8001d10:	574a69b1 	.word	0x574a69b1
 8001d14:	40275555 	.word	0x40275555
 8001d18:	2000021c 	.word	0x2000021c
 8001d1c:	200002e8 	.word	0x200002e8
 8001d20:	40020000 	.word	0x40020000
 8001d24:	40020800 	.word	0x40020800
 8001d28:	2000580c 	.word	0x2000580c
 8001d2c:	40590000 	.word	0x40590000
 8001d30:	3ff00000 	.word	0x3ff00000
 8001d34:	3fe00000 	.word	0x3fe00000
 8001d38:	2000028c 	.word	0x2000028c
 8001d3c:	08006250 	.word	0x08006250
 8001d40:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d42:	f7fe fba5 	bl	8000490 <__aeabi_i2d>
 8001d46:	a3c0      	add	r3, pc, #768	; (adr r3, 8002048 <process_commands+0x978>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fd34 	bl	80007b8 <__aeabi_ddiv>
 8001d50:	4603      	mov	r3, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	4618      	mov	r0, r3
 8001d56:	4621      	mov	r1, r4
 8001d58:	a3bd      	add	r3, pc, #756	; (adr r3, 8002050 <process_commands+0x980>)
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	f7fe fa4b 	bl	80001f8 <__adddf3>
 8001d62:	4603      	mov	r3, r0
 8001d64:	460c      	mov	r4, r1
 8001d66:	4618      	mov	r0, r3
 8001d68:	4621      	mov	r1, r4
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4bba      	ldr	r3, [pc, #744]	; (8002058 <process_commands+0x988>)
 8001d70:	f7fe fa40 	bl	80001f4 <__aeabi_dsub>
 8001d74:	4603      	mov	r3, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	f7fe fe8c 	bl	8000a98 <__aeabi_d2iz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 feca 	bl	8002b1c <HAL_Delay>

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	48b3      	ldr	r0, [pc, #716]	; (800205c <process_commands+0x98c>)
 8001d8e:	f001 f97b 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2102      	movs	r1, #2
 8001d96:	48b1      	ldr	r0, [pc, #708]	; (800205c <process_commands+0x98c>)
 8001d98:	f001 f976 	bl	8003088 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2101      	movs	r1, #1
 8001da0:	48af      	ldr	r0, [pc, #700]	; (8002060 <process_commands+0x990>)
 8001da2:	f001 f971 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2102      	movs	r1, #2
 8001daa:	48ad      	ldr	r0, [pc, #692]	; (8002060 <process_commands+0x990>)
 8001dac:	f001 f96c 	bl	8003088 <HAL_GPIO_WritePin>
 8001db0:	e350      	b.n	8002454 <process_commands+0xd84>
		}
		else if(strcmp(command,COMMAND_LEFT) == 0){
 8001db2:	4bac      	ldr	r3, [pc, #688]	; (8002064 <process_commands+0x994>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	49ac      	ldr	r1, [pc, #688]	; (8002068 <process_commands+0x998>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fa0d 	bl	80001d8 <strcmp>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f040 80b2 	bne.w	8001f2a <process_commands+0x85a>
			parameter = strtok(NULL, delimeter);
 8001dc6:	49a9      	ldr	r1, [pc, #676]	; (800206c <process_commands+0x99c>)
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f004 f8a7 	bl	8005f1c <strtok>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4ba7      	ldr	r3, [pc, #668]	; (8002070 <process_commands+0x9a0>)
 8001dd2:	601a      	str	r2, [r3, #0]

			int param;
			if(isdigit(parameter[0])){
 8001dd4:	4ba6      	ldr	r3, [pc, #664]	; (8002070 <process_commands+0x9a0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	3b30      	subs	r3, #48	; 0x30
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d806      	bhi.n	8001dee <process_commands+0x71e>
				param = atoi(parameter);
 8001de0:	4ba3      	ldr	r3, [pc, #652]	; (8002070 <process_commands+0x9a0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 f85b 	bl	8005ea0 <atoi>
 8001dea:	6478      	str	r0, [r7, #68]	; 0x44
 8001dec:	e008      	b.n	8001e00 <process_commands+0x730>
			}
			else{
				variable *v2 = find_variable(parameter);
 8001dee:	4ba0      	ldr	r3, [pc, #640]	; (8002070 <process_commands+0x9a0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fba4 	bl	8002540 <find_variable>
 8001df8:	61f8      	str	r0, [r7, #28]
				param = v2->value;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	647b      	str	r3, [r7, #68]	; 0x44
			}

			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 8001e00:	4b9c      	ldr	r3, [pc, #624]	; (8002074 <process_commands+0x9a4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2264      	movs	r2, #100	; 0x64
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,100);
 8001e08:	4b9a      	ldr	r3, [pc, #616]	; (8002074 <process_commands+0x9a4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2264      	movs	r2, #100	; 0x64
 8001e0e:	639a      	str	r2, [r3, #56]	; 0x38

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2101      	movs	r1, #1
 8001e14:	4891      	ldr	r0, [pc, #580]	; (800205c <process_commands+0x98c>)
 8001e16:	f001 f937 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	488f      	ldr	r0, [pc, #572]	; (800205c <process_commands+0x98c>)
 8001e20:	f001 f932 	bl	8003088 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	2101      	movs	r1, #1
 8001e28:	488d      	ldr	r0, [pc, #564]	; (8002060 <process_commands+0x990>)
 8001e2a:	f001 f92d 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2102      	movs	r1, #2
 8001e32:	488b      	ldr	r0, [pc, #556]	; (8002060 <process_commands+0x990>)
 8001e34:	f001 f928 	bl	8003088 <HAL_GPIO_WritePin>

			HAL_Delay(ROUND_TO_INT(DEGREE_TO_MS(param)));
 8001e38:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e3a:	f7fe fb29 	bl	8000490 <__aeabi_i2d>
 8001e3e:	a382      	add	r3, pc, #520	; (adr r3, 8002048 <process_commands+0x978>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fcb8 	bl	80007b8 <__aeabi_ddiv>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	4621      	mov	r1, r4
 8001e50:	a37f      	add	r3, pc, #508	; (adr r3, 8002050 <process_commands+0x980>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe f9cf 	bl	80001f8 <__adddf3>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460c      	mov	r4, r1
 8001e5e:	4618      	mov	r0, r3
 8001e60:	4621      	mov	r1, r4
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
 8001e6a:	f7fe fe01 	bl	8000a70 <__aeabi_dcmpge>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d021      	beq.n	8001eb8 <process_commands+0x7e8>
 8001e74:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e76:	f7fe fb0b 	bl	8000490 <__aeabi_i2d>
 8001e7a:	a373      	add	r3, pc, #460	; (adr r3, 8002048 <process_commands+0x978>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fc9a 	bl	80007b8 <__aeabi_ddiv>
 8001e84:	4603      	mov	r3, r0
 8001e86:	460c      	mov	r4, r1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	a370      	add	r3, pc, #448	; (adr r3, 8002050 <process_commands+0x980>)
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f7fe f9b1 	bl	80001f8 <__adddf3>
 8001e96:	4603      	mov	r3, r0
 8001e98:	460c      	mov	r4, r1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b6d      	ldr	r3, [pc, #436]	; (8002058 <process_commands+0x988>)
 8001ea4:	f7fe f9a8 	bl	80001f8 <__adddf3>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	460c      	mov	r4, r1
 8001eac:	4618      	mov	r0, r3
 8001eae:	4621      	mov	r1, r4
 8001eb0:	f7fe fdf2 	bl	8000a98 <__aeabi_d2iz>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	e020      	b.n	8001efa <process_commands+0x82a>
 8001eb8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001eba:	f7fe fae9 	bl	8000490 <__aeabi_i2d>
 8001ebe:	a362      	add	r3, pc, #392	; (adr r3, 8002048 <process_commands+0x978>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f7fe fc78 	bl	80007b8 <__aeabi_ddiv>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	460c      	mov	r4, r1
 8001ecc:	4618      	mov	r0, r3
 8001ece:	4621      	mov	r1, r4
 8001ed0:	a35f      	add	r3, pc, #380	; (adr r3, 8002050 <process_commands+0x980>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe f98f 	bl	80001f8 <__adddf3>
 8001eda:	4603      	mov	r3, r0
 8001edc:	460c      	mov	r4, r1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	4621      	mov	r1, r4
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	4b5c      	ldr	r3, [pc, #368]	; (8002058 <process_commands+0x988>)
 8001ee8:	f7fe f984 	bl	80001f4 <__aeabi_dsub>
 8001eec:	4603      	mov	r3, r0
 8001eee:	460c      	mov	r4, r1
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	f7fe fdd0 	bl	8000a98 <__aeabi_d2iz>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fe0e 	bl	8002b1c <HAL_Delay>
			//HAL_Delay(param);

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	2101      	movs	r1, #1
 8001f04:	4855      	ldr	r0, [pc, #340]	; (800205c <process_commands+0x98c>)
 8001f06:	f001 f8bf 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	4853      	ldr	r0, [pc, #332]	; (800205c <process_commands+0x98c>)
 8001f10:	f001 f8ba 	bl	8003088 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2101      	movs	r1, #1
 8001f18:	4851      	ldr	r0, [pc, #324]	; (8002060 <process_commands+0x990>)
 8001f1a:	f001 f8b5 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2102      	movs	r1, #2
 8001f22:	484f      	ldr	r0, [pc, #316]	; (8002060 <process_commands+0x990>)
 8001f24:	f001 f8b0 	bl	8003088 <HAL_GPIO_WritePin>
 8001f28:	e294      	b.n	8002454 <process_commands+0xd84>
		}
		else if(strcmp(command,COMMAND_STOP) == 0){
 8001f2a:	4b4e      	ldr	r3, [pc, #312]	; (8002064 <process_commands+0x994>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4952      	ldr	r1, [pc, #328]	; (8002078 <process_commands+0x9a8>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe f951 	bl	80001d8 <strcmp>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d114      	bne.n	8001f66 <process_commands+0x896>

			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2101      	movs	r1, #1
 8001f40:	4846      	ldr	r0, [pc, #280]	; (800205c <process_commands+0x98c>)
 8001f42:	f001 f8a1 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4844      	ldr	r0, [pc, #272]	; (800205c <process_commands+0x98c>)
 8001f4c:	f001 f89c 	bl	8003088 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2101      	movs	r1, #1
 8001f54:	4842      	ldr	r0, [pc, #264]	; (8002060 <process_commands+0x990>)
 8001f56:	f001 f897 	bl	8003088 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4840      	ldr	r0, [pc, #256]	; (8002060 <process_commands+0x990>)
 8001f60:	f001 f892 	bl	8003088 <HAL_GPIO_WritePin>
 8001f64:	e276      	b.n	8002454 <process_commands+0xd84>
		}
		else if(strcmp(command,COMMAND_DELAY) == 0){
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <process_commands+0x994>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4944      	ldr	r1, [pc, #272]	; (800207c <process_commands+0x9ac>)
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe f933 	bl	80001d8 <strcmp>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d121      	bne.n	8001fbc <process_commands+0x8ec>
			parameter = strtok(NULL, delimeter);
 8001f78:	493c      	ldr	r1, [pc, #240]	; (800206c <process_commands+0x99c>)
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f003 ffce 	bl	8005f1c <strtok>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <process_commands+0x9a0>)
 8001f84:	601a      	str	r2, [r3, #0]
			int param;
			if(isdigit(parameter[0])){
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <process_commands+0x9a0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	3b30      	subs	r3, #48	; 0x30
 8001f8e:	2b09      	cmp	r3, #9
 8001f90:	d806      	bhi.n	8001fa0 <process_commands+0x8d0>
				param = atoi(parameter);
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <process_commands+0x9a0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 ff82 	bl	8005ea0 <atoi>
 8001f9c:	6438      	str	r0, [r7, #64]	; 0x40
 8001f9e:	e008      	b.n	8001fb2 <process_commands+0x8e2>
			}
			else{
				variable *v2 = find_variable(parameter);
 8001fa0:	4b33      	ldr	r3, [pc, #204]	; (8002070 <process_commands+0x9a0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 facb 	bl	8002540 <find_variable>
 8001faa:	6238      	str	r0, [r7, #32]
				param = v2->value;
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	643b      	str	r3, [r7, #64]	; 0x40
			}

			HAL_Delay(param);
 8001fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fdb1 	bl	8002b1c <HAL_Delay>
 8001fba:	e24b      	b.n	8002454 <process_commands+0xd84>
		}
		else if(strcmp(command,COMMAND_ASGN) == 0){
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <process_commands+0x994>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	492f      	ldr	r1, [pc, #188]	; (8002080 <process_commands+0x9b0>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe f908 	bl	80001d8 <strcmp>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 81d3 	bne.w	8002376 <process_commands+0xca6>

			parameter = strtok(NULL, delimeter);
 8001fd0:	4926      	ldr	r1, [pc, #152]	; (800206c <process_commands+0x99c>)
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f003 ffa2 	bl	8005f1c <strtok>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <process_commands+0x9a0>)
 8001fdc:	601a      	str	r2, [r3, #0]
			variable *v = find_variable(parameter);
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <process_commands+0x9a0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 faac 	bl	8002540 <find_variable>
 8001fe8:	62f8      	str	r0, [r7, #44]	; 0x2c

			int num1,num2;
			parameter = strtok(NULL, delimeter);
 8001fea:	4920      	ldr	r1, [pc, #128]	; (800206c <process_commands+0x99c>)
 8001fec:	2000      	movs	r0, #0
 8001fee:	f003 ff95 	bl	8005f1c <strtok>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <process_commands+0x9a0>)
 8001ff6:	601a      	str	r2, [r3, #0]


			if(isdigit(parameter[0])){
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <process_commands+0x9a0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	3b30      	subs	r3, #48	; 0x30
 8002000:	2b09      	cmp	r3, #9
 8002002:	d808      	bhi.n	8002016 <process_commands+0x946>
				v->value = atoi(parameter);
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <process_commands+0x9a0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f003 ff49 	bl	8005ea0 <atoi>
 800200e:	4602      	mov	r2, r0
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	e21e      	b.n	8002454 <process_commands+0xd84>

			}
			else{

				if(strcmp(parameter,COMMAND_PLUS) == 0){
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <process_commands+0x9a0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	491a      	ldr	r1, [pc, #104]	; (8002084 <process_commands+0x9b4>)
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe f8db 	bl	80001d8 <strcmp>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d12f      	bne.n	8002088 <process_commands+0x9b8>

					find_parameters(parameter, &num1, &num2);
 8002028:	4b11      	ldr	r3, [pc, #68]	; (8002070 <process_commands+0x9a0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	463a      	mov	r2, r7
 800202e:	1d39      	adds	r1, r7, #4
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fa47 	bl	80024c4 <find_parameters>
					v->value = num1 + num2;
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	441a      	add	r2, r3
 800203c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	e208      	b.n	8002454 <process_commands+0xd84>
 8002042:	bf00      	nop
 8002044:	f3af 8000 	nop.w
 8002048:	62771890 	.word	0x62771890
 800204c:	3fa9c45a 	.word	0x3fa9c45a
 8002050:	574a69b1 	.word	0x574a69b1
 8002054:	40275555 	.word	0x40275555
 8002058:	3fe00000 	.word	0x3fe00000
 800205c:	40020000 	.word	0x40020000
 8002060:	40020800 	.word	0x40020800
 8002064:	2000028c 	.word	0x2000028c
 8002068:	08006254 	.word	0x08006254
 800206c:	2000580c 	.word	0x2000580c
 8002070:	2000021c 	.word	0x2000021c
 8002074:	200002e8 	.word	0x200002e8
 8002078:	08006258 	.word	0x08006258
 800207c:	0800625c 	.word	0x0800625c
 8002080:	08006264 	.word	0x08006264
 8002084:	08006268 	.word	0x08006268
				}
				else if(strcmp(parameter,COMMAND_MINUS) == 0){
 8002088:	4ba6      	ldr	r3, [pc, #664]	; (8002324 <process_commands+0xc54>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	49a6      	ldr	r1, [pc, #664]	; (8002328 <process_commands+0xc58>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f8a2 	bl	80001d8 <strcmp>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10c      	bne.n	80020b4 <process_commands+0x9e4>

					find_parameters(parameter, &num1, &num2);
 800209a:	4ba2      	ldr	r3, [pc, #648]	; (8002324 <process_commands+0xc54>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	463a      	mov	r2, r7
 80020a0:	1d39      	adds	r1, r7, #4
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fa0e 	bl	80024c4 <find_parameters>
					v->value = num1 - num2;
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	1ad2      	subs	r2, r2, r3
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	e1cf      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_MULT) == 0){
 80020b4:	4b9b      	ldr	r3, [pc, #620]	; (8002324 <process_commands+0xc54>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	499c      	ldr	r1, [pc, #624]	; (800232c <process_commands+0xc5c>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f88c 	bl	80001d8 <strcmp>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10d      	bne.n	80020e2 <process_commands+0xa12>

					find_parameters(parameter, &num1, &num2);
 80020c6:	4b97      	ldr	r3, [pc, #604]	; (8002324 <process_commands+0xc54>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	463a      	mov	r2, r7
 80020cc:	1d39      	adds	r1, r7, #4
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f9f8 	bl	80024c4 <find_parameters>
					v->value = num1 * num2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	fb02 f203 	mul.w	r2, r2, r3
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	e1b8      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_DIV) == 0){
 80020e2:	4b90      	ldr	r3, [pc, #576]	; (8002324 <process_commands+0xc54>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4992      	ldr	r1, [pc, #584]	; (8002330 <process_commands+0xc60>)
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe f875 	bl	80001d8 <strcmp>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10d      	bne.n	8002110 <process_commands+0xa40>

					find_parameters(parameter, &num1, &num2);
 80020f4:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <process_commands+0xc54>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	463a      	mov	r2, r7
 80020fa:	1d39      	adds	r1, r7, #4
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 f9e1 	bl	80024c4 <find_parameters>
					v->value = num1 / num2;
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	fb92 f2f3 	sdiv	r2, r2, r3
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	e1a1      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_EQ) == 0){
 8002110:	4b84      	ldr	r3, [pc, #528]	; (8002324 <process_commands+0xc54>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4987      	ldr	r1, [pc, #540]	; (8002334 <process_commands+0xc64>)
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe f85e 	bl	80001d8 <strcmp>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d111      	bne.n	8002146 <process_commands+0xa76>

					find_parameters(parameter, &num1, &num2);
 8002122:	4b80      	ldr	r3, [pc, #512]	; (8002324 <process_commands+0xc54>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	463a      	mov	r2, r7
 8002128:	1d39      	adds	r1, r7, #4
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f9ca 	bl	80024c4 <find_parameters>
					v->value = num1 == num2;
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	e186      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_NE) == 0){
 8002146:	4b77      	ldr	r3, [pc, #476]	; (8002324 <process_commands+0xc54>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	497b      	ldr	r1, [pc, #492]	; (8002338 <process_commands+0xc68>)
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe f843 	bl	80001d8 <strcmp>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d111      	bne.n	800217c <process_commands+0xaac>

					find_parameters(parameter, &num1, &num2);
 8002158:	4b72      	ldr	r3, [pc, #456]	; (8002324 <process_commands+0xc54>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	463a      	mov	r2, r7
 800215e:	1d39      	adds	r1, r7, #4
 8002160:	4618      	mov	r0, r3
 8002162:	f000 f9af 	bl	80024c4 <find_parameters>
					v->value = num1 != num2;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	e16b      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_LE) == 0){
 800217c:	4b69      	ldr	r3, [pc, #420]	; (8002324 <process_commands+0xc54>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	496e      	ldr	r1, [pc, #440]	; (800233c <process_commands+0xc6c>)
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f828 	bl	80001d8 <strcmp>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d111      	bne.n	80021b2 <process_commands+0xae2>

					find_parameters(parameter, &num1, &num2);
 800218e:	4b65      	ldr	r3, [pc, #404]	; (8002324 <process_commands+0xc54>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	463a      	mov	r2, r7
 8002194:	1d39      	adds	r1, r7, #4
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f994 	bl	80024c4 <find_parameters>
					v->value = num1 <= num2;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	bfd4      	ite	le
 80021a4:	2301      	movle	r3, #1
 80021a6:	2300      	movgt	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	e150      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_GE) == 0){
 80021b2:	4b5c      	ldr	r3, [pc, #368]	; (8002324 <process_commands+0xc54>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4962      	ldr	r1, [pc, #392]	; (8002340 <process_commands+0xc70>)
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe f80d 	bl	80001d8 <strcmp>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d111      	bne.n	80021e8 <process_commands+0xb18>

					find_parameters(parameter, &num1, &num2);
 80021c4:	4b57      	ldr	r3, [pc, #348]	; (8002324 <process_commands+0xc54>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	463a      	mov	r2, r7
 80021ca:	1d39      	adds	r1, r7, #4
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f979 	bl	80024c4 <find_parameters>
					v->value = num1 >= num2;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	bfac      	ite	ge
 80021da:	2301      	movge	r3, #1
 80021dc:	2300      	movlt	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	e135      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_GT) == 0){
 80021e8:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <process_commands+0xc54>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4955      	ldr	r1, [pc, #340]	; (8002344 <process_commands+0xc74>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fd fff2 	bl	80001d8 <strcmp>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d111      	bne.n	800221e <process_commands+0xb4e>

					find_parameters(parameter, &num1, &num2);
 80021fa:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <process_commands+0xc54>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	463a      	mov	r2, r7
 8002200:	1d39      	adds	r1, r7, #4
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f95e 	bl	80024c4 <find_parameters>
					v->value = num1 > num2;
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	bfcc      	ite	gt
 8002210:	2301      	movgt	r3, #1
 8002212:	2300      	movle	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	60da      	str	r2, [r3, #12]
 800221c:	e11a      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_LT) == 0){
 800221e:	4b41      	ldr	r3, [pc, #260]	; (8002324 <process_commands+0xc54>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4949      	ldr	r1, [pc, #292]	; (8002348 <process_commands+0xc78>)
 8002224:	4618      	mov	r0, r3
 8002226:	f7fd ffd7 	bl	80001d8 <strcmp>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d111      	bne.n	8002254 <process_commands+0xb84>

					find_parameters(parameter, &num1, &num2);
 8002230:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <process_commands+0xc54>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	463a      	mov	r2, r7
 8002236:	1d39      	adds	r1, r7, #4
 8002238:	4618      	mov	r0, r3
 800223a:	f000 f943 	bl	80024c4 <find_parameters>
					v->value = num1 < num2;
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	bfb4      	ite	lt
 8002246:	2301      	movlt	r3, #1
 8002248:	2300      	movge	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	e0ff      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_LOR) == 0){
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <process_commands+0xc54>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	493c      	ldr	r1, [pc, #240]	; (800234c <process_commands+0xc7c>)
 800225a:	4618      	mov	r0, r3
 800225c:	f7fd ffbc 	bl	80001d8 <strcmp>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d112      	bne.n	800228c <process_commands+0xbbc>

					find_parameters(parameter, &num1, &num2);
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <process_commands+0xc54>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	463a      	mov	r2, r7
 800226c:	1d39      	adds	r1, r7, #4
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f928 	bl	80024c4 <find_parameters>
					v->value = num1 || num2;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <process_commands+0xbb0>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <process_commands+0xbb4>
 8002280:	2201      	movs	r2, #1
 8002282:	e000      	b.n	8002286 <process_commands+0xbb6>
 8002284:	2200      	movs	r2, #0
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	e0e3      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_LAND) == 0){
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <process_commands+0xc54>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	492f      	ldr	r1, [pc, #188]	; (8002350 <process_commands+0xc80>)
 8002292:	4618      	mov	r0, r3
 8002294:	f7fd ffa0 	bl	80001d8 <strcmp>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d112      	bne.n	80022c4 <process_commands+0xbf4>

					find_parameters(parameter, &num1, &num2);
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <process_commands+0xc54>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	463a      	mov	r2, r7
 80022a4:	1d39      	adds	r1, r7, #4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f90c 	bl	80024c4 <find_parameters>
					v->value = num1 && num2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <process_commands+0xbec>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <process_commands+0xbec>
 80022b8:	2201      	movs	r2, #1
 80022ba:	e000      	b.n	80022be <process_commands+0xbee>
 80022bc:	2200      	movs	r2, #0
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	e0c7      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_MOD) == 0){
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <process_commands+0xc54>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4922      	ldr	r1, [pc, #136]	; (8002354 <process_commands+0xc84>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fd ff84 	bl	80001d8 <strcmp>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d110      	bne.n	80022f8 <process_commands+0xc28>

					find_parameters(parameter, &num1, &num2);
 80022d6:	4b13      	ldr	r3, [pc, #76]	; (8002324 <process_commands+0xc54>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	463a      	mov	r2, r7
 80022dc:	1d39      	adds	r1, r7, #4
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f8f0 	bl	80024c4 <find_parameters>
					v->value = num1 % num2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80022ec:	fb02 f201 	mul.w	r2, r2, r1
 80022f0:	1a9a      	subs	r2, r3, r2
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	e0ad      	b.n	8002454 <process_commands+0xd84>
				}
				else if(strcmp(parameter,COMMAND_METER) == 0){
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <process_commands+0xc54>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4916      	ldr	r1, [pc, #88]	; (8002358 <process_commands+0xc88>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fd ff6a 	bl	80001d8 <strcmp>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d12a      	bne.n	8002360 <process_commands+0xc90>
					HCSR04_Read();
 800230a:	f7fe fdd9 	bl	8000ec0 <HCSR04_Read>
					HAL_Delay(10);
 800230e:	200a      	movs	r0, #10
 8002310:	f000 fc04 	bl	8002b1c <HAL_Delay>

					int dis = Distance;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <process_commands+0xc8c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	627b      	str	r3, [r7, #36]	; 0x24
					v->value = dis;
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	60da      	str	r2, [r3, #12]
 8002320:	e098      	b.n	8002454 <process_commands+0xd84>
 8002322:	bf00      	nop
 8002324:	2000021c 	.word	0x2000021c
 8002328:	0800626c 	.word	0x0800626c
 800232c:	08006270 	.word	0x08006270
 8002330:	08006274 	.word	0x08006274
 8002334:	08006278 	.word	0x08006278
 8002338:	0800627c 	.word	0x0800627c
 800233c:	08006280 	.word	0x08006280
 8002340:	08006284 	.word	0x08006284
 8002344:	08006288 	.word	0x08006288
 8002348:	0800628c 	.word	0x0800628c
 800234c:	08006290 	.word	0x08006290
 8002350:	08006294 	.word	0x08006294
 8002354:	08006298 	.word	0x08006298
 8002358:	0800629c 	.word	0x0800629c
 800235c:	20000208 	.word	0x20000208
				}
				else{
					variable *v2 = find_variable(parameter);
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <process_commands+0xdc8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f8eb 	bl	8002540 <find_variable>
 800236a:	62b8      	str	r0, [r7, #40]	; 0x28
					v->value = v2->value;
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	e06e      	b.n	8002454 <process_commands+0xd84>
				}
			}

		}
		else if(strcmp(command,COMMAND_IF) == 0){
 8002376:	4b49      	ldr	r3, [pc, #292]	; (800249c <process_commands+0xdcc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4949      	ldr	r1, [pc, #292]	; (80024a0 <process_commands+0xdd0>)
 800237c:	4618      	mov	r0, r3
 800237e:	f7fd ff2b 	bl	80001d8 <strcmp>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d132      	bne.n	80023ee <process_commands+0xd1e>
			parameter = strtok(NULL, delimeter);
 8002388:	4946      	ldr	r1, [pc, #280]	; (80024a4 <process_commands+0xdd4>)
 800238a:	2000      	movs	r0, #0
 800238c:	f003 fdc6 	bl	8005f1c <strtok>
 8002390:	4602      	mov	r2, r0
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <process_commands+0xdc8>)
 8002394:	601a      	str	r2, [r3, #0]
			if(strcmp(parameter,"not") == 0){
 8002396:	4b40      	ldr	r3, [pc, #256]	; (8002498 <process_commands+0xdc8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4943      	ldr	r1, [pc, #268]	; (80024a8 <process_commands+0xdd8>)
 800239c:	4618      	mov	r0, r3
 800239e:	f7fd ff1b 	bl	80001d8 <strcmp>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d114      	bne.n	80023d2 <process_commands+0xd02>
				parameter = strtok(NULL, delimeter);
 80023a8:	493e      	ldr	r1, [pc, #248]	; (80024a4 <process_commands+0xdd4>)
 80023aa:	2000      	movs	r0, #0
 80023ac:	f003 fdb6 	bl	8005f1c <strtok>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <process_commands+0xdc8>)
 80023b4:	601a      	str	r2, [r3, #0]
				variable *v2 = find_variable(parameter);
 80023b6:	4b38      	ldr	r3, [pc, #224]	; (8002498 <process_commands+0xdc8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f8c0 	bl	8002540 <find_variable>
 80023c0:	6338      	str	r0, [r7, #48]	; 0x30
				if(v2->value != 0)
 80023c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d044      	beq.n	8002454 <process_commands+0xd84>
					i++;
 80023ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023cc:	3301      	adds	r3, #1
 80023ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023d0:	e040      	b.n	8002454 <process_commands+0xd84>
			}
			else{
				variable *v2 = find_variable(parameter);
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <process_commands+0xdc8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 f8b2 	bl	8002540 <find_variable>
 80023dc:	6378      	str	r0, [r7, #52]	; 0x34
				if(v2->value == 0)
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d136      	bne.n	8002454 <process_commands+0xd84>
					i++;
 80023e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023e8:	3301      	adds	r3, #1
 80023ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023ec:	e032      	b.n	8002454 <process_commands+0xd84>
			}

		}
		// jump to given labels index
		else if(strcmp(command,COMMAND_GOTO) == 0){
 80023ee:	4b2b      	ldr	r3, [pc, #172]	; (800249c <process_commands+0xdcc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	492e      	ldr	r1, [pc, #184]	; (80024ac <process_commands+0xddc>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fd feef 	bl	80001d8 <strcmp>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d129      	bne.n	8002454 <process_commands+0xd84>
			parameter = strtok(NULL, delimeter);
 8002400:	4928      	ldr	r1, [pc, #160]	; (80024a4 <process_commands+0xdd4>)
 8002402:	2000      	movs	r0, #0
 8002404:	f003 fd8a 	bl	8005f1c <strtok>
 8002408:	4602      	mov	r2, r0
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <process_commands+0xdc8>)
 800240c:	601a      	str	r2, [r3, #0]
			char *temp;
			for(int j=0;j<command_count;++j){
 800240e:	2300      	movs	r3, #0
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002412:	e01a      	b.n	800244a <process_commands+0xd7a>
				temp = strtok(commands[j],":");
 8002414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4a24      	ldr	r2, [pc, #144]	; (80024b0 <process_commands+0xde0>)
 8002420:	4413      	add	r3, r2
 8002422:	4924      	ldr	r1, [pc, #144]	; (80024b4 <process_commands+0xde4>)
 8002424:	4618      	mov	r0, r3
 8002426:	f003 fd79 	bl	8005f1c <strtok>
 800242a:	63b8      	str	r0, [r7, #56]	; 0x38
				if(strcmp(temp,parameter) == 0){
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <process_commands+0xdc8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002434:	f7fd fed0 	bl	80001d8 <strcmp>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d102      	bne.n	8002444 <process_commands+0xd74>
					i = j;
 800243e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002440:	65fb      	str	r3, [r7, #92]	; 0x5c

					break;
 8002442:	e007      	b.n	8002454 <process_commands+0xd84>
			for(int j=0;j<command_count;++j){
 8002444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002446:	3301      	adds	r3, #1
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244a:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <process_commands+0xde8>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002450:	429a      	cmp	r2, r3
 8002452:	dbdf      	blt.n	8002414 <process_commands+0xd44>
	for(int i=0;i<command_count;++i){
 8002454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002456:	3301      	adds	r3, #1
 8002458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <process_commands+0xde8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002460:	429a      	cmp	r2, r3
 8002462:	f6ff a940 	blt.w	80016e6 <process_commands+0x16>
			}
		}
	}

	// stop motors
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	2101      	movs	r1, #1
 800246a:	4814      	ldr	r0, [pc, #80]	; (80024bc <process_commands+0xdec>)
 800246c:	f000 fe0c 	bl	8003088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8002470:	2200      	movs	r2, #0
 8002472:	2102      	movs	r1, #2
 8002474:	4811      	ldr	r0, [pc, #68]	; (80024bc <process_commands+0xdec>)
 8002476:	f000 fe07 	bl	8003088 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800247a:	2200      	movs	r2, #0
 800247c:	2101      	movs	r1, #1
 800247e:	4810      	ldr	r0, [pc, #64]	; (80024c0 <process_commands+0xdf0>)
 8002480:	f000 fe02 	bl	8003088 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8002484:	2200      	movs	r2, #0
 8002486:	2102      	movs	r1, #2
 8002488:	480d      	ldr	r0, [pc, #52]	; (80024c0 <process_commands+0xdf0>)
 800248a:	f000 fdfd 	bl	8003088 <HAL_GPIO_WritePin>
}
 800248e:	bf00      	nop
 8002490:	3760      	adds	r7, #96	; 0x60
 8002492:	46bd      	mov	sp, r7
 8002494:	bdb0      	pop	{r4, r5, r7, pc}
 8002496:	bf00      	nop
 8002498:	2000021c 	.word	0x2000021c
 800249c:	2000028c 	.word	0x2000028c
 80024a0:	080062a0 	.word	0x080062a0
 80024a4:	2000580c 	.word	0x2000580c
 80024a8:	080062a4 	.word	0x080062a4
 80024ac:	080062a8 	.word	0x080062a8
 80024b0:	200009e8 	.word	0x200009e8
 80024b4:	080062b0 	.word	0x080062b0
 80024b8:	20005808 	.word	0x20005808
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020800 	.word	0x40020800

080024c4 <find_parameters>:
// parse input and find 2 parameter
// if parameter is a variable name return its value
void find_parameters(char* parameter,int * num1,int* num2){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
	parameter = strtok(NULL, delimeter);
 80024d0:	491a      	ldr	r1, [pc, #104]	; (800253c <find_parameters+0x78>)
 80024d2:	2000      	movs	r0, #0
 80024d4:	f003 fd22 	bl	8005f1c <strtok>
 80024d8:	60f8      	str	r0, [r7, #12]
	if(isdigit(parameter[0])){
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	3b30      	subs	r3, #48	; 0x30
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d806      	bhi.n	80024f2 <find_parameters+0x2e>
		*num1 = atoi(parameter);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f003 fcdb 	bl	8005ea0 <atoi>
 80024ea:	4602      	mov	r2, r0
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e007      	b.n	8002502 <find_parameters+0x3e>
	}
	else{
		variable *v2 = find_variable(parameter);
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f000 f824 	bl	8002540 <find_variable>
 80024f8:	6178      	str	r0, [r7, #20]
		*num1 = v2->value;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	601a      	str	r2, [r3, #0]
	}

	parameter = strtok(NULL, delimeter);
 8002502:	490e      	ldr	r1, [pc, #56]	; (800253c <find_parameters+0x78>)
 8002504:	2000      	movs	r0, #0
 8002506:	f003 fd09 	bl	8005f1c <strtok>
 800250a:	60f8      	str	r0, [r7, #12]
	if(isdigit(parameter[0])){
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3b30      	subs	r3, #48	; 0x30
 8002512:	2b09      	cmp	r3, #9
 8002514:	d806      	bhi.n	8002524 <find_parameters+0x60>
		*num2 = atoi(parameter);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f003 fcc2 	bl	8005ea0 <atoi>
 800251c:	4602      	mov	r2, r0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
	}
	else{
		variable *v2 = find_variable(parameter);
		*num2 = v2->value;
	}
}
 8002522:	e007      	b.n	8002534 <find_parameters+0x70>
		variable *v2 = find_variable(parameter);
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f80b 	bl	8002540 <find_variable>
 800252a:	6138      	str	r0, [r7, #16]
		*num2 = v2->value;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	601a      	str	r2, [r3, #0]
}
 8002534:	bf00      	nop
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	2000580c 	.word	0x2000580c

08002540 <find_variable>:
// find variable according to given name
// if variable is not exist create it.
variable* find_variable(char* name){
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

	for(int i=0;i<variable_count;++i){
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	e012      	b.n	8002574 <find_variable+0x34>
		if(strcmp(variables[i].id,name) == 0 )
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <find_variable+0x70>)
 8002554:	4413      	add	r3, r2
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd fe3d 	bl	80001d8 <strcmp>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <find_variable+0x2e>
			return &variables[i];
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	011b      	lsls	r3, r3, #4
 8002568:	4a11      	ldr	r2, [pc, #68]	; (80025b0 <find_variable+0x70>)
 800256a:	4413      	add	r3, r2
 800256c:	e01b      	b.n	80025a6 <find_variable+0x66>
	for(int i=0;i<variable_count;++i){
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3301      	adds	r3, #1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <find_variable+0x74>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	429a      	cmp	r2, r3
 800257c:	dbe7      	blt.n	800254e <find_variable+0xe>
	}
	strcpy(variables[variable_count].id,name);
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <find_variable+0x74>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <find_variable+0x70>)
 8002586:	4413      	add	r3, r2
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	f003 fcbe 	bl	8005f0c <strcpy>
	variable_count++;
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <find_variable+0x74>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <find_variable+0x74>)
 8002598:	6013      	str	r3, [r2, #0]
	return &variables[variable_count-1];
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <find_variable+0x74>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3b01      	subs	r3, #1
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4a03      	ldr	r2, [pc, #12]	; (80025b0 <find_variable+0x70>)
 80025a4:	4413      	add	r3, r2
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000328 	.word	0x20000328
 80025b4:	20000288 	.word	0x20000288

080025b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_MspInit+0x4c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c6:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <HAL_MspInit+0x4c>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	; 0x44
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_MspInit+0x4c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	603b      	str	r3, [r7, #0]
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <HAL_MspInit+0x4c>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <HAL_MspInit+0x4c>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_MspInit+0x4c>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025f6:	2007      	movs	r0, #7
 80025f8:	f000 fb82 	bl	8002d00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800

08002608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	60da      	str	r2, [r3, #12]
 800261e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a19      	ldr	r2, [pc, #100]	; (800268c <HAL_I2C_MspInit+0x84>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d12b      	bne.n	8002682 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	4b18      	ldr	r3, [pc, #96]	; (8002690 <HAL_I2C_MspInit+0x88>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a17      	ldr	r2, [pc, #92]	; (8002690 <HAL_I2C_MspInit+0x88>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <HAL_I2C_MspInit+0x88>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002646:	23c0      	movs	r3, #192	; 0xc0
 8002648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800264a:	2312      	movs	r3, #18
 800264c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800264e:	2301      	movs	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002652:	2303      	movs	r3, #3
 8002654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002656:	2304      	movs	r3, #4
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	480c      	ldr	r0, [pc, #48]	; (8002694 <HAL_I2C_MspInit+0x8c>)
 8002662:	f000 fb8f 	bl	8002d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_I2C_MspInit+0x88>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <HAL_I2C_MspInit+0x88>)
 8002670:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_I2C_MspInit+0x88>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002682:	bf00      	nop
 8002684:	3728      	adds	r7, #40	; 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40005400 	.word	0x40005400
 8002690:	40023800 	.word	0x40023800
 8002694:	40020400 	.word	0x40020400

08002698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <HAL_TIM_Base_MspInit+0x3c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d10d      	bne.n	80026c6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_TIM_Base_MspInit+0x40>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <HAL_TIM_Base_MspInit+0x40>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <HAL_TIM_Base_MspInit+0x40>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fc:	d134      	bne.n	8002768 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_TIM_IC_MspInit+0x94>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <HAL_TIM_IC_MspInit+0x94>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b18      	ldr	r3, [pc, #96]	; (8002770 <HAL_TIM_IC_MspInit+0x94>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <HAL_TIM_IC_MspInit+0x94>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <HAL_TIM_IC_MspInit+0x94>)
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_TIM_IC_MspInit+0x94>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002748:	2301      	movs	r3, #1
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4619      	mov	r1, r3
 8002752:	4808      	ldr	r0, [pc, #32]	; (8002774 <HAL_TIM_IC_MspInit+0x98>)
 8002754:	f000 fb16 	bl	8002d84 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	201c      	movs	r0, #28
 800275e:	f000 fada 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002762:	201c      	movs	r0, #28
 8002764:	f000 faf3 	bl	8002d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002768:	bf00      	nop
 800276a:	3728      	adds	r7, #40	; 0x28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	40020400 	.word	0x40020400

08002778 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <HAL_TIM_MspPostInit+0x68>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d11e      	bne.n	80027d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_TIM_MspPostInit+0x6c>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a10      	ldr	r2, [pc, #64]	; (80027e4 <HAL_TIM_MspPostInit+0x6c>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_TIM_MspPostInit+0x6c>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027bc:	2302      	movs	r3, #2
 80027be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027c8:	2301      	movs	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	4619      	mov	r1, r3
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <HAL_TIM_MspPostInit+0x70>)
 80027d4:	f000 fad6 	bl	8002d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027d8:	bf00      	nop
 80027da:	3720      	adds	r7, #32
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40020000 	.word	0x40020000

080027ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	; 0x30
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f4:	f107 031c 	add.w	r3, r7, #28
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a32      	ldr	r2, [pc, #200]	; (80028d4 <HAL_UART_MspInit+0xe8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d12d      	bne.n	800286a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <HAL_UART_MspInit+0xec>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a30      	ldr	r2, [pc, #192]	; (80028d8 <HAL_UART_MspInit+0xec>)
 8002818:	f043 0310 	orr.w	r3, r3, #16
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <HAL_UART_MspInit+0xec>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <HAL_UART_MspInit+0xec>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <HAL_UART_MspInit+0xec>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <HAL_UART_MspInit+0xec>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002846:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800284a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002858:	2307      	movs	r3, #7
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	481e      	ldr	r0, [pc, #120]	; (80028dc <HAL_UART_MspInit+0xf0>)
 8002864:	f000 fa8e 	bl	8002d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002868:	e030      	b.n	80028cc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <HAL_UART_MspInit+0xf4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d12b      	bne.n	80028cc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_UART_MspInit+0xec>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_UART_MspInit+0xec>)
 800287e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002882:	6413      	str	r3, [r2, #64]	; 0x40
 8002884:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <HAL_UART_MspInit+0xec>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_UART_MspInit+0xec>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <HAL_UART_MspInit+0xec>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6313      	str	r3, [r2, #48]	; 0x30
 80028a0:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_UART_MspInit+0xec>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80028ac:	230c      	movs	r3, #12
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b8:	2303      	movs	r3, #3
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028bc:	2307      	movs	r3, #7
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <HAL_UART_MspInit+0xf0>)
 80028c8:	f000 fa5c 	bl	8002d84 <HAL_GPIO_Init>
}
 80028cc:	bf00      	nop
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40011000 	.word	0x40011000
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	40004400 	.word	0x40004400

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <NMI_Handler+0x4>

080028ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <HardFault_Handler+0x4>

080028f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <MemManage_Handler+0x4>

080028f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <BusFault_Handler+0x4>

080028fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <UsageFault_Handler+0x4>

08002902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002930:	f000 f8d4 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800293c:	4802      	ldr	r0, [pc, #8]	; (8002948 <TIM2_IRQHandler+0x10>)
 800293e:	f001 fda9 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000968 	.word	0x20000968

0800294c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002954:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <_sbrk+0x5c>)
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <_sbrk+0x60>)
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <_sbrk+0x64>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <_sbrk+0x64>)
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <_sbrk+0x68>)
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	429a      	cmp	r2, r3
 800297a:	d207      	bcs.n	800298c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800297c:	f003 fa94 	bl	8005ea8 <__errno>
 8002980:	4602      	mov	r2, r0
 8002982:	230c      	movs	r3, #12
 8002984:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	e009      	b.n	80029a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <_sbrk+0x64>)
 800299c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20020000 	.word	0x20020000
 80029ac:	00000400 	.word	0x00000400
 80029b0:	200001f8 	.word	0x200001f8
 80029b4:	20005818 	.word	0x20005818

080029b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <SystemInit+0x28>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <SystemInit+0x28>)
 80029c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <SystemInit+0x28>)
 80029ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d2:	609a      	str	r2, [r3, #8]
#endif
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ea:	e003      	b.n	80029f4 <LoopCopyDataInit>

080029ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029f2:	3104      	adds	r1, #4

080029f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029f4:	480b      	ldr	r0, [pc, #44]	; (8002a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029fc:	d3f6      	bcc.n	80029ec <CopyDataInit>
  ldr  r2, =_sbss
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a00:	e002      	b.n	8002a08 <LoopFillZerobss>

08002a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a04:	f842 3b04 	str.w	r3, [r2], #4

08002a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a0c:	d3f9      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a0e:	f7ff ffd3 	bl	80029b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f003 fa4f 	bl	8005eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a16:	f7fe fb57 	bl	80010c8 <main>
  bx  lr    
 8002a1a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002a20:	080063e8 	.word	0x080063e8
  ldr  r0, =_sdata
 8002a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a28:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002a2c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8002a30:	20005818 	.word	0x20005818

08002a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC_IRQHandler>
	...

08002a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_Init+0x40>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_Init+0x40>)
 8002a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_Init+0x40>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <HAL_Init+0x40>)
 8002a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <HAL_Init+0x40>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_Init+0x40>)
 8002a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a60:	2003      	movs	r0, #3
 8002a62:	f000 f94d 	bl	8002d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f000 f808 	bl	8002a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a6c:	f7ff fda4 	bl	80025b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x54>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x58>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 f965 	bl	8002d6a <HAL_SYSTICK_Config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00e      	b.n	8002ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b0f      	cmp	r3, #15
 8002aae:	d80a      	bhi.n	8002ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f000 f92d 	bl	8002d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002abc:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <HAL_InitTick+0x5c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000008 	.word	0x20000008
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x20>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_IncTick+0x24>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <HAL_IncTick+0x24>)
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000008 	.word	0x20000008
 8002b00:	20005810 	.word	0x20005810

08002b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetTick+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20005810 	.word	0x20005810

08002b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff ffee 	bl	8002b04 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d005      	beq.n	8002b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_Delay+0x40>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b42:	bf00      	nop
 8002b44:	f7ff ffde 	bl	8002b04 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f7      	bhi.n	8002b44 <HAL_Delay+0x28>
  {
  }
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000008 	.word	0x20000008

08002b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b92:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	60d3      	str	r3, [r2, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	f003 0307 	and.w	r3, r3, #7
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db0b      	blt.n	8002bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <__NVIC_EnableIRQ+0x38>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2001      	movs	r0, #1
 8002be6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000e100 	.word	0xe000e100

08002c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	db0a      	blt.n	8002c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <__NVIC_SetPriority+0x4c>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	440b      	add	r3, r1
 8002c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c28:	e00a      	b.n	8002c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <__NVIC_SetPriority+0x50>)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f1c3 0307 	rsb	r3, r3, #7
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	bf28      	it	cs
 8002c72:	2304      	movcs	r3, #4
 8002c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d902      	bls.n	8002c84 <NVIC_EncodePriority+0x30>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3b03      	subs	r3, #3
 8002c82:	e000      	b.n	8002c86 <NVIC_EncodePriority+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	401a      	ands	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	4313      	orrs	r3, r2
         );
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ccc:	d301      	bcc.n	8002cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00f      	b.n	8002cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <SysTick_Config+0x40>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cda:	210f      	movs	r1, #15
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	f7ff ff8e 	bl	8002c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <SysTick_Config+0x40>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <SysTick_Config+0x40>)
 8002cec:	2207      	movs	r2, #7
 8002cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	e000e010 	.word	0xe000e010

08002d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff29 	bl	8002b60 <__NVIC_SetPriorityGrouping>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d28:	f7ff ff3e 	bl	8002ba8 <__NVIC_GetPriorityGrouping>
 8002d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff ff8e 	bl	8002c54 <NVIC_EncodePriority>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff5d 	bl	8002c00 <__NVIC_SetPriority>
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff31 	bl	8002bc4 <__NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ffa2 	bl	8002cbc <SysTick_Config>
 8002d78:	4603      	mov	r3, r0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b089      	sub	sp, #36	; 0x24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	e159      	b.n	8003054 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002da0:	2201      	movs	r2, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	f040 8148 	bne.w	800304e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d00b      	beq.n	8002dde <HAL_GPIO_Init+0x5a>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d007      	beq.n	8002dde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dd2:	2b11      	cmp	r3, #17
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b12      	cmp	r3, #18
 8002ddc:	d130      	bne.n	8002e40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	2203      	movs	r2, #3
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e14:	2201      	movs	r2, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 0201 	and.w	r2, r3, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0xfc>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d123      	bne.n	8002ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	08da      	lsrs	r2, r3, #3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3208      	adds	r2, #8
 8002e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	220f      	movs	r2, #15
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	691a      	ldr	r2, [r3, #16]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	08da      	lsrs	r2, r3, #3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3208      	adds	r2, #8
 8002ec2:	69b9      	ldr	r1, [r7, #24]
 8002ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 0203 	and.w	r2, r3, #3
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 80a2 	beq.w	800304e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	4b56      	ldr	r3, [pc, #344]	; (8003068 <HAL_GPIO_Init+0x2e4>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4a55      	ldr	r2, [pc, #340]	; (8003068 <HAL_GPIO_Init+0x2e4>)
 8002f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f18:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1a:	4b53      	ldr	r3, [pc, #332]	; (8003068 <HAL_GPIO_Init+0x2e4>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f26:	4a51      	ldr	r2, [pc, #324]	; (800306c <HAL_GPIO_Init+0x2e8>)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	220f      	movs	r2, #15
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a48      	ldr	r2, [pc, #288]	; (8003070 <HAL_GPIO_Init+0x2ec>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x202>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a47      	ldr	r2, [pc, #284]	; (8003074 <HAL_GPIO_Init+0x2f0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x1fe>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a46      	ldr	r2, [pc, #280]	; (8003078 <HAL_GPIO_Init+0x2f4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x1fa>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a45      	ldr	r2, [pc, #276]	; (800307c <HAL_GPIO_Init+0x2f8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x1f6>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a44      	ldr	r2, [pc, #272]	; (8003080 <HAL_GPIO_Init+0x2fc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x1f2>
 8002f72:	2304      	movs	r3, #4
 8002f74:	e008      	b.n	8002f88 <HAL_GPIO_Init+0x204>
 8002f76:	2307      	movs	r3, #7
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x204>
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e004      	b.n	8002f88 <HAL_GPIO_Init+0x204>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e002      	b.n	8002f88 <HAL_GPIO_Init+0x204>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_GPIO_Init+0x204>
 8002f86:	2300      	movs	r3, #0
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f002 0203 	and.w	r2, r2, #3
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	4093      	lsls	r3, r2
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f98:	4934      	ldr	r1, [pc, #208]	; (800306c <HAL_GPIO_Init+0x2e8>)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa6:	4b37      	ldr	r3, [pc, #220]	; (8003084 <HAL_GPIO_Init+0x300>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fca:	4a2e      	ldr	r2, [pc, #184]	; (8003084 <HAL_GPIO_Init+0x300>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <HAL_GPIO_Init+0x300>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff4:	4a23      	ldr	r2, [pc, #140]	; (8003084 <HAL_GPIO_Init+0x300>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ffa:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_GPIO_Init+0x300>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800301e:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_GPIO_Init+0x300>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003024:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_GPIO_Init+0x300>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003048:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <HAL_GPIO_Init+0x300>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	f67f aea2 	bls.w	8002da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800305c:	bf00      	nop
 800305e:	3724      	adds	r7, #36	; 0x24
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	40023800 	.word	0x40023800
 800306c:	40013800 	.word	0x40013800
 8003070:	40020000 	.word	0x40020000
 8003074:	40020400 	.word	0x40020400
 8003078:	40020800 	.word	0x40020800
 800307c:	40020c00 	.word	0x40020c00
 8003080:	40021000 	.word	0x40021000
 8003084:	40013c00 	.word	0x40013c00

08003088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
 8003094:	4613      	mov	r3, r2
 8003096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003098:	787b      	ldrb	r3, [r7, #1]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309e:	887a      	ldrh	r2, [r7, #2]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030a4:	e003      	b.n	80030ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	041a      	lsls	r2, r3, #16
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	619a      	str	r2, [r3, #24]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
	...

080030bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e11f      	b.n	800330e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fa90 	bl	8002608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800310e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800311e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003120:	f001 f846 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8003124:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4a7b      	ldr	r2, [pc, #492]	; (8003318 <HAL_I2C_Init+0x25c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d807      	bhi.n	8003140 <HAL_I2C_Init+0x84>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a7a      	ldr	r2, [pc, #488]	; (800331c <HAL_I2C_Init+0x260>)
 8003134:	4293      	cmp	r3, r2
 8003136:	bf94      	ite	ls
 8003138:	2301      	movls	r3, #1
 800313a:	2300      	movhi	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e006      	b.n	800314e <HAL_I2C_Init+0x92>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a77      	ldr	r2, [pc, #476]	; (8003320 <HAL_I2C_Init+0x264>)
 8003144:	4293      	cmp	r3, r2
 8003146:	bf94      	ite	ls
 8003148:	2301      	movls	r3, #1
 800314a:	2300      	movhi	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0db      	b.n	800330e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4a72      	ldr	r2, [pc, #456]	; (8003324 <HAL_I2C_Init+0x268>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	0c9b      	lsrs	r3, r3, #18
 8003160:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a64      	ldr	r2, [pc, #400]	; (8003318 <HAL_I2C_Init+0x25c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d802      	bhi.n	8003190 <HAL_I2C_Init+0xd4>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	3301      	adds	r3, #1
 800318e:	e009      	b.n	80031a4 <HAL_I2C_Init+0xe8>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	4a63      	ldr	r2, [pc, #396]	; (8003328 <HAL_I2C_Init+0x26c>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	099b      	lsrs	r3, r3, #6
 80031a2:	3301      	adds	r3, #1
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4956      	ldr	r1, [pc, #344]	; (8003318 <HAL_I2C_Init+0x25c>)
 80031c0:	428b      	cmp	r3, r1
 80031c2:	d80d      	bhi.n	80031e0 <HAL_I2C_Init+0x124>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e59      	subs	r1, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	2b04      	cmp	r3, #4
 80031da:	bf38      	it	cc
 80031dc:	2304      	movcc	r3, #4
 80031de:	e04f      	b.n	8003280 <HAL_I2C_Init+0x1c4>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d111      	bne.n	800320c <HAL_I2C_Init+0x150>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e58      	subs	r0, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	440b      	add	r3, r1
 80031f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fa:	3301      	adds	r3, #1
 80031fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf0c      	ite	eq
 8003204:	2301      	moveq	r3, #1
 8003206:	2300      	movne	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e012      	b.n	8003232 <HAL_I2C_Init+0x176>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1e58      	subs	r0, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	0099      	lsls	r1, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_Init+0x17e>
 8003236:	2301      	movs	r3, #1
 8003238:	e022      	b.n	8003280 <HAL_I2C_Init+0x1c4>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10e      	bne.n	8003260 <HAL_I2C_Init+0x1a4>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1e58      	subs	r0, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	460b      	mov	r3, r1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	440b      	add	r3, r1
 8003250:	fbb0 f3f3 	udiv	r3, r0, r3
 8003254:	3301      	adds	r3, #1
 8003256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800325a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325e:	e00f      	b.n	8003280 <HAL_I2C_Init+0x1c4>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1e58      	subs	r0, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	0099      	lsls	r1, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	fbb0 f3f3 	udiv	r3, r0, r3
 8003276:	3301      	adds	r3, #1
 8003278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	6809      	ldr	r1, [r1, #0]
 8003284:	4313      	orrs	r3, r2
 8003286:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69da      	ldr	r2, [r3, #28]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6911      	ldr	r1, [r2, #16]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68d2      	ldr	r2, [r2, #12]
 80032ba:	4311      	orrs	r1, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	000186a0 	.word	0x000186a0
 800331c:	001e847f 	.word	0x001e847f
 8003320:	003d08ff 	.word	0x003d08ff
 8003324:	431bde83 	.word	0x431bde83
 8003328:	10624dd3 	.word	0x10624dd3

0800332c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af02      	add	r7, sp, #8
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	461a      	mov	r2, r3
 8003338:	460b      	mov	r3, r1
 800333a:	817b      	strh	r3, [r7, #10]
 800333c:	4613      	mov	r3, r2
 800333e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003340:	f7ff fbe0 	bl	8002b04 <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b20      	cmp	r3, #32
 8003350:	f040 80e0 	bne.w	8003514 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2319      	movs	r3, #25
 800335a:	2201      	movs	r2, #1
 800335c:	4970      	ldr	r1, [pc, #448]	; (8003520 <HAL_I2C_Master_Transmit+0x1f4>)
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 f964 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800336a:	2302      	movs	r3, #2
 800336c:	e0d3      	b.n	8003516 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_I2C_Master_Transmit+0x50>
 8003378:	2302      	movs	r3, #2
 800337a:	e0cc      	b.n	8003516 <HAL_I2C_Master_Transmit+0x1ea>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b01      	cmp	r3, #1
 8003390:	d007      	beq.n	80033a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0201 	orr.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2221      	movs	r2, #33	; 0x21
 80033b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2210      	movs	r2, #16
 80033be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	893a      	ldrh	r2, [r7, #8]
 80033d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a50      	ldr	r2, [pc, #320]	; (8003524 <HAL_I2C_Master_Transmit+0x1f8>)
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033e4:	8979      	ldrh	r1, [r7, #10]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f89c 	bl	8003528 <I2C_MasterRequestWrite>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e08d      	b.n	8003516 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003410:	e066      	b.n	80034e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	6a39      	ldr	r1, [r7, #32]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f9de 	bl	80037d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00d      	beq.n	800343e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	2b04      	cmp	r3, #4
 8003428:	d107      	bne.n	800343a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003438:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06b      	b.n	8003516 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	1c5a      	adds	r2, r3, #1
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11b      	bne.n	80034b4 <HAL_I2C_Master_Transmit+0x188>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003480:	2b00      	cmp	r3, #0
 8003482:	d017      	beq.n	80034b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	6a39      	ldr	r1, [r7, #32]
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f9ce 	bl	800385a <I2C_WaitOnBTFFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d107      	bne.n	80034dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e01a      	b.n	8003516 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d194      	bne.n	8003412 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2220      	movs	r2, #32
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	00100002 	.word	0x00100002
 8003524:	ffff0000 	.word	0xffff0000

08003528 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	460b      	mov	r3, r1
 8003536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d006      	beq.n	8003552 <I2C_MasterRequestWrite+0x2a>
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d003      	beq.n	8003552 <I2C_MasterRequestWrite+0x2a>
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003550:	d108      	bne.n	8003564 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e00b      	b.n	800357c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	2b12      	cmp	r3, #18
 800356a:	d107      	bne.n	800357c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800357a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f84f 	bl	800362c <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00d      	beq.n	80035b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a2:	d103      	bne.n	80035ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e035      	b.n	800361c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b8:	d108      	bne.n	80035cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ba:	897b      	ldrh	r3, [r7, #10]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	e01b      	b.n	8003604 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035cc:	897b      	ldrh	r3, [r7, #10]
 80035ce:	11db      	asrs	r3, r3, #7
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 0306 	and.w	r3, r3, #6
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f063 030f 	orn	r3, r3, #15
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	490e      	ldr	r1, [pc, #56]	; (8003624 <I2C_MasterRequestWrite+0xfc>)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f875 	bl	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e010      	b.n	800361c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4907      	ldr	r1, [pc, #28]	; (8003628 <I2C_MasterRequestWrite+0x100>)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f865 	bl	80036da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	00010008 	.word	0x00010008
 8003628:	00010002 	.word	0x00010002

0800362c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	4613      	mov	r3, r2
 800363a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800363c:	e025      	b.n	800368a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d021      	beq.n	800368a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003646:	f7ff fa5d 	bl	8002b04 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d302      	bcc.n	800365c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d116      	bne.n	800368a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e023      	b.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b01      	cmp	r3, #1
 8003692:	d10d      	bne.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	43da      	mvns	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4013      	ands	r3, r2
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	e00c      	b.n	80036ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d0b6      	beq.n	800363e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036e8:	e051      	b.n	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f8:	d123      	bne.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003708:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003712:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e046      	b.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d021      	beq.n	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7ff f9db 	bl	8002b04 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d116      	bne.n	800378e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f043 0220 	orr.w	r2, r3, #32
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e020      	b.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d10c      	bne.n	80037b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4013      	ands	r3, r2
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e00b      	b.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	43da      	mvns	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	4013      	ands	r3, r2
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf14      	ite	ne
 80037c4:	2301      	movne	r3, #1
 80037c6:	2300      	moveq	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d18d      	bne.n	80036ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037e4:	e02d      	b.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f878 	bl	80038dc <I2C_IsAcknowledgeFailed>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e02d      	b.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d021      	beq.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7ff f981 	bl	8002b04 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d116      	bne.n	8003842 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e007      	b.n	8003852 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384c:	2b80      	cmp	r3, #128	; 0x80
 800384e:	d1ca      	bne.n	80037e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	60b9      	str	r1, [r7, #8]
 8003864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003866:	e02d      	b.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f837 	bl	80038dc <I2C_IsAcknowledgeFailed>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e02d      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d021      	beq.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7ff f940 	bl	8002b04 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d116      	bne.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e007      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d1ca      	bne.n	8003868 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d11b      	bne.n	800392c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e25b      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d075      	beq.n	8003a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395a:	4ba3      	ldr	r3, [pc, #652]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b04      	cmp	r3, #4
 8003964:	d00c      	beq.n	8003980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003966:	4ba0      	ldr	r3, [pc, #640]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800396e:	2b08      	cmp	r3, #8
 8003970:	d112      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4b9d      	ldr	r3, [pc, #628]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397e:	d10b      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	4b99      	ldr	r3, [pc, #612]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d05b      	beq.n	8003a44 <HAL_RCC_OscConfig+0x108>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d157      	bne.n	8003a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e236      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x74>
 80039a2:	4b91      	ldr	r3, [pc, #580]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a90      	ldr	r2, [pc, #576]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e01d      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x98>
 80039ba:	4b8b      	ldr	r3, [pc, #556]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a8a      	ldr	r2, [pc, #552]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b88      	ldr	r3, [pc, #544]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a87      	ldr	r2, [pc, #540]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039d4:	4b84      	ldr	r3, [pc, #528]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a83      	ldr	r2, [pc, #524]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b81      	ldr	r3, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a80      	ldr	r2, [pc, #512]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7ff f886 	bl	8002b04 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7ff f882 	bl	8002b04 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e1fb      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b76      	ldr	r3, [pc, #472]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0xc0>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7ff f872 	bl	8002b04 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a24:	f7ff f86e 	bl	8002b04 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1e7      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	4b6c      	ldr	r3, [pc, #432]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0xe8>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d063      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a52:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5e:	4b62      	ldr	r3, [pc, #392]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6a:	4b5f      	ldr	r3, [pc, #380]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d116      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	4b5c      	ldr	r3, [pc, #368]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e1bb      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8e:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4952      	ldr	r1, [pc, #328]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	e03a      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aac:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <HAL_RCC_OscConfig+0x2b0>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7ff f827 	bl	8002b04 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aba:	f7ff f823 	bl	8002b04 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e19c      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	4b46      	ldr	r3, [pc, #280]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b43      	ldr	r3, [pc, #268]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4940      	ldr	r1, [pc, #256]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	e015      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aee:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <HAL_RCC_OscConfig+0x2b0>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7ff f806 	bl	8002b04 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afc:	f7ff f802 	bl	8002b04 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e17b      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d030      	beq.n	8003b88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d016      	beq.n	8003b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2e:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <HAL_RCC_OscConfig+0x2b4>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fe ffe6 	bl	8002b04 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b3c:	f7fe ffe2 	bl	8002b04 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e15b      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x200>
 8003b5a:	e015      	b.n	8003b88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_RCC_OscConfig+0x2b4>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fe ffcf 	bl	8002b04 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fe ffcb 	bl	8002b04 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e144      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f0      	bne.n	8003b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80a0 	beq.w	8003cd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb6:	4b0c      	ldr	r3, [pc, #48]	; (8003be8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_OscConfig+0x2b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d121      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <HAL_RCC_OscConfig+0x2b8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a07      	ldr	r2, [pc, #28]	; (8003bf4 <HAL_RCC_OscConfig+0x2b8>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bde:	f7fe ff91 	bl	8002b04 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be4:	e011      	b.n	8003c0a <HAL_RCC_OscConfig+0x2ce>
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	42470000 	.word	0x42470000
 8003bf0:	42470e80 	.word	0x42470e80
 8003bf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7fe ff84 	bl	8002b04 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e0fd      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0a:	4b81      	ldr	r3, [pc, #516]	; (8003e10 <HAL_RCC_OscConfig+0x4d4>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d106      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2f0>
 8003c1e:	4b7d      	ldr	r3, [pc, #500]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a7c      	ldr	r2, [pc, #496]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2a:	e01c      	b.n	8003c66 <HAL_RCC_OscConfig+0x32a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	d10c      	bne.n	8003c4e <HAL_RCC_OscConfig+0x312>
 8003c34:	4b77      	ldr	r3, [pc, #476]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a76      	ldr	r2, [pc, #472]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c3a:	f043 0304 	orr.w	r3, r3, #4
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c40:	4b74      	ldr	r3, [pc, #464]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a73      	ldr	r2, [pc, #460]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4c:	e00b      	b.n	8003c66 <HAL_RCC_OscConfig+0x32a>
 8003c4e:	4b71      	ldr	r3, [pc, #452]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	4a70      	ldr	r2, [pc, #448]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5a:	4b6e      	ldr	r3, [pc, #440]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a6d      	ldr	r2, [pc, #436]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c60:	f023 0304 	bic.w	r3, r3, #4
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d015      	beq.n	8003c9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6e:	f7fe ff49 	bl	8002b04 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c74:	e00a      	b.n	8003c8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c76:	f7fe ff45 	bl	8002b04 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e0bc      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c8c:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ee      	beq.n	8003c76 <HAL_RCC_OscConfig+0x33a>
 8003c98:	e014      	b.n	8003cc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9a:	f7fe ff33 	bl	8002b04 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fe ff2f 	bl	8002b04 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e0a6      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb8:	4b56      	ldr	r3, [pc, #344]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1ee      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cca:	4b52      	ldr	r3, [pc, #328]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4a51      	ldr	r2, [pc, #324]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8092 	beq.w	8003e04 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ce0:	4b4c      	ldr	r3, [pc, #304]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d05c      	beq.n	8003da6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d141      	bne.n	8003d78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf4:	4b48      	ldr	r3, [pc, #288]	; (8003e18 <HAL_RCC_OscConfig+0x4dc>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7fe ff03 	bl	8002b04 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d02:	f7fe feff 	bl	8002b04 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e078      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d14:	4b3f      	ldr	r3, [pc, #252]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69da      	ldr	r2, [r3, #28]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	019b      	lsls	r3, r3, #6
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	041b      	lsls	r3, r3, #16
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	061b      	lsls	r3, r3, #24
 8003d44:	4933      	ldr	r1, [pc, #204]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d4a:	4b33      	ldr	r3, [pc, #204]	; (8003e18 <HAL_RCC_OscConfig+0x4dc>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fe fed8 	bl	8002b04 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fe fed4 	bl	8002b04 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e04d      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d6a:	4b2a      	ldr	r3, [pc, #168]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x41c>
 8003d76:	e045      	b.n	8003e04 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_RCC_OscConfig+0x4dc>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fe fec1 	bl	8002b04 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d86:	f7fe febd 	bl	8002b04 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e036      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d98:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f0      	bne.n	8003d86 <HAL_RCC_OscConfig+0x44a>
 8003da4:	e02e      	b.n	8003e04 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e029      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_RCC_OscConfig+0x4d8>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d11c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d115      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dda:	4013      	ands	r3, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10d      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d001      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40007000 	.word	0x40007000
 8003e14:	40023800 	.word	0x40023800
 8003e18:	42470060 	.word	0x42470060

08003e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0cc      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e30:	4b68      	ldr	r3, [pc, #416]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d90c      	bls.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3e:	4b65      	ldr	r3, [pc, #404]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e46:	4b63      	ldr	r3, [pc, #396]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0b8      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d020      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e70:	4b59      	ldr	r3, [pc, #356]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	4a58      	ldr	r2, [pc, #352]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0308 	and.w	r3, r3, #8
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d005      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e88:	4b53      	ldr	r3, [pc, #332]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	4a52      	ldr	r2, [pc, #328]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e94:	4b50      	ldr	r3, [pc, #320]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	494d      	ldr	r1, [pc, #308]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d044      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	4b47      	ldr	r3, [pc, #284]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d119      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e07f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d003      	beq.n	8003eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d107      	bne.n	8003eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eda:	4b3f      	ldr	r3, [pc, #252]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e06f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eea:	4b3b      	ldr	r3, [pc, #236]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e067      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003efa:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f023 0203 	bic.w	r2, r3, #3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4934      	ldr	r1, [pc, #208]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f0c:	f7fe fdfa 	bl	8002b04 <HAL_GetTick>
 8003f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f12:	e00a      	b.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f14:	f7fe fdf6 	bl	8002b04 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e04f      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f2a:	4b2b      	ldr	r3, [pc, #172]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 020c 	and.w	r2, r3, #12
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d1eb      	bne.n	8003f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b25      	ldr	r3, [pc, #148]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d20c      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e032      	b.n	8003fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4916      	ldr	r1, [pc, #88]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8e:	4b12      	ldr	r3, [pc, #72]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	490e      	ldr	r1, [pc, #56]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fa2:	f000 f821 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4601      	mov	r1, r0
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <HAL_RCC_ClockConfig+0x1c0>)
 8003fb4:	5cd3      	ldrb	r3, [r2, r3]
 8003fb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003fba:	4a09      	ldr	r2, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fd5a 	bl	8002a7c <HAL_InitTick>

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023c00 	.word	0x40023c00
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	080062b4 	.word	0x080062b4
 8003fe0:	20000000 	.word	0x20000000
 8003fe4:	20000004 	.word	0x20000004

08003fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b04      	cmp	r3, #4
 8004008:	d007      	beq.n	800401a <HAL_RCC_GetSysClockFreq+0x32>
 800400a:	2b08      	cmp	r3, #8
 800400c:	d008      	beq.n	8004020 <HAL_RCC_GetSysClockFreq+0x38>
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 80b4 	bne.w	800417c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004014:	4b5e      	ldr	r3, [pc, #376]	; (8004190 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004016:	60bb      	str	r3, [r7, #8]
       break;
 8004018:	e0b3      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800401a:	4b5e      	ldr	r3, [pc, #376]	; (8004194 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800401c:	60bb      	str	r3, [r7, #8]
      break;
 800401e:	e0b0      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004020:	4b5a      	ldr	r3, [pc, #360]	; (800418c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004028:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800402a:	4b58      	ldr	r3, [pc, #352]	; (800418c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d04a      	beq.n	80040cc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004036:	4b55      	ldr	r3, [pc, #340]	; (800418c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	099b      	lsrs	r3, r3, #6
 800403c:	f04f 0400 	mov.w	r4, #0
 8004040:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	ea03 0501 	and.w	r5, r3, r1
 800404c:	ea04 0602 	and.w	r6, r4, r2
 8004050:	4629      	mov	r1, r5
 8004052:	4632      	mov	r2, r6
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	f04f 0400 	mov.w	r4, #0
 800405c:	0154      	lsls	r4, r2, #5
 800405e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004062:	014b      	lsls	r3, r1, #5
 8004064:	4619      	mov	r1, r3
 8004066:	4622      	mov	r2, r4
 8004068:	1b49      	subs	r1, r1, r5
 800406a:	eb62 0206 	sbc.w	r2, r2, r6
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	f04f 0400 	mov.w	r4, #0
 8004076:	0194      	lsls	r4, r2, #6
 8004078:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800407c:	018b      	lsls	r3, r1, #6
 800407e:	1a5b      	subs	r3, r3, r1
 8004080:	eb64 0402 	sbc.w	r4, r4, r2
 8004084:	f04f 0100 	mov.w	r1, #0
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	00e2      	lsls	r2, r4, #3
 800408e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004092:	00d9      	lsls	r1, r3, #3
 8004094:	460b      	mov	r3, r1
 8004096:	4614      	mov	r4, r2
 8004098:	195b      	adds	r3, r3, r5
 800409a:	eb44 0406 	adc.w	r4, r4, r6
 800409e:	f04f 0100 	mov.w	r1, #0
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	0262      	lsls	r2, r4, #9
 80040a8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040ac:	0259      	lsls	r1, r3, #9
 80040ae:	460b      	mov	r3, r1
 80040b0:	4614      	mov	r4, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	4621      	mov	r1, r4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f04f 0400 	mov.w	r4, #0
 80040bc:	461a      	mov	r2, r3
 80040be:	4623      	mov	r3, r4
 80040c0:	f7fc fd32 	bl	8000b28 <__aeabi_uldivmod>
 80040c4:	4603      	mov	r3, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e049      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040cc:	4b2f      	ldr	r3, [pc, #188]	; (800418c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	099b      	lsrs	r3, r3, #6
 80040d2:	f04f 0400 	mov.w	r4, #0
 80040d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	ea03 0501 	and.w	r5, r3, r1
 80040e2:	ea04 0602 	and.w	r6, r4, r2
 80040e6:	4629      	mov	r1, r5
 80040e8:	4632      	mov	r2, r6
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	f04f 0400 	mov.w	r4, #0
 80040f2:	0154      	lsls	r4, r2, #5
 80040f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040f8:	014b      	lsls	r3, r1, #5
 80040fa:	4619      	mov	r1, r3
 80040fc:	4622      	mov	r2, r4
 80040fe:	1b49      	subs	r1, r1, r5
 8004100:	eb62 0206 	sbc.w	r2, r2, r6
 8004104:	f04f 0300 	mov.w	r3, #0
 8004108:	f04f 0400 	mov.w	r4, #0
 800410c:	0194      	lsls	r4, r2, #6
 800410e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004112:	018b      	lsls	r3, r1, #6
 8004114:	1a5b      	subs	r3, r3, r1
 8004116:	eb64 0402 	sbc.w	r4, r4, r2
 800411a:	f04f 0100 	mov.w	r1, #0
 800411e:	f04f 0200 	mov.w	r2, #0
 8004122:	00e2      	lsls	r2, r4, #3
 8004124:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004128:	00d9      	lsls	r1, r3, #3
 800412a:	460b      	mov	r3, r1
 800412c:	4614      	mov	r4, r2
 800412e:	195b      	adds	r3, r3, r5
 8004130:	eb44 0406 	adc.w	r4, r4, r6
 8004134:	f04f 0100 	mov.w	r1, #0
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	02a2      	lsls	r2, r4, #10
 800413e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004142:	0299      	lsls	r1, r3, #10
 8004144:	460b      	mov	r3, r1
 8004146:	4614      	mov	r4, r2
 8004148:	4618      	mov	r0, r3
 800414a:	4621      	mov	r1, r4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f04f 0400 	mov.w	r4, #0
 8004152:	461a      	mov	r2, r3
 8004154:	4623      	mov	r3, r4
 8004156:	f7fc fce7 	bl	8000b28 <__aeabi_uldivmod>
 800415a:	4603      	mov	r3, r0
 800415c:	460c      	mov	r4, r1
 800415e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	3301      	adds	r3, #1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	fbb2 f3f3 	udiv	r3, r2, r3
 8004178:	60bb      	str	r3, [r7, #8]
      break;
 800417a:	e002      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800417e:	60bb      	str	r3, [r7, #8]
      break;
 8004180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004182:	68bb      	ldr	r3, [r7, #8]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800418c:	40023800 	.word	0x40023800
 8004190:	00f42400 	.word	0x00f42400
 8004194:	007a1200 	.word	0x007a1200

08004198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800419c:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCC_GetHCLKFreq+0x14>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000000 	.word	0x20000000

080041b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041b4:	f7ff fff0 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041b8:	4601      	mov	r1, r0
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	0a9b      	lsrs	r3, r3, #10
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	4a03      	ldr	r2, [pc, #12]	; (80041d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c6:	5cd3      	ldrb	r3, [r2, r3]
 80041c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40023800 	.word	0x40023800
 80041d4:	080062c4 	.word	0x080062c4

080041d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041dc:	f7ff ffdc 	bl	8004198 <HAL_RCC_GetHCLKFreq>
 80041e0:	4601      	mov	r1, r0
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	0b5b      	lsrs	r3, r3, #13
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4a03      	ldr	r2, [pc, #12]	; (80041fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ee:	5cd3      	ldrb	r3, [r2, r3]
 80041f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	080062c4 	.word	0x080062c4

08004200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e01d      	b.n	800424e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7fe fa36 	bl	8002698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3304      	adds	r3, #4
 800423c:	4619      	mov	r1, r3
 800423e:	4610      	mov	r0, r2
 8004240:	f000 fcb6 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004256:	b480      	push	{r7}
 8004258:	b085      	sub	sp, #20
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2202      	movs	r2, #2
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b06      	cmp	r3, #6
 8004276:	d007      	beq.n	8004288 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e01d      	b.n	80042ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f815 	bl	80042f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3304      	adds	r3, #4
 80042da:	4619      	mov	r1, r3
 80042dc:	4610      	mov	r0, r2
 80042de:	f000 fc67 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2201      	movs	r2, #1
 8004318:	6839      	ldr	r1, [r7, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f001 f80c 	bl	8005338 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a10      	ldr	r2, [pc, #64]	; (8004368 <HAL_TIM_PWM_Start+0x60>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d107      	bne.n	800433a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004338:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b06      	cmp	r3, #6
 800434a:	d007      	beq.n	800435c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0201 	orr.w	r2, r2, #1
 800435a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000

0800436c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e01d      	b.n	80043ba <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7fe f9a2 	bl	80026dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 fc00 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b0c      	cmp	r3, #12
 80043d2:	d841      	bhi.n	8004458 <HAL_TIM_IC_Start_IT+0x94>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <HAL_TIM_IC_Start_IT+0x18>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004411 	.word	0x08004411
 80043e0:	08004459 	.word	0x08004459
 80043e4:	08004459 	.word	0x08004459
 80043e8:	08004459 	.word	0x08004459
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004459 	.word	0x08004459
 80043f4:	08004459 	.word	0x08004459
 80043f8:	08004459 	.word	0x08004459
 80043fc:	08004435 	.word	0x08004435
 8004400:	08004459 	.word	0x08004459
 8004404:	08004459 	.word	0x08004459
 8004408:	08004459 	.word	0x08004459
 800440c:	08004447 	.word	0x08004447
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0202 	orr.w	r2, r2, #2
 800441e:	60da      	str	r2, [r3, #12]
      break;
 8004420:	e01b      	b.n	800445a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0204 	orr.w	r2, r2, #4
 8004430:	60da      	str	r2, [r3, #12]
      break;
 8004432:	e012      	b.n	800445a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0208 	orr.w	r2, r2, #8
 8004442:	60da      	str	r2, [r3, #12]
      break;
 8004444:	e009      	b.n	800445a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0210 	orr.w	r2, r2, #16
 8004454:	60da      	str	r2, [r3, #12]
      break;
 8004456:	e000      	b.n	800445a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8004458:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2201      	movs	r2, #1
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 ff68 	bl	8005338 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b06      	cmp	r3, #6
 8004478:	d007      	beq.n	800448a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d122      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11b      	bne.n	80044f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f06f 0202 	mvn.w	r2, #2
 80044c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc fd16 	bl	8000f08 <HAL_TIM_IC_CaptureCallback>
 80044dc:	e005      	b.n	80044ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fb48 	bl	8004b74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fb4f 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d122      	bne.n	8004544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b04      	cmp	r3, #4
 800450a:	d11b      	bne.n	8004544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0204 	mvn.w	r2, #4
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fc fcec 	bl	8000f08 <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fb1e 	bl	8004b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fb25 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b08      	cmp	r3, #8
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b08      	cmp	r3, #8
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0208 	mvn.w	r2, #8
 8004568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fcc2 	bl	8000f08 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 faf4 	bl	8004b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fafb 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	2b10      	cmp	r3, #16
 80045a4:	d122      	bne.n	80045ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d11b      	bne.n	80045ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0210 	mvn.w	r2, #16
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2208      	movs	r2, #8
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fc fc98 	bl	8000f08 <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 faca 	bl	8004b74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fad1 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d10e      	bne.n	8004618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b01      	cmp	r3, #1
 8004606:	d107      	bne.n	8004618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0201 	mvn.w	r2, #1
 8004610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 faa4 	bl	8004b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d10e      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d107      	bne.n	8004644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 ff6a 	bl	8005518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b40      	cmp	r3, #64	; 0x40
 8004650:	d10e      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d107      	bne.n	8004670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa96 	bl	8004b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b20      	cmp	r3, #32
 800467c:	d10e      	bne.n	800469c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	f003 0320 	and.w	r3, r3, #32
 8004688:	2b20      	cmp	r3, #32
 800468a:	d107      	bne.n	800469c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0220 	mvn.w	r2, #32
 8004694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 ff34 	bl	8005504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800469c:	bf00      	nop
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_TIM_IC_ConfigChannel+0x1a>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e08a      	b.n	80047d4 <HAL_TIM_IC_ConfigChannel+0x130>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d11b      	bne.n	800470c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f000 fc70 	bl	8004fc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 020c 	bic.w	r2, r2, #12
 80046f6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6999      	ldr	r1, [r3, #24]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	619a      	str	r2, [r3, #24]
 800470a:	e05a      	b.n	80047c2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b04      	cmp	r3, #4
 8004710:	d11c      	bne.n	800474c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f000 fce8 	bl	80050f6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699a      	ldr	r2, [r3, #24]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004734:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6999      	ldr	r1, [r3, #24]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	021a      	lsls	r2, r3, #8
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	619a      	str	r2, [r3, #24]
 800474a:	e03a      	b.n	80047c2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b08      	cmp	r3, #8
 8004750:	d11b      	bne.n	800478a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6819      	ldr	r1, [r3, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	f000 fd35 	bl	80051d0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 020c 	bic.w	r2, r2, #12
 8004774:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69d9      	ldr	r1, [r3, #28]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	61da      	str	r2, [r3, #28]
 8004788:	e01b      	b.n	80047c2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6818      	ldr	r0, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	6819      	ldr	r1, [r3, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f000 fd55 	bl	8005248 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69da      	ldr	r2, [r3, #28]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69d9      	ldr	r1, [r3, #28]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	021a      	lsls	r2, r3, #8
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e0b4      	b.n	8004960 <HAL_TIM_PWM_ConfigChannel+0x184>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	f200 809f 	bhi.w	800494c <HAL_TIM_PWM_ConfigChannel+0x170>
 800480e:	a201      	add	r2, pc, #4	; (adr r2, 8004814 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004814:	08004849 	.word	0x08004849
 8004818:	0800494d 	.word	0x0800494d
 800481c:	0800494d 	.word	0x0800494d
 8004820:	0800494d 	.word	0x0800494d
 8004824:	08004889 	.word	0x08004889
 8004828:	0800494d 	.word	0x0800494d
 800482c:	0800494d 	.word	0x0800494d
 8004830:	0800494d 	.word	0x0800494d
 8004834:	080048cb 	.word	0x080048cb
 8004838:	0800494d 	.word	0x0800494d
 800483c:	0800494d 	.word	0x0800494d
 8004840:	0800494d 	.word	0x0800494d
 8004844:	0800490b 	.word	0x0800490b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fa2e 	bl	8004cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0208 	orr.w	r2, r2, #8
 8004862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699a      	ldr	r2, [r3, #24]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6999      	ldr	r1, [r3, #24]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	619a      	str	r2, [r3, #24]
      break;
 8004886:	e062      	b.n	800494e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fa74 	bl	8004d7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6999      	ldr	r1, [r3, #24]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	021a      	lsls	r2, r3, #8
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	619a      	str	r2, [r3, #24]
      break;
 80048c8:	e041      	b.n	800494e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68b9      	ldr	r1, [r7, #8]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 fabf 	bl	8004e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0208 	orr.w	r2, r2, #8
 80048e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0204 	bic.w	r2, r2, #4
 80048f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	61da      	str	r2, [r3, #28]
      break;
 8004908:	e021      	b.n	800494e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fb09 	bl	8004f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004924:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69da      	ldr	r2, [r3, #28]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004934:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69d9      	ldr	r1, [r3, #28]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	021a      	lsls	r2, r3, #8
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	61da      	str	r2, [r3, #28]
      break;
 800494a:	e000      	b.n	800494e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800494c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIM_ConfigClockSource+0x18>
 800497c:	2302      	movs	r3, #2
 800497e:	e0a6      	b.n	8004ace <HAL_TIM_ConfigClockSource+0x166>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800499e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d067      	beq.n	8004a88 <HAL_TIM_ConfigClockSource+0x120>
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d80b      	bhi.n	80049d4 <HAL_TIM_ConfigClockSource+0x6c>
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d073      	beq.n	8004aa8 <HAL_TIM_ConfigClockSource+0x140>
 80049c0:	2b10      	cmp	r3, #16
 80049c2:	d802      	bhi.n	80049ca <HAL_TIM_ConfigClockSource+0x62>
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d06f      	beq.n	8004aa8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80049c8:	e078      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d06c      	beq.n	8004aa8 <HAL_TIM_ConfigClockSource+0x140>
 80049ce:	2b30      	cmp	r3, #48	; 0x30
 80049d0:	d06a      	beq.n	8004aa8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80049d2:	e073      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049d4:	2b70      	cmp	r3, #112	; 0x70
 80049d6:	d00d      	beq.n	80049f4 <HAL_TIM_ConfigClockSource+0x8c>
 80049d8:	2b70      	cmp	r3, #112	; 0x70
 80049da:	d804      	bhi.n	80049e6 <HAL_TIM_ConfigClockSource+0x7e>
 80049dc:	2b50      	cmp	r3, #80	; 0x50
 80049de:	d033      	beq.n	8004a48 <HAL_TIM_ConfigClockSource+0xe0>
 80049e0:	2b60      	cmp	r3, #96	; 0x60
 80049e2:	d041      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80049e4:	e06a      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	d066      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0x152>
 80049ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f0:	d017      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80049f2:	e063      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6899      	ldr	r1, [r3, #8]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f000 fc78 	bl	80052f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	609a      	str	r2, [r3, #8]
      break;
 8004a20:	e04c      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6899      	ldr	r1, [r3, #8]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f000 fc61 	bl	80052f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a44:	609a      	str	r2, [r3, #8]
      break;
 8004a46:	e039      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	6859      	ldr	r1, [r3, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	461a      	mov	r2, r3
 8004a56:	f000 fb1f 	bl	8005098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2150      	movs	r1, #80	; 0x50
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fc2e 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8004a66:	e029      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6859      	ldr	r1, [r3, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	461a      	mov	r2, r3
 8004a76:	f000 fb7b 	bl	8005170 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2160      	movs	r1, #96	; 0x60
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fc1e 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8004a86:	e019      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	461a      	mov	r2, r3
 8004a96:	f000 faff 	bl	8005098 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2140      	movs	r1, #64	; 0x40
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fc0e 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8004aa6:	e009      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f000 fc05 	bl	80052c2 <TIM_ITRx_SetConfig>
      break;
 8004ab8:	e000      	b.n	8004abc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d831      	bhi.n	8004b50 <HAL_TIM_ReadCapturedValue+0x78>
 8004aec:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b51 	.word	0x08004b51
 8004afc:	08004b51 	.word	0x08004b51
 8004b00:	08004b51 	.word	0x08004b51
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b51 	.word	0x08004b51
 8004b0c:	08004b51 	.word	0x08004b51
 8004b10:	08004b51 	.word	0x08004b51
 8004b14:	08004b3d 	.word	0x08004b3d
 8004b18:	08004b51 	.word	0x08004b51
 8004b1c:	08004b51 	.word	0x08004b51
 8004b20:	08004b51 	.word	0x08004b51
 8004b24:	08004b47 	.word	0x08004b47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2e:	60fb      	str	r3, [r7, #12]

      break;
 8004b30:	e00f      	b.n	8004b52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	60fb      	str	r3, [r7, #12]

      break;
 8004b3a:	e00a      	b.n	8004b52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	60fb      	str	r3, [r7, #12]

      break;
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	60fb      	str	r3, [r7, #12]

      break;
 8004b4e:	e000      	b.n	8004b52 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004b50:	bf00      	nop
  }

  return tmpreg;
 8004b52:	68fb      	ldr	r3, [r7, #12]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a34      	ldr	r2, [pc, #208]	; (8004c94 <TIM_Base_SetConfig+0xe4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00f      	beq.n	8004be8 <TIM_Base_SetConfig+0x38>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bce:	d00b      	beq.n	8004be8 <TIM_Base_SetConfig+0x38>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a31      	ldr	r2, [pc, #196]	; (8004c98 <TIM_Base_SetConfig+0xe8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_Base_SetConfig+0x38>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a30      	ldr	r2, [pc, #192]	; (8004c9c <TIM_Base_SetConfig+0xec>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_Base_SetConfig+0x38>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a2f      	ldr	r2, [pc, #188]	; (8004ca0 <TIM_Base_SetConfig+0xf0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a25      	ldr	r2, [pc, #148]	; (8004c94 <TIM_Base_SetConfig+0xe4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01b      	beq.n	8004c3a <TIM_Base_SetConfig+0x8a>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d017      	beq.n	8004c3a <TIM_Base_SetConfig+0x8a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <TIM_Base_SetConfig+0xe8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <TIM_Base_SetConfig+0x8a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a21      	ldr	r2, [pc, #132]	; (8004c9c <TIM_Base_SetConfig+0xec>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00f      	beq.n	8004c3a <TIM_Base_SetConfig+0x8a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a20      	ldr	r2, [pc, #128]	; (8004ca0 <TIM_Base_SetConfig+0xf0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00b      	beq.n	8004c3a <TIM_Base_SetConfig+0x8a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <TIM_Base_SetConfig+0xf4>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d007      	beq.n	8004c3a <TIM_Base_SetConfig+0x8a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <TIM_Base_SetConfig+0xf8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d003      	beq.n	8004c3a <TIM_Base_SetConfig+0x8a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <TIM_Base_SetConfig+0xfc>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d108      	bne.n	8004c4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <TIM_Base_SetConfig+0xe4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d103      	bne.n	8004c80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	615a      	str	r2, [r3, #20]
}
 8004c86:	bf00      	nop
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40014400 	.word	0x40014400
 8004cac:	40014800 	.word	0x40014800

08004cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f023 0201 	bic.w	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 0302 	bic.w	r3, r3, #2
 8004cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a1c      	ldr	r2, [pc, #112]	; (8004d78 <TIM_OC1_SetConfig+0xc8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10c      	bne.n	8004d26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0308 	bic.w	r3, r3, #8
 8004d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f023 0304 	bic.w	r3, r3, #4
 8004d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <TIM_OC1_SetConfig+0xc8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d111      	bne.n	8004d52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	621a      	str	r2, [r3, #32]
}
 8004d6c:	bf00      	nop
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40010000 	.word	0x40010000

08004d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f023 0210 	bic.w	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	021b      	lsls	r3, r3, #8
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0320 	bic.w	r3, r3, #32
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <TIM_OC2_SetConfig+0xd4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d10d      	bne.n	8004df8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a15      	ldr	r2, [pc, #84]	; (8004e50 <TIM_OC2_SetConfig+0xd4>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d113      	bne.n	8004e28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000

08004e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b087      	sub	sp, #28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0303 	bic.w	r3, r3, #3
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <TIM_OC3_SetConfig+0xd0>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d10d      	bne.n	8004ece <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a14      	ldr	r2, [pc, #80]	; (8004f24 <TIM_OC3_SetConfig+0xd0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d113      	bne.n	8004efe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	621a      	str	r2, [r3, #32]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	40010000 	.word	0x40010000

08004f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	031b      	lsls	r3, r3, #12
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a10      	ldr	r2, [pc, #64]	; (8004fc4 <TIM_OC4_SetConfig+0x9c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d109      	bne.n	8004f9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	019b      	lsls	r3, r3, #6
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	40010000 	.word	0x40010000

08004fc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f023 0201 	bic.w	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	4a24      	ldr	r2, [pc, #144]	; (8005084 <TIM_TI1_SetConfig+0xbc>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <TIM_TI1_SetConfig+0x56>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d00f      	beq.n	800501e <TIM_TI1_SetConfig+0x56>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4a21      	ldr	r2, [pc, #132]	; (8005088 <TIM_TI1_SetConfig+0xc0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d00b      	beq.n	800501e <TIM_TI1_SetConfig+0x56>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a20      	ldr	r2, [pc, #128]	; (800508c <TIM_TI1_SetConfig+0xc4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d007      	beq.n	800501e <TIM_TI1_SetConfig+0x56>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a1f      	ldr	r2, [pc, #124]	; (8005090 <TIM_TI1_SetConfig+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d003      	beq.n	800501e <TIM_TI1_SetConfig+0x56>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <TIM_TI1_SetConfig+0xcc>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <TIM_TI1_SetConfig+0x5a>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <TIM_TI1_SetConfig+0x5c>
 8005022:	2300      	movs	r3, #0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f023 0303 	bic.w	r3, r3, #3
 800502e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e003      	b.n	8005042 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005048:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	b2db      	uxtb	r3, r3
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f003 030a 	and.w	r3, r3, #10
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800
 8005090:	40000c00 	.word	0x40000c00
 8005094:	40014000 	.word	0x40014000

08005098 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f023 0201 	bic.w	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	011b      	lsls	r3, r3, #4
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f023 030a 	bic.w	r3, r3, #10
 80050d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4313      	orrs	r3, r2
 80050dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	621a      	str	r2, [r3, #32]
}
 80050ea:	bf00      	nop
 80050ec:	371c      	adds	r7, #28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b087      	sub	sp, #28
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	f023 0210 	bic.w	r2, r3, #16
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005122:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	031b      	lsls	r3, r3, #12
 800513a:	b29b      	uxth	r3, r3
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	4313      	orrs	r3, r2
 8005140:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005148:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	f023 0210 	bic.w	r2, r3, #16
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800519a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	031b      	lsls	r3, r3, #12
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	621a      	str	r2, [r3, #32]
}
 80051c4:	bf00      	nop
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f023 0303 	bic.w	r3, r3, #3
 80051fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800520c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	011b      	lsls	r3, r3, #4
 8005212:	b2db      	uxtb	r3, r3
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005220:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	021b      	lsls	r3, r3, #8
 8005226:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	621a      	str	r2, [r3, #32]
}
 800523c:	bf00      	nop
 800523e:	371c      	adds	r7, #28
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005274:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005286:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	031b      	lsls	r3, r3, #12
 800528c:	b29b      	uxth	r3, r3
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800529a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	031b      	lsls	r3, r3, #12
 80052a0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	f043 0307 	orr.w	r3, r3, #7
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	609a      	str	r2, [r3, #8]
}
 80052ec:	bf00      	nop
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	021a      	lsls	r2, r3, #8
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	431a      	orrs	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4313      	orrs	r3, r2
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 031f 	and.w	r3, r3, #31
 800534a:	2201      	movs	r2, #1
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1a      	ldr	r2, [r3, #32]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	43db      	mvns	r3, r3
 800535a:	401a      	ands	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a1a      	ldr	r2, [r3, #32]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 031f 	and.w	r3, r3, #31
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	fa01 f303 	lsl.w	r3, r1, r3
 8005370:	431a      	orrs	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
	...

08005384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005398:	2302      	movs	r3, #2
 800539a:	e050      	b.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1c      	ldr	r2, [pc, #112]	; (800544c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d018      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e8:	d013      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a18      	ldr	r2, [pc, #96]	; (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a16      	ldr	r2, [pc, #88]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a15      	ldr	r2, [pc, #84]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a13      	ldr	r2, [pc, #76]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d10c      	bne.n	800542c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	4313      	orrs	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40014000 	.word	0x40014000

08005460 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005474:	2b01      	cmp	r3, #1
 8005476:	d101      	bne.n	800547c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005478:	2302      	movs	r3, #2
 800547a:	e03d      	b.n	80054f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e03f      	b.n	80055be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fd f94a 	bl	80027ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2224      	movs	r2, #36	; 0x24
 800555c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800556e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f919 	bl	80057a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	691a      	ldr	r2, [r3, #16]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	695a      	ldr	r2, [r3, #20]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b088      	sub	sp, #32
 80055ca:	af02      	add	r7, sp, #8
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	f040 8090 	bne.w	8005708 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <HAL_UART_Receive+0x2e>
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e088      	b.n	800570a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_UART_Receive+0x40>
 8005602:	2302      	movs	r3, #2
 8005604:	e081      	b.n	800570a <HAL_UART_Receive+0x144>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2222      	movs	r2, #34	; 0x22
 8005618:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800561c:	f7fd fa72 	bl	8002b04 <HAL_GetTick>
 8005620:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	88fa      	ldrh	r2, [r7, #6]
 8005626:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	88fa      	ldrh	r2, [r7, #6]
 800562c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005636:	e05c      	b.n	80056f2 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563c:	b29b      	uxth	r3, r3
 800563e:	3b01      	subs	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564e:	d12b      	bne.n	80056a8 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	2120      	movs	r1, #32
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f859 	bl	8005712 <UART_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e04f      	b.n	800570a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10c      	bne.n	8005690 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005682:	b29a      	uxth	r2, r3
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	3302      	adds	r3, #2
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	e030      	b.n	80056f2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b29b      	uxth	r3, r3
 8005698:	b2db      	uxtb	r3, r3
 800569a:	b29a      	uxth	r2, r3
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	3301      	adds	r3, #1
 80056a4:	60bb      	str	r3, [r7, #8]
 80056a6:	e024      	b.n	80056f2 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2200      	movs	r2, #0
 80056b0:	2120      	movs	r1, #32
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 f82d 	bl	8005712 <UART_WaitOnFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e023      	b.n	800570a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d108      	bne.n	80056dc <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	60ba      	str	r2, [r7, #8]
 80056d6:	b2ca      	uxtb	r2, r1
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	e00a      	b.n	80056f2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	1c59      	adds	r1, r3, #1
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d19d      	bne.n	8005638 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	e000      	b.n	800570a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005708:	2302      	movs	r3, #2
  }
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	60f8      	str	r0, [r7, #12]
 800571a:	60b9      	str	r1, [r7, #8]
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	4613      	mov	r3, r2
 8005720:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005722:	e02c      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572a:	d028      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <UART_WaitOnFlagUntilTimeout+0x30>
 8005732:	f7fd f9e7 	bl	8002b04 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	429a      	cmp	r2, r3
 8005740:	d21d      	bcs.n	800577e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005750:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0201 	bic.w	r2, r2, #1
 8005760:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e00f      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4013      	ands	r3, r2
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	429a      	cmp	r2, r3
 800578c:	bf0c      	ite	eq
 800578e:	2301      	moveq	r3, #1
 8005790:	2300      	movne	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	461a      	mov	r2, r3
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	429a      	cmp	r2, r3
 800579a:	d0c3      	beq.n	8005724 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80057ea:	f023 030c 	bic.w	r3, r3, #12
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	430b      	orrs	r3, r1
 80057f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005816:	f040 818b 	bne.w	8005b30 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4ac1      	ldr	r2, [pc, #772]	; (8005b24 <UART_SetConfig+0x37c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d005      	beq.n	8005830 <UART_SetConfig+0x88>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4abf      	ldr	r2, [pc, #764]	; (8005b28 <UART_SetConfig+0x380>)
 800582a:	4293      	cmp	r3, r2
 800582c:	f040 80bd 	bne.w	80059aa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005830:	f7fe fcd2 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 8005834:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	461d      	mov	r5, r3
 800583a:	f04f 0600 	mov.w	r6, #0
 800583e:	46a8      	mov	r8, r5
 8005840:	46b1      	mov	r9, r6
 8005842:	eb18 0308 	adds.w	r3, r8, r8
 8005846:	eb49 0409 	adc.w	r4, r9, r9
 800584a:	4698      	mov	r8, r3
 800584c:	46a1      	mov	r9, r4
 800584e:	eb18 0805 	adds.w	r8, r8, r5
 8005852:	eb49 0906 	adc.w	r9, r9, r6
 8005856:	f04f 0100 	mov.w	r1, #0
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005862:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005866:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800586a:	4688      	mov	r8, r1
 800586c:	4691      	mov	r9, r2
 800586e:	eb18 0005 	adds.w	r0, r8, r5
 8005872:	eb49 0106 	adc.w	r1, r9, r6
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	461d      	mov	r5, r3
 800587c:	f04f 0600 	mov.w	r6, #0
 8005880:	196b      	adds	r3, r5, r5
 8005882:	eb46 0406 	adc.w	r4, r6, r6
 8005886:	461a      	mov	r2, r3
 8005888:	4623      	mov	r3, r4
 800588a:	f7fb f94d 	bl	8000b28 <__aeabi_uldivmod>
 800588e:	4603      	mov	r3, r0
 8005890:	460c      	mov	r4, r1
 8005892:	461a      	mov	r2, r3
 8005894:	4ba5      	ldr	r3, [pc, #660]	; (8005b2c <UART_SetConfig+0x384>)
 8005896:	fba3 2302 	umull	r2, r3, r3, r2
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	461d      	mov	r5, r3
 80058a4:	f04f 0600 	mov.w	r6, #0
 80058a8:	46a9      	mov	r9, r5
 80058aa:	46b2      	mov	sl, r6
 80058ac:	eb19 0309 	adds.w	r3, r9, r9
 80058b0:	eb4a 040a 	adc.w	r4, sl, sl
 80058b4:	4699      	mov	r9, r3
 80058b6:	46a2      	mov	sl, r4
 80058b8:	eb19 0905 	adds.w	r9, r9, r5
 80058bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058d4:	4689      	mov	r9, r1
 80058d6:	4692      	mov	sl, r2
 80058d8:	eb19 0005 	adds.w	r0, r9, r5
 80058dc:	eb4a 0106 	adc.w	r1, sl, r6
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	461d      	mov	r5, r3
 80058e6:	f04f 0600 	mov.w	r6, #0
 80058ea:	196b      	adds	r3, r5, r5
 80058ec:	eb46 0406 	adc.w	r4, r6, r6
 80058f0:	461a      	mov	r2, r3
 80058f2:	4623      	mov	r3, r4
 80058f4:	f7fb f918 	bl	8000b28 <__aeabi_uldivmod>
 80058f8:	4603      	mov	r3, r0
 80058fa:	460c      	mov	r4, r1
 80058fc:	461a      	mov	r2, r3
 80058fe:	4b8b      	ldr	r3, [pc, #556]	; (8005b2c <UART_SetConfig+0x384>)
 8005900:	fba3 1302 	umull	r1, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	2164      	movs	r1, #100	; 0x64
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	3332      	adds	r3, #50	; 0x32
 8005912:	4a86      	ldr	r2, [pc, #536]	; (8005b2c <UART_SetConfig+0x384>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005920:	4498      	add	r8, r3
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	461d      	mov	r5, r3
 8005926:	f04f 0600 	mov.w	r6, #0
 800592a:	46a9      	mov	r9, r5
 800592c:	46b2      	mov	sl, r6
 800592e:	eb19 0309 	adds.w	r3, r9, r9
 8005932:	eb4a 040a 	adc.w	r4, sl, sl
 8005936:	4699      	mov	r9, r3
 8005938:	46a2      	mov	sl, r4
 800593a:	eb19 0905 	adds.w	r9, r9, r5
 800593e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005942:	f04f 0100 	mov.w	r1, #0
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800594e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005952:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005956:	4689      	mov	r9, r1
 8005958:	4692      	mov	sl, r2
 800595a:	eb19 0005 	adds.w	r0, r9, r5
 800595e:	eb4a 0106 	adc.w	r1, sl, r6
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	461d      	mov	r5, r3
 8005968:	f04f 0600 	mov.w	r6, #0
 800596c:	196b      	adds	r3, r5, r5
 800596e:	eb46 0406 	adc.w	r4, r6, r6
 8005972:	461a      	mov	r2, r3
 8005974:	4623      	mov	r3, r4
 8005976:	f7fb f8d7 	bl	8000b28 <__aeabi_uldivmod>
 800597a:	4603      	mov	r3, r0
 800597c:	460c      	mov	r4, r1
 800597e:	461a      	mov	r2, r3
 8005980:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <UART_SetConfig+0x384>)
 8005982:	fba3 1302 	umull	r1, r3, r3, r2
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	2164      	movs	r1, #100	; 0x64
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	3332      	adds	r3, #50	; 0x32
 8005994:	4a65      	ldr	r2, [pc, #404]	; (8005b2c <UART_SetConfig+0x384>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	f003 0207 	and.w	r2, r3, #7
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4442      	add	r2, r8
 80059a6:	609a      	str	r2, [r3, #8]
 80059a8:	e26f      	b.n	8005e8a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059aa:	f7fe fc01 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 80059ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	461d      	mov	r5, r3
 80059b4:	f04f 0600 	mov.w	r6, #0
 80059b8:	46a8      	mov	r8, r5
 80059ba:	46b1      	mov	r9, r6
 80059bc:	eb18 0308 	adds.w	r3, r8, r8
 80059c0:	eb49 0409 	adc.w	r4, r9, r9
 80059c4:	4698      	mov	r8, r3
 80059c6:	46a1      	mov	r9, r4
 80059c8:	eb18 0805 	adds.w	r8, r8, r5
 80059cc:	eb49 0906 	adc.w	r9, r9, r6
 80059d0:	f04f 0100 	mov.w	r1, #0
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80059e4:	4688      	mov	r8, r1
 80059e6:	4691      	mov	r9, r2
 80059e8:	eb18 0005 	adds.w	r0, r8, r5
 80059ec:	eb49 0106 	adc.w	r1, r9, r6
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	461d      	mov	r5, r3
 80059f6:	f04f 0600 	mov.w	r6, #0
 80059fa:	196b      	adds	r3, r5, r5
 80059fc:	eb46 0406 	adc.w	r4, r6, r6
 8005a00:	461a      	mov	r2, r3
 8005a02:	4623      	mov	r3, r4
 8005a04:	f7fb f890 	bl	8000b28 <__aeabi_uldivmod>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4b47      	ldr	r3, [pc, #284]	; (8005b2c <UART_SetConfig+0x384>)
 8005a10:	fba3 2302 	umull	r2, r3, r3, r2
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	461d      	mov	r5, r3
 8005a1e:	f04f 0600 	mov.w	r6, #0
 8005a22:	46a9      	mov	r9, r5
 8005a24:	46b2      	mov	sl, r6
 8005a26:	eb19 0309 	adds.w	r3, r9, r9
 8005a2a:	eb4a 040a 	adc.w	r4, sl, sl
 8005a2e:	4699      	mov	r9, r3
 8005a30:	46a2      	mov	sl, r4
 8005a32:	eb19 0905 	adds.w	r9, r9, r5
 8005a36:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a3a:	f04f 0100 	mov.w	r1, #0
 8005a3e:	f04f 0200 	mov.w	r2, #0
 8005a42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a4e:	4689      	mov	r9, r1
 8005a50:	4692      	mov	sl, r2
 8005a52:	eb19 0005 	adds.w	r0, r9, r5
 8005a56:	eb4a 0106 	adc.w	r1, sl, r6
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	461d      	mov	r5, r3
 8005a60:	f04f 0600 	mov.w	r6, #0
 8005a64:	196b      	adds	r3, r5, r5
 8005a66:	eb46 0406 	adc.w	r4, r6, r6
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4623      	mov	r3, r4
 8005a6e:	f7fb f85b 	bl	8000b28 <__aeabi_uldivmod>
 8005a72:	4603      	mov	r3, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	461a      	mov	r2, r3
 8005a78:	4b2c      	ldr	r3, [pc, #176]	; (8005b2c <UART_SetConfig+0x384>)
 8005a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	2164      	movs	r1, #100	; 0x64
 8005a82:	fb01 f303 	mul.w	r3, r1, r3
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	3332      	adds	r3, #50	; 0x32
 8005a8c:	4a27      	ldr	r2, [pc, #156]	; (8005b2c <UART_SetConfig+0x384>)
 8005a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a92:	095b      	lsrs	r3, r3, #5
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a9a:	4498      	add	r8, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	461d      	mov	r5, r3
 8005aa0:	f04f 0600 	mov.w	r6, #0
 8005aa4:	46a9      	mov	r9, r5
 8005aa6:	46b2      	mov	sl, r6
 8005aa8:	eb19 0309 	adds.w	r3, r9, r9
 8005aac:	eb4a 040a 	adc.w	r4, sl, sl
 8005ab0:	4699      	mov	r9, r3
 8005ab2:	46a2      	mov	sl, r4
 8005ab4:	eb19 0905 	adds.w	r9, r9, r5
 8005ab8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005abc:	f04f 0100 	mov.w	r1, #0
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ac8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005acc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ad0:	4689      	mov	r9, r1
 8005ad2:	4692      	mov	sl, r2
 8005ad4:	eb19 0005 	adds.w	r0, r9, r5
 8005ad8:	eb4a 0106 	adc.w	r1, sl, r6
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	461d      	mov	r5, r3
 8005ae2:	f04f 0600 	mov.w	r6, #0
 8005ae6:	196b      	adds	r3, r5, r5
 8005ae8:	eb46 0406 	adc.w	r4, r6, r6
 8005aec:	461a      	mov	r2, r3
 8005aee:	4623      	mov	r3, r4
 8005af0:	f7fb f81a 	bl	8000b28 <__aeabi_uldivmod>
 8005af4:	4603      	mov	r3, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	461a      	mov	r2, r3
 8005afa:	4b0c      	ldr	r3, [pc, #48]	; (8005b2c <UART_SetConfig+0x384>)
 8005afc:	fba3 1302 	umull	r1, r3, r3, r2
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	2164      	movs	r1, #100	; 0x64
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	3332      	adds	r3, #50	; 0x32
 8005b0e:	4a07      	ldr	r2, [pc, #28]	; (8005b2c <UART_SetConfig+0x384>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	f003 0207 	and.w	r2, r3, #7
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4442      	add	r2, r8
 8005b20:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b22:	e1b2      	b.n	8005e8a <UART_SetConfig+0x6e2>
 8005b24:	40011000 	.word	0x40011000
 8005b28:	40011400 	.word	0x40011400
 8005b2c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4ad7      	ldr	r2, [pc, #860]	; (8005e94 <UART_SetConfig+0x6ec>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d005      	beq.n	8005b46 <UART_SetConfig+0x39e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4ad6      	ldr	r2, [pc, #856]	; (8005e98 <UART_SetConfig+0x6f0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	f040 80d1 	bne.w	8005ce8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b46:	f7fe fb47 	bl	80041d8 <HAL_RCC_GetPCLK2Freq>
 8005b4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	469a      	mov	sl, r3
 8005b50:	f04f 0b00 	mov.w	fp, #0
 8005b54:	46d0      	mov	r8, sl
 8005b56:	46d9      	mov	r9, fp
 8005b58:	eb18 0308 	adds.w	r3, r8, r8
 8005b5c:	eb49 0409 	adc.w	r4, r9, r9
 8005b60:	4698      	mov	r8, r3
 8005b62:	46a1      	mov	r9, r4
 8005b64:	eb18 080a 	adds.w	r8, r8, sl
 8005b68:	eb49 090b 	adc.w	r9, r9, fp
 8005b6c:	f04f 0100 	mov.w	r1, #0
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005b80:	4688      	mov	r8, r1
 8005b82:	4691      	mov	r9, r2
 8005b84:	eb1a 0508 	adds.w	r5, sl, r8
 8005b88:	eb4b 0609 	adc.w	r6, fp, r9
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4619      	mov	r1, r3
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	f04f 0400 	mov.w	r4, #0
 8005b9e:	0094      	lsls	r4, r2, #2
 8005ba0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ba4:	008b      	lsls	r3, r1, #2
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4623      	mov	r3, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	4631      	mov	r1, r6
 8005bae:	f7fa ffbb 	bl	8000b28 <__aeabi_uldivmod>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	4bb8      	ldr	r3, [pc, #736]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005bba:	fba3 2302 	umull	r2, r3, r3, r2
 8005bbe:	095b      	lsrs	r3, r3, #5
 8005bc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	469b      	mov	fp, r3
 8005bc8:	f04f 0c00 	mov.w	ip, #0
 8005bcc:	46d9      	mov	r9, fp
 8005bce:	46e2      	mov	sl, ip
 8005bd0:	eb19 0309 	adds.w	r3, r9, r9
 8005bd4:	eb4a 040a 	adc.w	r4, sl, sl
 8005bd8:	4699      	mov	r9, r3
 8005bda:	46a2      	mov	sl, r4
 8005bdc:	eb19 090b 	adds.w	r9, r9, fp
 8005be0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005be4:	f04f 0100 	mov.w	r1, #0
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bf8:	4689      	mov	r9, r1
 8005bfa:	4692      	mov	sl, r2
 8005bfc:	eb1b 0509 	adds.w	r5, fp, r9
 8005c00:	eb4c 060a 	adc.w	r6, ip, sl
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	f04f 0400 	mov.w	r4, #0
 8005c16:	0094      	lsls	r4, r2, #2
 8005c18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c1c:	008b      	lsls	r3, r1, #2
 8005c1e:	461a      	mov	r2, r3
 8005c20:	4623      	mov	r3, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	4631      	mov	r1, r6
 8005c26:	f7fa ff7f 	bl	8000b28 <__aeabi_uldivmod>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	461a      	mov	r2, r3
 8005c30:	4b9a      	ldr	r3, [pc, #616]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005c32:	fba3 1302 	umull	r1, r3, r3, r2
 8005c36:	095b      	lsrs	r3, r3, #5
 8005c38:	2164      	movs	r1, #100	; 0x64
 8005c3a:	fb01 f303 	mul.w	r3, r1, r3
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	3332      	adds	r3, #50	; 0x32
 8005c44:	4a95      	ldr	r2, [pc, #596]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c50:	4498      	add	r8, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	469b      	mov	fp, r3
 8005c56:	f04f 0c00 	mov.w	ip, #0
 8005c5a:	46d9      	mov	r9, fp
 8005c5c:	46e2      	mov	sl, ip
 8005c5e:	eb19 0309 	adds.w	r3, r9, r9
 8005c62:	eb4a 040a 	adc.w	r4, sl, sl
 8005c66:	4699      	mov	r9, r3
 8005c68:	46a2      	mov	sl, r4
 8005c6a:	eb19 090b 	adds.w	r9, r9, fp
 8005c6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c72:	f04f 0100 	mov.w	r1, #0
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c86:	4689      	mov	r9, r1
 8005c88:	4692      	mov	sl, r2
 8005c8a:	eb1b 0509 	adds.w	r5, fp, r9
 8005c8e:	eb4c 060a 	adc.w	r6, ip, sl
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4619      	mov	r1, r3
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	f04f 0400 	mov.w	r4, #0
 8005ca4:	0094      	lsls	r4, r2, #2
 8005ca6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005caa:	008b      	lsls	r3, r1, #2
 8005cac:	461a      	mov	r2, r3
 8005cae:	4623      	mov	r3, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	f7fa ff38 	bl	8000b28 <__aeabi_uldivmod>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4b77      	ldr	r3, [pc, #476]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	; 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	3332      	adds	r3, #50	; 0x32
 8005cd2:	4a72      	ldr	r2, [pc, #456]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f003 020f 	and.w	r2, r3, #15
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4442      	add	r2, r8
 8005ce4:	609a      	str	r2, [r3, #8]
 8005ce6:	e0d0      	b.n	8005e8a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7fe fa62 	bl	80041b0 <HAL_RCC_GetPCLK1Freq>
 8005cec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	469a      	mov	sl, r3
 8005cf2:	f04f 0b00 	mov.w	fp, #0
 8005cf6:	46d0      	mov	r8, sl
 8005cf8:	46d9      	mov	r9, fp
 8005cfa:	eb18 0308 	adds.w	r3, r8, r8
 8005cfe:	eb49 0409 	adc.w	r4, r9, r9
 8005d02:	4698      	mov	r8, r3
 8005d04:	46a1      	mov	r9, r4
 8005d06:	eb18 080a 	adds.w	r8, r8, sl
 8005d0a:	eb49 090b 	adc.w	r9, r9, fp
 8005d0e:	f04f 0100 	mov.w	r1, #0
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d22:	4688      	mov	r8, r1
 8005d24:	4691      	mov	r9, r2
 8005d26:	eb1a 0508 	adds.w	r5, sl, r8
 8005d2a:	eb4b 0609 	adc.w	r6, fp, r9
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	4619      	mov	r1, r3
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	f04f 0400 	mov.w	r4, #0
 8005d40:	0094      	lsls	r4, r2, #2
 8005d42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d46:	008b      	lsls	r3, r1, #2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	4631      	mov	r1, r6
 8005d50:	f7fa feea 	bl	8000b28 <__aeabi_uldivmod>
 8005d54:	4603      	mov	r3, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4b50      	ldr	r3, [pc, #320]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	469b      	mov	fp, r3
 8005d6a:	f04f 0c00 	mov.w	ip, #0
 8005d6e:	46d9      	mov	r9, fp
 8005d70:	46e2      	mov	sl, ip
 8005d72:	eb19 0309 	adds.w	r3, r9, r9
 8005d76:	eb4a 040a 	adc.w	r4, sl, sl
 8005d7a:	4699      	mov	r9, r3
 8005d7c:	46a2      	mov	sl, r4
 8005d7e:	eb19 090b 	adds.w	r9, r9, fp
 8005d82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d86:	f04f 0100 	mov.w	r1, #0
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d9a:	4689      	mov	r9, r1
 8005d9c:	4692      	mov	sl, r2
 8005d9e:	eb1b 0509 	adds.w	r5, fp, r9
 8005da2:	eb4c 060a 	adc.w	r6, ip, sl
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	4619      	mov	r1, r3
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	f04f 0400 	mov.w	r4, #0
 8005db8:	0094      	lsls	r4, r2, #2
 8005dba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dbe:	008b      	lsls	r3, r1, #2
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4623      	mov	r3, r4
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	f7fa feae 	bl	8000b28 <__aeabi_uldivmod>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	460c      	mov	r4, r1
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4b32      	ldr	r3, [pc, #200]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	2164      	movs	r1, #100	; 0x64
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	3332      	adds	r3, #50	; 0x32
 8005de6:	4a2d      	ldr	r2, [pc, #180]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005df2:	4498      	add	r8, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	469b      	mov	fp, r3
 8005df8:	f04f 0c00 	mov.w	ip, #0
 8005dfc:	46d9      	mov	r9, fp
 8005dfe:	46e2      	mov	sl, ip
 8005e00:	eb19 0309 	adds.w	r3, r9, r9
 8005e04:	eb4a 040a 	adc.w	r4, sl, sl
 8005e08:	4699      	mov	r9, r3
 8005e0a:	46a2      	mov	sl, r4
 8005e0c:	eb19 090b 	adds.w	r9, r9, fp
 8005e10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005e14:	f04f 0100 	mov.w	r1, #0
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e28:	4689      	mov	r9, r1
 8005e2a:	4692      	mov	sl, r2
 8005e2c:	eb1b 0509 	adds.w	r5, fp, r9
 8005e30:	eb4c 060a 	adc.w	r6, ip, sl
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	f04f 0400 	mov.w	r4, #0
 8005e46:	0094      	lsls	r4, r2, #2
 8005e48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005e4c:	008b      	lsls	r3, r1, #2
 8005e4e:	461a      	mov	r2, r3
 8005e50:	4623      	mov	r3, r4
 8005e52:	4628      	mov	r0, r5
 8005e54:	4631      	mov	r1, r6
 8005e56:	f7fa fe67 	bl	8000b28 <__aeabi_uldivmod>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	461a      	mov	r2, r3
 8005e60:	4b0e      	ldr	r3, [pc, #56]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005e62:	fba3 1302 	umull	r1, r3, r3, r2
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	2164      	movs	r1, #100	; 0x64
 8005e6a:	fb01 f303 	mul.w	r3, r1, r3
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	3332      	adds	r3, #50	; 0x32
 8005e74:	4a09      	ldr	r2, [pc, #36]	; (8005e9c <UART_SetConfig+0x6f4>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f003 020f 	and.w	r2, r3, #15
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4442      	add	r2, r8
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	e7ff      	b.n	8005e8a <UART_SetConfig+0x6e2>
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e94:	40011000 	.word	0x40011000
 8005e98:	40011400 	.word	0x40011400
 8005e9c:	51eb851f 	.word	0x51eb851f

08005ea0 <atoi>:
 8005ea0:	220a      	movs	r2, #10
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	f000 b90a 	b.w	80060bc <strtol>

08005ea8 <__errno>:
 8005ea8:	4b01      	ldr	r3, [pc, #4]	; (8005eb0 <__errno+0x8>)
 8005eaa:	6818      	ldr	r0, [r3, #0]
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	2000000c 	.word	0x2000000c

08005eb4 <__libc_init_array>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	4e0d      	ldr	r6, [pc, #52]	; (8005eec <__libc_init_array+0x38>)
 8005eb8:	4c0d      	ldr	r4, [pc, #52]	; (8005ef0 <__libc_init_array+0x3c>)
 8005eba:	1ba4      	subs	r4, r4, r6
 8005ebc:	10a4      	asrs	r4, r4, #2
 8005ebe:	2500      	movs	r5, #0
 8005ec0:	42a5      	cmp	r5, r4
 8005ec2:	d109      	bne.n	8005ed8 <__libc_init_array+0x24>
 8005ec4:	4e0b      	ldr	r6, [pc, #44]	; (8005ef4 <__libc_init_array+0x40>)
 8005ec6:	4c0c      	ldr	r4, [pc, #48]	; (8005ef8 <__libc_init_array+0x44>)
 8005ec8:	f000 f9a6 	bl	8006218 <_init>
 8005ecc:	1ba4      	subs	r4, r4, r6
 8005ece:	10a4      	asrs	r4, r4, #2
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	42a5      	cmp	r5, r4
 8005ed4:	d105      	bne.n	8005ee2 <__libc_init_array+0x2e>
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005edc:	4798      	blx	r3
 8005ede:	3501      	adds	r5, #1
 8005ee0:	e7ee      	b.n	8005ec0 <__libc_init_array+0xc>
 8005ee2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ee6:	4798      	blx	r3
 8005ee8:	3501      	adds	r5, #1
 8005eea:	e7f2      	b.n	8005ed2 <__libc_init_array+0x1e>
 8005eec:	080063e0 	.word	0x080063e0
 8005ef0:	080063e0 	.word	0x080063e0
 8005ef4:	080063e0 	.word	0x080063e0
 8005ef8:	080063e4 	.word	0x080063e4

08005efc <memset>:
 8005efc:	4402      	add	r2, r0
 8005efe:	4603      	mov	r3, r0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d100      	bne.n	8005f06 <memset+0xa>
 8005f04:	4770      	bx	lr
 8005f06:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0a:	e7f9      	b.n	8005f00 <memset+0x4>

08005f0c <strcpy>:
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f12:	f803 2b01 	strb.w	r2, [r3], #1
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	d1f9      	bne.n	8005f0e <strcpy+0x2>
 8005f1a:	4770      	bx	lr

08005f1c <strtok>:
 8005f1c:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <strtok+0x50>)
 8005f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f22:	681d      	ldr	r5, [r3, #0]
 8005f24:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005f26:	4606      	mov	r6, r0
 8005f28:	460f      	mov	r7, r1
 8005f2a:	b9b4      	cbnz	r4, 8005f5a <strtok+0x3e>
 8005f2c:	2050      	movs	r0, #80	; 0x50
 8005f2e:	f000 f8df 	bl	80060f0 <malloc>
 8005f32:	65a8      	str	r0, [r5, #88]	; 0x58
 8005f34:	e9c0 4400 	strd	r4, r4, [r0]
 8005f38:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005f3c:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005f40:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005f44:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005f48:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005f4c:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005f50:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005f54:	6184      	str	r4, [r0, #24]
 8005f56:	7704      	strb	r4, [r0, #28]
 8005f58:	6244      	str	r4, [r0, #36]	; 0x24
 8005f5a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005f5c:	4639      	mov	r1, r7
 8005f5e:	4630      	mov	r0, r6
 8005f60:	2301      	movs	r3, #1
 8005f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f66:	f000 b803 	b.w	8005f70 <__strtok_r>
 8005f6a:	bf00      	nop
 8005f6c:	2000000c 	.word	0x2000000c

08005f70 <__strtok_r>:
 8005f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f72:	b918      	cbnz	r0, 8005f7c <__strtok_r+0xc>
 8005f74:	6810      	ldr	r0, [r2, #0]
 8005f76:	b908      	cbnz	r0, 8005f7c <__strtok_r+0xc>
 8005f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	460f      	mov	r7, r1
 8005f80:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005f84:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005f88:	b91e      	cbnz	r6, 8005f92 <__strtok_r+0x22>
 8005f8a:	b96d      	cbnz	r5, 8005fa8 <__strtok_r+0x38>
 8005f8c:	6015      	str	r5, [r2, #0]
 8005f8e:	4628      	mov	r0, r5
 8005f90:	e7f2      	b.n	8005f78 <__strtok_r+0x8>
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	d1f6      	bne.n	8005f84 <__strtok_r+0x14>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1ef      	bne.n	8005f7a <__strtok_r+0xa>
 8005f9a:	6014      	str	r4, [r2, #0]
 8005f9c:	7003      	strb	r3, [r0, #0]
 8005f9e:	e7eb      	b.n	8005f78 <__strtok_r+0x8>
 8005fa0:	462b      	mov	r3, r5
 8005fa2:	e00d      	b.n	8005fc0 <__strtok_r+0x50>
 8005fa4:	b926      	cbnz	r6, 8005fb0 <__strtok_r+0x40>
 8005fa6:	461c      	mov	r4, r3
 8005fa8:	4623      	mov	r3, r4
 8005faa:	460f      	mov	r7, r1
 8005fac:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005fb0:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005fb4:	42b5      	cmp	r5, r6
 8005fb6:	d1f5      	bne.n	8005fa4 <__strtok_r+0x34>
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	d0f1      	beq.n	8005fa0 <__strtok_r+0x30>
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	7021      	strb	r1, [r4, #0]
 8005fc0:	6013      	str	r3, [r2, #0]
 8005fc2:	e7d9      	b.n	8005f78 <__strtok_r+0x8>

08005fc4 <_strtol_l.isra.0>:
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	4680      	mov	r8, r0
 8005fca:	4689      	mov	r9, r1
 8005fcc:	4692      	mov	sl, r2
 8005fce:	461e      	mov	r6, r3
 8005fd0:	460f      	mov	r7, r1
 8005fd2:	463d      	mov	r5, r7
 8005fd4:	9808      	ldr	r0, [sp, #32]
 8005fd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fda:	f000 f885 	bl	80060e8 <__locale_ctype_ptr_l>
 8005fde:	4420      	add	r0, r4
 8005fe0:	7843      	ldrb	r3, [r0, #1]
 8005fe2:	f013 0308 	ands.w	r3, r3, #8
 8005fe6:	d132      	bne.n	800604e <_strtol_l.isra.0+0x8a>
 8005fe8:	2c2d      	cmp	r4, #45	; 0x2d
 8005fea:	d132      	bne.n	8006052 <_strtol_l.isra.0+0x8e>
 8005fec:	787c      	ldrb	r4, [r7, #1]
 8005fee:	1cbd      	adds	r5, r7, #2
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	2e00      	cmp	r6, #0
 8005ff4:	d05d      	beq.n	80060b2 <_strtol_l.isra.0+0xee>
 8005ff6:	2e10      	cmp	r6, #16
 8005ff8:	d109      	bne.n	800600e <_strtol_l.isra.0+0x4a>
 8005ffa:	2c30      	cmp	r4, #48	; 0x30
 8005ffc:	d107      	bne.n	800600e <_strtol_l.isra.0+0x4a>
 8005ffe:	782b      	ldrb	r3, [r5, #0]
 8006000:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006004:	2b58      	cmp	r3, #88	; 0x58
 8006006:	d14f      	bne.n	80060a8 <_strtol_l.isra.0+0xe4>
 8006008:	786c      	ldrb	r4, [r5, #1]
 800600a:	2610      	movs	r6, #16
 800600c:	3502      	adds	r5, #2
 800600e:	2a00      	cmp	r2, #0
 8006010:	bf14      	ite	ne
 8006012:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006016:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800601a:	2700      	movs	r7, #0
 800601c:	fbb1 fcf6 	udiv	ip, r1, r6
 8006020:	4638      	mov	r0, r7
 8006022:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006026:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800602a:	2b09      	cmp	r3, #9
 800602c:	d817      	bhi.n	800605e <_strtol_l.isra.0+0x9a>
 800602e:	461c      	mov	r4, r3
 8006030:	42a6      	cmp	r6, r4
 8006032:	dd23      	ble.n	800607c <_strtol_l.isra.0+0xb8>
 8006034:	1c7b      	adds	r3, r7, #1
 8006036:	d007      	beq.n	8006048 <_strtol_l.isra.0+0x84>
 8006038:	4584      	cmp	ip, r0
 800603a:	d31c      	bcc.n	8006076 <_strtol_l.isra.0+0xb2>
 800603c:	d101      	bne.n	8006042 <_strtol_l.isra.0+0x7e>
 800603e:	45a6      	cmp	lr, r4
 8006040:	db19      	blt.n	8006076 <_strtol_l.isra.0+0xb2>
 8006042:	fb00 4006 	mla	r0, r0, r6, r4
 8006046:	2701      	movs	r7, #1
 8006048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800604c:	e7eb      	b.n	8006026 <_strtol_l.isra.0+0x62>
 800604e:	462f      	mov	r7, r5
 8006050:	e7bf      	b.n	8005fd2 <_strtol_l.isra.0+0xe>
 8006052:	2c2b      	cmp	r4, #43	; 0x2b
 8006054:	bf04      	itt	eq
 8006056:	1cbd      	addeq	r5, r7, #2
 8006058:	787c      	ldrbeq	r4, [r7, #1]
 800605a:	461a      	mov	r2, r3
 800605c:	e7c9      	b.n	8005ff2 <_strtol_l.isra.0+0x2e>
 800605e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006062:	2b19      	cmp	r3, #25
 8006064:	d801      	bhi.n	800606a <_strtol_l.isra.0+0xa6>
 8006066:	3c37      	subs	r4, #55	; 0x37
 8006068:	e7e2      	b.n	8006030 <_strtol_l.isra.0+0x6c>
 800606a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800606e:	2b19      	cmp	r3, #25
 8006070:	d804      	bhi.n	800607c <_strtol_l.isra.0+0xb8>
 8006072:	3c57      	subs	r4, #87	; 0x57
 8006074:	e7dc      	b.n	8006030 <_strtol_l.isra.0+0x6c>
 8006076:	f04f 37ff 	mov.w	r7, #4294967295
 800607a:	e7e5      	b.n	8006048 <_strtol_l.isra.0+0x84>
 800607c:	1c7b      	adds	r3, r7, #1
 800607e:	d108      	bne.n	8006092 <_strtol_l.isra.0+0xce>
 8006080:	2322      	movs	r3, #34	; 0x22
 8006082:	f8c8 3000 	str.w	r3, [r8]
 8006086:	4608      	mov	r0, r1
 8006088:	f1ba 0f00 	cmp.w	sl, #0
 800608c:	d107      	bne.n	800609e <_strtol_l.isra.0+0xda>
 800608e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006092:	b102      	cbz	r2, 8006096 <_strtol_l.isra.0+0xd2>
 8006094:	4240      	negs	r0, r0
 8006096:	f1ba 0f00 	cmp.w	sl, #0
 800609a:	d0f8      	beq.n	800608e <_strtol_l.isra.0+0xca>
 800609c:	b10f      	cbz	r7, 80060a2 <_strtol_l.isra.0+0xde>
 800609e:	f105 39ff 	add.w	r9, r5, #4294967295
 80060a2:	f8ca 9000 	str.w	r9, [sl]
 80060a6:	e7f2      	b.n	800608e <_strtol_l.isra.0+0xca>
 80060a8:	2430      	movs	r4, #48	; 0x30
 80060aa:	2e00      	cmp	r6, #0
 80060ac:	d1af      	bne.n	800600e <_strtol_l.isra.0+0x4a>
 80060ae:	2608      	movs	r6, #8
 80060b0:	e7ad      	b.n	800600e <_strtol_l.isra.0+0x4a>
 80060b2:	2c30      	cmp	r4, #48	; 0x30
 80060b4:	d0a3      	beq.n	8005ffe <_strtol_l.isra.0+0x3a>
 80060b6:	260a      	movs	r6, #10
 80060b8:	e7a9      	b.n	800600e <_strtol_l.isra.0+0x4a>
	...

080060bc <strtol>:
 80060bc:	4b08      	ldr	r3, [pc, #32]	; (80060e0 <strtol+0x24>)
 80060be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c0:	681c      	ldr	r4, [r3, #0]
 80060c2:	4d08      	ldr	r5, [pc, #32]	; (80060e4 <strtol+0x28>)
 80060c4:	6a23      	ldr	r3, [r4, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	bf08      	it	eq
 80060ca:	462b      	moveq	r3, r5
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	4613      	mov	r3, r2
 80060d0:	460a      	mov	r2, r1
 80060d2:	4601      	mov	r1, r0
 80060d4:	4620      	mov	r0, r4
 80060d6:	f7ff ff75 	bl	8005fc4 <_strtol_l.isra.0>
 80060da:	b003      	add	sp, #12
 80060dc:	bd30      	pop	{r4, r5, pc}
 80060de:	bf00      	nop
 80060e0:	2000000c 	.word	0x2000000c
 80060e4:	20000070 	.word	0x20000070

080060e8 <__locale_ctype_ptr_l>:
 80060e8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80060ec:	4770      	bx	lr
	...

080060f0 <malloc>:
 80060f0:	4b02      	ldr	r3, [pc, #8]	; (80060fc <malloc+0xc>)
 80060f2:	4601      	mov	r1, r0
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	f000 b815 	b.w	8006124 <_malloc_r>
 80060fa:	bf00      	nop
 80060fc:	2000000c 	.word	0x2000000c

08006100 <__ascii_mbtowc>:
 8006100:	b082      	sub	sp, #8
 8006102:	b901      	cbnz	r1, 8006106 <__ascii_mbtowc+0x6>
 8006104:	a901      	add	r1, sp, #4
 8006106:	b142      	cbz	r2, 800611a <__ascii_mbtowc+0x1a>
 8006108:	b14b      	cbz	r3, 800611e <__ascii_mbtowc+0x1e>
 800610a:	7813      	ldrb	r3, [r2, #0]
 800610c:	600b      	str	r3, [r1, #0]
 800610e:	7812      	ldrb	r2, [r2, #0]
 8006110:	1c10      	adds	r0, r2, #0
 8006112:	bf18      	it	ne
 8006114:	2001      	movne	r0, #1
 8006116:	b002      	add	sp, #8
 8006118:	4770      	bx	lr
 800611a:	4610      	mov	r0, r2
 800611c:	e7fb      	b.n	8006116 <__ascii_mbtowc+0x16>
 800611e:	f06f 0001 	mvn.w	r0, #1
 8006122:	e7f8      	b.n	8006116 <__ascii_mbtowc+0x16>

08006124 <_malloc_r>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	1ccd      	adds	r5, r1, #3
 8006128:	f025 0503 	bic.w	r5, r5, #3
 800612c:	3508      	adds	r5, #8
 800612e:	2d0c      	cmp	r5, #12
 8006130:	bf38      	it	cc
 8006132:	250c      	movcc	r5, #12
 8006134:	2d00      	cmp	r5, #0
 8006136:	4606      	mov	r6, r0
 8006138:	db01      	blt.n	800613e <_malloc_r+0x1a>
 800613a:	42a9      	cmp	r1, r5
 800613c:	d903      	bls.n	8006146 <_malloc_r+0x22>
 800613e:	230c      	movs	r3, #12
 8006140:	6033      	str	r3, [r6, #0]
 8006142:	2000      	movs	r0, #0
 8006144:	bd70      	pop	{r4, r5, r6, pc}
 8006146:	f000 f864 	bl	8006212 <__malloc_lock>
 800614a:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <_malloc_r+0xac>)
 800614c:	6814      	ldr	r4, [r2, #0]
 800614e:	4621      	mov	r1, r4
 8006150:	b991      	cbnz	r1, 8006178 <_malloc_r+0x54>
 8006152:	4c20      	ldr	r4, [pc, #128]	; (80061d4 <_malloc_r+0xb0>)
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	b91b      	cbnz	r3, 8006160 <_malloc_r+0x3c>
 8006158:	4630      	mov	r0, r6
 800615a:	f000 f83d 	bl	80061d8 <_sbrk_r>
 800615e:	6020      	str	r0, [r4, #0]
 8006160:	4629      	mov	r1, r5
 8006162:	4630      	mov	r0, r6
 8006164:	f000 f838 	bl	80061d8 <_sbrk_r>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d124      	bne.n	80061b6 <_malloc_r+0x92>
 800616c:	230c      	movs	r3, #12
 800616e:	6033      	str	r3, [r6, #0]
 8006170:	4630      	mov	r0, r6
 8006172:	f000 f84f 	bl	8006214 <__malloc_unlock>
 8006176:	e7e4      	b.n	8006142 <_malloc_r+0x1e>
 8006178:	680b      	ldr	r3, [r1, #0]
 800617a:	1b5b      	subs	r3, r3, r5
 800617c:	d418      	bmi.n	80061b0 <_malloc_r+0x8c>
 800617e:	2b0b      	cmp	r3, #11
 8006180:	d90f      	bls.n	80061a2 <_malloc_r+0x7e>
 8006182:	600b      	str	r3, [r1, #0]
 8006184:	50cd      	str	r5, [r1, r3]
 8006186:	18cc      	adds	r4, r1, r3
 8006188:	4630      	mov	r0, r6
 800618a:	f000 f843 	bl	8006214 <__malloc_unlock>
 800618e:	f104 000b 	add.w	r0, r4, #11
 8006192:	1d23      	adds	r3, r4, #4
 8006194:	f020 0007 	bic.w	r0, r0, #7
 8006198:	1ac3      	subs	r3, r0, r3
 800619a:	d0d3      	beq.n	8006144 <_malloc_r+0x20>
 800619c:	425a      	negs	r2, r3
 800619e:	50e2      	str	r2, [r4, r3]
 80061a0:	e7d0      	b.n	8006144 <_malloc_r+0x20>
 80061a2:	428c      	cmp	r4, r1
 80061a4:	684b      	ldr	r3, [r1, #4]
 80061a6:	bf16      	itet	ne
 80061a8:	6063      	strne	r3, [r4, #4]
 80061aa:	6013      	streq	r3, [r2, #0]
 80061ac:	460c      	movne	r4, r1
 80061ae:	e7eb      	b.n	8006188 <_malloc_r+0x64>
 80061b0:	460c      	mov	r4, r1
 80061b2:	6849      	ldr	r1, [r1, #4]
 80061b4:	e7cc      	b.n	8006150 <_malloc_r+0x2c>
 80061b6:	1cc4      	adds	r4, r0, #3
 80061b8:	f024 0403 	bic.w	r4, r4, #3
 80061bc:	42a0      	cmp	r0, r4
 80061be:	d005      	beq.n	80061cc <_malloc_r+0xa8>
 80061c0:	1a21      	subs	r1, r4, r0
 80061c2:	4630      	mov	r0, r6
 80061c4:	f000 f808 	bl	80061d8 <_sbrk_r>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d0cf      	beq.n	800616c <_malloc_r+0x48>
 80061cc:	6025      	str	r5, [r4, #0]
 80061ce:	e7db      	b.n	8006188 <_malloc_r+0x64>
 80061d0:	200001fc 	.word	0x200001fc
 80061d4:	20000200 	.word	0x20000200

080061d8 <_sbrk_r>:
 80061d8:	b538      	push	{r3, r4, r5, lr}
 80061da:	4c06      	ldr	r4, [pc, #24]	; (80061f4 <_sbrk_r+0x1c>)
 80061dc:	2300      	movs	r3, #0
 80061de:	4605      	mov	r5, r0
 80061e0:	4608      	mov	r0, r1
 80061e2:	6023      	str	r3, [r4, #0]
 80061e4:	f7fc fbb2 	bl	800294c <_sbrk>
 80061e8:	1c43      	adds	r3, r0, #1
 80061ea:	d102      	bne.n	80061f2 <_sbrk_r+0x1a>
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	b103      	cbz	r3, 80061f2 <_sbrk_r+0x1a>
 80061f0:	602b      	str	r3, [r5, #0]
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	20005814 	.word	0x20005814

080061f8 <__ascii_wctomb>:
 80061f8:	b149      	cbz	r1, 800620e <__ascii_wctomb+0x16>
 80061fa:	2aff      	cmp	r2, #255	; 0xff
 80061fc:	bf85      	ittet	hi
 80061fe:	238a      	movhi	r3, #138	; 0x8a
 8006200:	6003      	strhi	r3, [r0, #0]
 8006202:	700a      	strbls	r2, [r1, #0]
 8006204:	f04f 30ff 	movhi.w	r0, #4294967295
 8006208:	bf98      	it	ls
 800620a:	2001      	movls	r0, #1
 800620c:	4770      	bx	lr
 800620e:	4608      	mov	r0, r1
 8006210:	4770      	bx	lr

08006212 <__malloc_lock>:
 8006212:	4770      	bx	lr

08006214 <__malloc_unlock>:
 8006214:	4770      	bx	lr
	...

08006218 <_init>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr

08006224 <_fini>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	bf00      	nop
 8006228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622a:	bc08      	pop	{r3}
 800622c:	469e      	mov	lr, r3
 800622e:	4770      	bx	lr
